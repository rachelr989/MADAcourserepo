[
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "The following is a template for the final analysis project. The “Starter Analysis” figures and table are featured below.\n\n\n\n\nCora produced a box plot displaying hair color versus height. Because there were one ginger and two blondes, of the same height, the box plot is not evenly distributed.\n\n\n\n\n\nHeight (y-axis) plotted against hair color (x axis).\n\n\n\n\n\n\n\nCora produced a scatter plot of weight versus haircount. The scatter plot displays no trend between the two variables.\n\n\n\n\n\nWeight (y axis) versus haircount (x axis).\n\n\n\n\n\n\n\nI produced a linear model fitting haircolor and haircount to the outcome of height. I had to change the variable names to exclude spaces so that the linear model function would recognize the variables.\n\n\n\nLinear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n196.0050251\n68.7506205\n2.8509565\n0.0463510\n\n\nHaircolorblonde\n17.0251256\n21.3696883\n0.7966951\n0.4702399\n\n\nHaircolorbrown\n11.1340034\n16.3855004\n0.6795034\n0.5341073\n\n\nHaircolorginger\n28.0653266\n24.4315134\n1.1487347\n0.3146867\n\n\nHaircount\n-0.0003839\n0.0006569\n-0.5844580\n0.5902885\n\n\n\n\n\n\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#cora-hirst-contributed-to-the-starter-analysis-portion-of-this-project",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#cora-hirst-contributed-to-the-starter-analysis-portion-of-this-project",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "The following is a template for the final analysis project. The “Starter Analysis” figures and table are featured below.\n\n\n\n\nCora produced a box plot displaying hair color versus height. Because there were one ginger and two blondes, of the same height, the box plot is not evenly distributed.\n\n\n\n\n\nHeight (y-axis) plotted against hair color (x axis).\n\n\n\n\n\n\n\nCora produced a scatter plot of weight versus haircount. The scatter plot displays no trend between the two variables.\n\n\n\n\n\nWeight (y axis) versus haircount (x axis).\n\n\n\n\n\n\n\nI produced a linear model fitting haircolor and haircount to the outcome of height. I had to change the variable names to exclude spaces so that the linear model function would recognize the variables.\n\n\n\nLinear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n196.0050251\n68.7506205\n2.8509565\n0.0463510\n\n\nHaircolorblonde\n17.0251256\n21.3696883\n0.7966951\n0.4702399\n\n\nHaircolorbrown\n11.1340034\n16.3855004\n0.6795034\n0.5341073\n\n\nHaircolorginger\n28.0653266\n24.4315134\n1.1487347\n0.3146867\n\n\nHaircount\n-0.0003839\n0.0006569\n-0.5844580\n0.5902885\n\n\n\n\n\n\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nHaircolor\n0\n1\nFALSE\n4\nbla: 3, bro: 3, blo: 2, gin: 1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nHaircount\n0\n1\nNA\nNA\nNA\n106666.66667\n15612.49500\n90000\n95000\n100000\n120000\n135000\n▇▅▂▅▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender.\n\n\n\n\n\n~Figure 1. Weight (y axis) versus height (x axis) stratified by gender~"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871\n\n\n\n\n\n\n\n\n~Table 1. Linear Model of Gender and weight~"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl)#for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`        \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                   \n1 Height          height in centimeters                 numeric value &gt;0 or NA  \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA  \n3 Gender          identified gender (male/female/other) M/F/O/NA                \n4 Haircount       number of hairs on head               numeric value from 9000…\n5 Haircolor       color of hair on head                 black/brown/blonde/ging…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height    &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155…\n$ Weight    &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender    &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\",…\n$ Haircount &lt;dbl&gt; 100000, 95000, 130000, 120000, 150000, 100000, 90000, 110000…\n$ Haircolor &lt;chr&gt; \"black\", \"brown\", \"blonde\", \"ginger\", \"brown\", \"brown\", \"bla…\n\nsummary(rawdata)\n\n    Height              Weight          Gender            Haircount     \n Length:14          Min.   :  45.0   Length:14          Min.   : 90000  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.:100000  \n Mode  :character   Median :  70.0   Mode  :character   Median :120000  \n                    Mean   : 602.7                      Mean   :118214  \n                    3rd Qu.:  90.0                      3rd Qu.:133750  \n                    Max.   :7000.0                      Max.   :150000  \n                    NA's   :1                                           \n  Haircolor        \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Haircount Haircolor\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;    \n1 180        80 M         100000 black    \n2 175        70 O          95000 brown    \n3 sixty      60 F         130000 blonde   \n4 178        76 F         120000 ginger   \n5 192        90 NA        150000 brown    \n6 6          55 F         100000 brown    \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\nHaircount\n0\n1.00\n118214.29\n21177.56\n90000\n100000\n120000\n133750\n150000\n▇▂▅▃▅\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nHaircount\n0\n1.00\n117307.69\n21757.70\n90000\n100000.00\n120000\n135000\n150000\n▇▂▅▂▅\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nHaircount\n0\n1.00\n117307.69\n21757.70\n90000\n100000.00\n120000\n135000\n150000\n▇▂▅▂▅\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nHaircount\n0\n1\n112272.73\n19540.17\n90000\n97500.0\n110000\n122500\n150000\n▇▂▅▂▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nHaircount\n0\n1\n112272.73\n19540.17\n90000\n97500.0\n110000\n122500\n150000\n▇▂▅▂▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nHaircount\n0\n1\n106666.67\n15612.49\n90000\n95000\n100000\n120000\n135000\n▇▅▂▅▂\n\n\n\n\n\nTo take a look at the new variables, I used the skim function to make sure the new numerical variable of haircount is clean. There are no missing variables, and all the observations fall within the range specified in the codebook. After checking the hair color variable type using the glimpse() function, I realized it needs to be changed to a factor variable. I took another glimpse at the data to confirm my change worked correctly.\n\nskim(d4$Haircount)\n\n\nData summary\n\n\nName\nd4$Haircount\n\n\nNumber of rows\n9\n\n\nNumber of columns\n1\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndata\n0\n1\n106666.7\n15612.49\n90000\n95000\n1e+05\n120000\n135000\n▇▅▂▅▂\n\n\n\n\nglimpse(d4)\n\nRows: 9\nColumns: 5\n$ Height    &lt;dbl&gt; 180, 175, 178, 183, 156, 166, 133, 166, 154\n$ Weight    &lt;dbl&gt; 80, 70, 76, 55, 90, 110, 45, 55, 50\n$ Gender    &lt;fct&gt; M, O, F, F, O, M, F, M, M\n$ Haircount &lt;dbl&gt; 100000, 95000, 120000, 100000, 90000, 110000, 120000, 135000…\n$ Haircolor &lt;chr&gt; \"black\", \"brown\", \"ginger\", \"brown\", \"black\", \"blonde\", \"bla…\n\nd4$Haircolor &lt;- as.factor(d4$Haircolor)\nglimpse(d4)\n\nRows: 9\nColumns: 5\n$ Height    &lt;dbl&gt; 180, 175, 178, 183, 156, 166, 133, 166, 154\n$ Weight    &lt;dbl&gt; 80, 70, 76, 55, 90, 110, 45, 55, 50\n$ Gender    &lt;fct&gt; M, O, F, F, O, M, F, M, M\n$ Haircount &lt;dbl&gt; 100000, 95000, 120000, 100000, 90000, 110000, 120000, 135000…\n$ Haircolor &lt;fct&gt; black, brown, ginger, brown, black, blonde, black, blonde, b…\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "For this project, I will be reproducing the figure from the article “A Statistical Analysis of the Work of Bob Ross”. This is a bar graph that displays the percentage of paintings Bob Ross created that contain specific elements, such as trees, clouds, grass, mountains, etc. The 381 paintings that he produced during his show “The Joy of Painting” each contain a combination of these elements and themes. The presence of each element was quantified for each episode (or painting) by measuring the presence (1) or absence (0) of that element. The original figure produced from this data is shown below:\n\n\n\nFigure 1. Percentage of inclusion of elements within the paintings of Bob Ross, by Walt Hickey\n\n\nThe link to the source article: https://fivethirtyeight.com/features/a-statistical-analysis-of-the-work-of-bob-ross/\nI began by downloading the csv file from FiveThirtyEight’s GitHub repository entitled “bob ross”. The csv file contains the data for each episode/ painting (rows) and element (columns) featured in that episode.\n\n\n\nI will begin the reproduction of this figure by opening the libraries that I will need for this project.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\nI will now read the csv file and create a new data frame in R. Next, I will examine the structure of this data and\n\nbobross &lt;- readr::read_csv( # Use readr to extract the csv to a dataframe called bobross\n  here(\"presentation-exercise/elements-by-episode.csv\"), # Use here to create a relative path in my directory\n  col_types = list(.default = col_double(), # Define all columns unspecified to be a double (1 or 0)\n                   EPISODE = col_character(),\n                   TITLE = col_character()# Define column 1 to contain a character variable (episode)\n  )\n)\nstr(bobross)\n\nspc_tbl_ [403 × 69] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ EPISODE           : chr [1:403] \"S01E01\" \"S01E02\" \"S01E03\" \"S01E04\" ...\n $ TITLE             : chr [1:403] \"\\\"A WALK IN THE WOODS\\\"\" \"\\\"MT. MCKINLEY\\\"\" \"\\\"EBONY SUNSET\\\"\" \"\\\"WINTER MIST\\\"\" ...\n $ APPLE_FRAME       : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ AURORA_BOREALIS   : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BARN              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BEACH             : num [1:403] 0 0 0 0 0 0 0 0 1 0 ...\n $ BOAT              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BRIDGE            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BUILDING          : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BUSHES            : num [1:403] 1 0 0 1 0 0 0 1 0 1 ...\n $ CABIN             : num [1:403] 0 1 1 0 0 1 0 0 0 0 ...\n $ CACTUS            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ CIRCLE_FRAME      : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ CIRRUS            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ CLIFF             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ CLOUDS            : num [1:403] 0 1 0 1 0 0 0 0 1 0 ...\n $ CONIFER           : num [1:403] 0 1 1 1 0 1 0 1 0 1 ...\n $ CUMULUS           : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ DECIDUOUS         : num [1:403] 1 0 0 0 1 0 1 0 0 1 ...\n $ DIANE_ANDRE       : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ DOCK              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ DOUBLE_OVAL_FRAME : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FARM              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FENCE             : num [1:403] 0 0 1 0 0 0 0 0 1 0 ...\n $ FIRE              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FLORIDA_FRAME     : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FLOWERS           : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FOG               : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FRAMED            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ GRASS             : num [1:403] 1 0 0 0 0 0 0 0 0 0 ...\n $ GUEST             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ HALF_CIRCLE_FRAME : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ HALF_OVAL_FRAME   : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ HILLS             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ LAKE              : num [1:403] 0 0 0 1 0 1 1 1 0 1 ...\n $ LAKES             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ LIGHTHOUSE        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ MILL              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ MOON              : num [1:403] 0 0 0 0 0 1 0 0 0 0 ...\n $ MOUNTAIN          : num [1:403] 0 1 1 1 0 1 1 1 0 1 ...\n $ MOUNTAINS         : num [1:403] 0 0 1 0 0 1 1 1 0 0 ...\n $ NIGHT             : num [1:403] 0 0 0 0 0 1 0 0 0 0 ...\n $ OCEAN             : num [1:403] 0 0 0 0 0 0 0 0 1 0 ...\n $ OVAL_FRAME        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ PALM_TREES        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ PATH              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ PERSON            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ PORTRAIT          : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ RECTANGLE_3D_FRAME: num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ RECTANGULAR_FRAME : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ RIVER             : num [1:403] 1 0 0 0 1 0 0 0 0 0 ...\n $ ROCKS             : num [1:403] 0 0 0 0 1 0 0 0 0 0 ...\n $ SEASHELL_FRAME    : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ SNOW              : num [1:403] 0 1 0 0 0 1 0 0 0 0 ...\n $ SNOWY_MOUNTAIN    : num [1:403] 0 1 0 1 0 1 1 0 0 0 ...\n $ SPLIT_FRAME       : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ STEVE_ROSS        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ STRUCTURE         : num [1:403] 0 0 1 0 0 1 0 0 0 0 ...\n $ SUN               : num [1:403] 0 0 1 0 0 0 0 0 0 0 ...\n $ TOMB_FRAME        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ TREE              : num [1:403] 1 1 1 1 1 1 1 1 0 1 ...\n $ TREES             : num [1:403] 1 1 1 1 1 1 1 1 0 1 ...\n $ TRIPLE_FRAME      : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WATERFALL         : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WAVES             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WINDMILL          : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WINDOW_FRAME      : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WINTER            : num [1:403] 0 1 1 0 0 1 0 0 0 0 ...\n $ WOOD_FRAMED       : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   .default = col_double(),\n  ..   EPISODE = col_character(),\n  ..   TITLE = col_character(),\n  ..   APPLE_FRAME = col_double(),\n  ..   AURORA_BOREALIS = col_double(),\n  ..   BARN = col_double(),\n  ..   BEACH = col_double(),\n  ..   BOAT = col_double(),\n  ..   BRIDGE = col_double(),\n  ..   BUILDING = col_double(),\n  ..   BUSHES = col_double(),\n  ..   CABIN = col_double(),\n  ..   CACTUS = col_double(),\n  ..   CIRCLE_FRAME = col_double(),\n  ..   CIRRUS = col_double(),\n  ..   CLIFF = col_double(),\n  ..   CLOUDS = col_double(),\n  ..   CONIFER = col_double(),\n  ..   CUMULUS = col_double(),\n  ..   DECIDUOUS = col_double(),\n  ..   DIANE_ANDRE = col_double(),\n  ..   DOCK = col_double(),\n  ..   DOUBLE_OVAL_FRAME = col_double(),\n  ..   FARM = col_double(),\n  ..   FENCE = col_double(),\n  ..   FIRE = col_double(),\n  ..   FLORIDA_FRAME = col_double(),\n  ..   FLOWERS = col_double(),\n  ..   FOG = col_double(),\n  ..   FRAMED = col_double(),\n  ..   GRASS = col_double(),\n  ..   GUEST = col_double(),\n  ..   HALF_CIRCLE_FRAME = col_double(),\n  ..   HALF_OVAL_FRAME = col_double(),\n  ..   HILLS = col_double(),\n  ..   LAKE = col_double(),\n  ..   LAKES = col_double(),\n  ..   LIGHTHOUSE = col_double(),\n  ..   MILL = col_double(),\n  ..   MOON = col_double(),\n  ..   MOUNTAIN = col_double(),\n  ..   MOUNTAINS = col_double(),\n  ..   NIGHT = col_double(),\n  ..   OCEAN = col_double(),\n  ..   OVAL_FRAME = col_double(),\n  ..   PALM_TREES = col_double(),\n  ..   PATH = col_double(),\n  ..   PERSON = col_double(),\n  ..   PORTRAIT = col_double(),\n  ..   RECTANGLE_3D_FRAME = col_double(),\n  ..   RECTANGULAR_FRAME = col_double(),\n  ..   RIVER = col_double(),\n  ..   ROCKS = col_double(),\n  ..   SEASHELL_FRAME = col_double(),\n  ..   SNOW = col_double(),\n  ..   SNOWY_MOUNTAIN = col_double(),\n  ..   SPLIT_FRAME = col_double(),\n  ..   STEVE_ROSS = col_double(),\n  ..   STRUCTURE = col_double(),\n  ..   SUN = col_double(),\n  ..   TOMB_FRAME = col_double(),\n  ..   TREE = col_double(),\n  ..   TREES = col_double(),\n  ..   TRIPLE_FRAME = col_double(),\n  ..   WATERFALL = col_double(),\n  ..   WAVES = col_double(),\n  ..   WINDMILL = col_double(),\n  ..   WINDOW_FRAME = col_double(),\n  ..   WINTER = col_double(),\n  ..   WOOD_FRAMED = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nI did troubleshooting using ChatGPT to find out how to add a different column type for the first two character columns. Normally, I would use the default option for all columns, but instead, I was told to add a line with the specific column name and type of variable that the column contains. I fixed this by adding col_types for TITLE and EPISODE. The data frame was successfully extracted into R.\n\n\n\nNow, I will attempt to reproduce the graph in the article by using ChatGPT and ggplot functions to make a professional-looking bar chart.\nLooking at the bar graph, it seems that the author renamed many of the columns to better reflect what they represent. I will infer which names correspond to which bar chart subtitles. The author only includes the top 36 of the total possible 67 elements.\nI began with the prompt: &gt;“I want to produce a horizontal bar chart using R ggplot. The columns include a binary value of”0” or “1”. I want to plot the frequency of “1” values for each column. I want to convert this frequency into a percentage out of 381. I want to plot only the 36 greatest percentages.”\n\n# Calculate the frequency of \"1\" values for each column and convert it to percentage\nfreq_br &lt;- bobross %&gt;%\n  summarise_all(~ sum(. == 1) / 381 * 100) %&gt;% # Convert the frequency of 1 to a percentage for eahc column\n  gather() %&gt;%\n  arrange(desc(value)) %&gt;%\n  head(36) # Choose the highest 36 frequencies\n\n# Plotting the horizontal bar chart\nggplot(freq_br, aes(x = reorder(key, -value), y = value)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  coord_flip() +\n  labs(x = \"Column\", y = \"Frequency (%)\", title = \"Frequency of '1' Values in Each Column\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 8)) # Adjust font size of y-axis labels if needed\n\n\n\n\n\n\n\n\nThis is a solid start, however, I will add prompts to reformat the graph in a way that mimics the original. To do this I used the prompt: &gt;“Make the plot descending in value. Label the percentage value at the end of each bar. Delete the axis titles. Remove the grid lines. Change the graph title to”The Paintings of Bob Ross” with the subtitle “Percentage containing each element”.”\n\n# Plotting the horizontal bar chart\nggplot(freq_br, aes(x = reorder(key, -value), y = value, label = sprintf(\"%.1f%%\", value))) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  geom_text(hjust = -0.2, size = 3) +  # Add text labels at the end of bars\n  coord_flip() +\n  labs(title = \"The Paintings of Bob Ross\",\n       subtitle = \"Percentage containing each element\",\n       x = NULL, y = NULL) +  # Remove axis titles\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 8),  # Adjust font size of y-axis labels\n        panel.grid = element_blank())  # Remove grid lines\n\n\n\n\n\n\n\n\nBecause it did not make the plot descending, I will ask ChatGPT to flip the plot along the x-axis. I will also ask it to remove the y-axis labels. &gt;“Flip the plot to make the largest percentage value at the top. Remove the % sign, except for the highest percentage value. Remove the frequency labels on the axis. Change the color to blue.”\n\n# Plotting the horizontal bar chart\nggplot(freq_br, aes(x = reorder(key, value), y = value, label = ifelse(rank(desc(value)) == 1, paste0(round(value), \"%\"), round(value)))) +\n  geom_bar(stat = \"identity\", fill = \"blue\") +\n  geom_text(hjust = -0.2, size = 3) +  # Add text labels at the end of bars\n  coord_flip() +\n  labs(title = \"The Paintings of Bob Ross\",\n       subtitle = \"Percentage containing each element\",\n       x = NULL, y = NULL) +  # Remove axis titles\n  theme_minimal() +\n  theme(axis.text.x = element_blank(),  # Remove y-axis labels\n        axis.ticks.y = element_blank(),  # Remove y-axis ticks\n        panel.grid = element_blank())  # Remove grid lines\n\n\n\n\n\n\n\n\nI now want to change the y-axis names to coordinate with the names used in the paper. I also uploaded the original figure into the AI font finder, called WhatTheFont, to identify the font used. It was called “Elastik Regular D”.\nI started with the prompt: &gt;“Change the font to”Elastik Regular D”. How do I change the y-axis subtitles to custom titles?”\nThis was not what I wanted, as I wanted to change the name of the column labels on the plot. Instead I used this prompt: &gt;“Remove this y-axis title. I want to change the column names used to label each frequency bar”\nThis resulted in the same problem as before, so I asked ChatGPT “How do I rename the values in the ‘Key’ column?” and it suggested to use the mutate() function from the dpylr package. I change the names for each key item below.\n\nfreq_br &lt;- freq_br %&gt;%\n  mutate(key = case_when(\n    key == \"TREE\" ~ \"At least one tree\",\nkey == \"TREES\" ~ \"At least two trees\",\nkey == \"DECIDUOUS\" ~ \"Deciduous tree\",\nkey == \"CONIFER\" ~ \"Coniferous tree\",\nkey == \"CLOUDS\" ~ \"Clouds\",\nkey == \"MOUNTAIN\" ~ \"At least one mountain\",\nkey == \"LAKE\" ~ \"Lake\",\nkey == \"GRASS\" ~ \"Grass\",\nkey == \"RIVER\" ~ \"River or stream\",\nkey == \"BUSHES\" ~ \"Bushes\",\nkey == \"SNOWY_MOUNTAIN\" ~ \"Snow-covered mountain\",\nkey == \"MOUNTAINS\" ~ \"At least two mountains\",\nkey == \"CUMULUS\" ~ \"Cumulus cloud\",\nkey == \"STRUCTURE\" ~ \"Man-made structure\",\nkey == \"ROCKS\" ~ \"Rocks\",\nkey == \"SNOW\" ~ \"Snow\",\nkey == \"WINTER\" ~ \"Winter\",\nkey == \"CABIN\" ~ \"Cabin\",\nkey == \"FRAMED\" ~ \"Frame\",\nkey == \"PATH\" ~ \"Path\",\nkey == \"SUN\" ~ \"Sun\",\nkey == \"WATERFALL\" ~ \"Waterfall\",\nkey == \"OVAL_FRAME\" ~ \"Oval frame\",\nkey == \"OCEAN\" ~ \"Ocean\",\nkey == \"WAVES\" ~ \"Waves\",\nkey == \"CIRRUS\" ~ \"Cirrus cloud\",\nkey == \"BEACH\" ~ \"Beach\",\nkey == \"FENCE\" ~ \"Fence\",\nkey == \"FOG\" ~ \"Fog\",\nkey == \"GUEST\" ~ \"Guest\",\nkey == \"HILLS\" ~ \"Hills\",\nkey == \"BARN\" ~ \"Barn\",\nkey == \"FLOWERS\" ~ \"Flowers\",\nkey == \"STEVE_ROSS\" ~ \"Steve Ross\",\nkey == \"NIGHT\" ~ \"Nighttime\",\nkey == \"PALM_TREES\" ~ \"Palm tree\",\n    TRUE ~ key  # Keep other values unchanged\n  ))\n\nI also noticed that the font called “Elastik Regular D” was not available, so I asked ChatGOT for similar fonts, to which it gave me “Roboto”, amongst others. To use this fotn I had to install the open source font document onto my laptop.\nWhen I subsituted the font “Roboto Regular”, I continued to recieve an error message. Because of this, I sent ChatGPT the error message. I recieved this output. I will refrain from including this code, as it relies on a local path to find the font, rather than the repository. You may change the code after paths to fit your local device.\n\n#Install and load the extrafont package library(extrafont) #Specify the exact font file path for Roboto Regular font_import(paths = “C:/Windows/Fonts”, prompt = FALSE) #Load the Roboto Regular font family loadfonts(device = “win”)\n\nThe installation of Roboto Regular into R was not successful, so I will use a similar font that I found in my font database called “Segoe UI”.\nThe final code for producing the plot is shown below:\n\n# Plotting the horizontal bar chart\nggplot(freq_br, aes(x = reorder(key, value), y = value, label = ifelse(rank(desc(value)) == 1, paste0(round(value), \"%\"), round(value)))) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  geom_text(hjust = -0.2, size = 3) +  # Add text labels at the end of bars\n  coord_flip() +\n  labs(title = \"The Paintings of Bob Ross\",\n       subtitle = \"Percentage containing each element\",\n       x = NULL, y = NULL) +  # Remove axis titles\n  theme_minimal() +\n  theme(axis.text.x = element_blank(),  # Remove y-axis labels\n        axis.ticks.y = element_blank(),  # Remove y-axis ticks\n        panel.grid = element_blank(),  # Remove grid lines\n        text = element_text(family = \"Segoe UI\"))  # Change font to Snow\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\n\n\n\n\nIn the final product, I changed the color back to “skyblue” as this color is more appealing. The format of the box plot is similar to the original, except, the percent frequency of each element differs. This might be because the formula for finding the frequency of each element and the conversion into percentages might have differed. However, the author did not include their methodology for finding the percentages displayed in the figure. For this reason, the figure will stay how it is.\n\n\n\nI will now produce a professional-looking table from the data previously used to create the bar graph. I start by giving ChatGPT this prompt:\n\nCreate a professional-looking from the data frame called freq_df. Let the values in the key column be labels in the left column of the table. Let the values in the column value be the right column of the table. Let the title of the table be “Percentage of Use for Each Element in Bob Ross’ Paintings”. Let the column labels be bold. Use a skyblue and white pattern for the body of the table.\n\nI originally recieved an error saying that R could not find the function row_spec, so I pasted the error message into ChatGPT. Because I was repeatedly recieving errors from R when using knitr, I decided to ask ChatGPT to produce this table using ggplot instead.\nAfter going back and forth with ChatGPT to correct some of my syntax errors, I came up with this table.\n\n# Create ggplot object\nggplot(freq_br, aes(x = 1, y = 1)) +  # Create a plot with single point\n  geom_blank() +  # Add a blank layer to create a canvas\n geom_text(aes(label = key, y = seq(0.9, 0.5, length.out = nrow(freq_br))), hjust = 0, lineheight = 1.5, size = 3) +  # Add text for elements\ngeom_text(aes(label = paste0(value, \"%\"), x = 2, y = seq(0.9, 0.5, length.out = nrow(freq_br))), hjust = 3, lineheight = 1.5, size = 3) +  # Add text for percentages\n  theme_void() +  # Remove axis and background\n  labs(title = \"Percentage of Use for Each Element in Bob Ross' Paintings\")  # Add title\n\n\n\n\n\n\n\n\nEven after a long while of bac and forth, I was unable to space the lines and format the table as I preferred. Instead, I asked ChatGPT to produce the table previously requested, but with using knitr instead of ggplot.\n\nknitr::kable(freq_br, caption = \"Percentage of Use for Each Element in Bob Ross' Paintings\")\n\n\nPercentage of Use for Each Element in Bob Ross’ Paintings\n\n\nkey\nvalue\n\n\n\n\nAt least one tree\n94.750656\n\n\nAt least two trees\n88.451444\n\n\nDeciduous tree\n59.580053\n\n\nConiferous tree\n55.643045\n\n\nClouds\n46.981627\n\n\nAt least one mountain\n41.994751\n\n\nLake\n37.532808\n\n\nGrass\n37.270341\n\n\nRiver or stream\n33.070866\n\n\nBushes\n31.496063\n\n\nSnow-covered mountain\n28.608924\n\n\nAt least two mountains\n25.984252\n\n\nCumulus cloud\n22.572178\n\n\nMan-made structure\n22.309711\n\n\nRocks\n20.209974\n\n\nSnow\n19.685039\n\n\nCabin\n18.110236\n\n\nWinter\n18.110236\n\n\nFrame\n13.910761\n\n\nPath\n12.860892\n\n\nSun\n10.498688\n\n\nWaterfall\n10.236220\n\n\nOval frame\n9.973753\n\n\nOcean\n9.448819\n\n\nWaves\n8.923884\n\n\nCirrus cloud\n7.349081\n\n\nBeach\n7.086614\n\n\nFence\n6.299213\n\n\nFog\n6.036745\n\n\nGuest\n5.774278\n\n\nHills\n4.724409\n\n\nBarn\n4.461942\n\n\nFlowers\n3.149606\n\n\nNighttime\n2.887139\n\n\nSteve Ross\n2.887139\n\n\nPalm tree\n2.362205\n\n\n\n\n\nI added prompts to ChatGPT to change the colors to alternating skyblue and white and to make the table “professional looking”.\n\nkable(freq_br, caption = \"Percentage of Use for Each Element in Bob Ross' Paintings\") %&gt;%\n  kable_styling(full_width = FALSE, \n                bootstrap_options = c(\"striped\", \"hover\"),\n                font_size = 16,\n                latex_options = \"hold_position\",\n                repeat_header_text = \"Table 1: Percentage of Use for Each Element in Bob Ross' Paintings\") %&gt;%\n  column_spec(1:2, background = c(\"skyblue\", \"white\"))\n\nWarning in ensure_len_html(background, nrows, \"background\"): The number of\nprovided values in background does not equal to the number of rows.\n\n\n\nPercentage of Use for Each Element in Bob Ross' Paintings\n\n\nkey\nvalue\n\n\n\n\nAt least one tree\n94.750656\n\n\nAt least two trees\n88.451444\n\n\nDeciduous tree\n59.580053\n\n\nConiferous tree\n55.643045\n\n\nClouds\n46.981627\n\n\nAt least one mountain\n41.994751\n\n\nLake\n37.532808\n\n\nGrass\n37.270341\n\n\nRiver or stream\n33.070866\n\n\nBushes\n31.496063\n\n\nSnow-covered mountain\n28.608924\n\n\nAt least two mountains\n25.984252\n\n\nCumulus cloud\n22.572178\n\n\nMan-made structure\n22.309711\n\n\nRocks\n20.209974\n\n\nSnow\n19.685039\n\n\nCabin\n18.110236\n\n\nWinter\n18.110236\n\n\nFrame\n13.910761\n\n\nPath\n12.860892\n\n\nSun\n10.498688\n\n\nWaterfall\n10.236220\n\n\nOval frame\n9.973753\n\n\nOcean\n9.448819\n\n\nWaves\n8.923884\n\n\nCirrus cloud\n7.349081\n\n\nBeach\n7.086614\n\n\nFence\n6.299213\n\n\nFog\n6.036745\n\n\nGuest\n5.774278\n\n\nHills\n4.724409\n\n\nBarn\n4.461942\n\n\nFlowers\n3.149606\n\n\nNighttime\n2.887139\n\n\nSteve Ross\n2.887139\n\n\nPalm tree\n2.362205\n\n\n\n\n\n\n\nAfter seeing the length of this table, I decided to consolidate it to the top 10 elements. I prompted it to shorten the table by only showing the top 10 elements. This took quite a bit of back and forth, but I finally ended with a smaller table.\n\n# Calculate total frequency\ntotal_frequency &lt;- sum(freq_br$value)\n\n# Sort the data frame by frequency in descending order\nfreq_br &lt;- freq_br[order(-freq_br$value), ]\n\n# Keep only the top N elements\ntop_N &lt;- 10\ntop_elements &lt;- freq_br[1:top_N, c(\"key\", \"value\")]\n\n# Combine less frequent elements into an \"Other\" category\nother_elements &lt;- data.frame(key = \"Other\",\n                             value = sum(freq_br$value[-(1:top_N)]))\n\n# Ensure that both data frames have consistent column names\nnames(other_elements) &lt;- names(top_elements)\n\n# Combine top elements and \"Other\" category\ncombined_data &lt;- rbind(top_elements, other_elements)\n\n# Create the table\ncombined_data %&gt;%\n  kable(caption = \"Percentage of Use for Top Elements in Bob Ross' Paintings\") %&gt;%\n  kable_styling(full_width = FALSE, \n                bootstrap_options = c(\"striped\", \"hover\"),\n                font_size = 16,\n                latex_options = \"hold_position\",\n                repeat_header_text = \"Table 1: Percentage of Use for Top Elements in Bob Ross' Paintings\") %&gt;%\n  column_spec(1:2, background = c(\"skyblue\", \"white\"))\n\nWarning in ensure_len_html(background, nrows, \"background\"): The number of\nprovided values in background does not equal to the number of rows.\n\n\n\nPercentage of Use for Top Elements in Bob Ross' Paintings\n\n\nkey\nvalue\n\n\n\n\nAt least one tree\n94.75066\n\n\nAt least two trees\n88.45144\n\n\nDeciduous tree\n59.58005\n\n\nConiferous tree\n55.64304\n\n\nClouds\n46.98163\n\n\nAt least one mountain\n41.99475\n\n\nLake\n37.53281\n\n\nGrass\n37.27034\n\n\nRiver or stream\n33.07087\n\n\nBushes\n31.49606\n\n\nOther\n304.46194\n\n\n\n\n\n\n\nLastly, I will round the digits in the values column to two decimal places.\n\n# Calculate total frequency\ntotal_frequency &lt;- sum(freq_br$value)\n\n# Sort the data frame by frequency in descending order\nfreq_br &lt;- freq_br[order(-freq_br$value), ]\n\n# Keep only the top N elements\ntop_N &lt;- 10\ntop_elements &lt;- freq_br[1:top_N, c(\"key\", \"value\")]\n\n# Round the \"Frequency\" values to two decimal places\ntop_elements$value &lt;- round(top_elements$value, 2)\n\n# Combine less frequent elements into an \"Other\" category\nother_elements &lt;- data.frame(key = \"Other\",\n                              value = sum(freq_br$value[-(1:top_N)]))\n\n# Round the \"Frequency\" value to two decimal places\nother_elements$value &lt;- round(other_elements$value, 2)\n\n# Ensure that both data frames have consistent column names\nnames(other_elements) &lt;- names(top_elements)\n\n# Combine top elements and \"Other\" category\ncombined_data &lt;- rbind(top_elements, other_elements)\n\n# Create the table\ncombined_data %&gt;%\n  kable(caption = \"Percentage of Use for Top Elements in Bob Ross' Paintings\") %&gt;%\n  kable_styling(full_width = FALSE, \n                bootstrap_options = c(\"striped\", \"hover\"),\n                font_size = 16,\n                latex_options = \"hold_position\",\n                repeat_header_text = \"Table 1: Percentage of Use for Top Elements in Bob Ross' Paintings\") %&gt;%\n  column_spec(1:2, background = c(\"skyblue\", \"white\"))\n\nWarning in ensure_len_html(background, nrows, \"background\"): The number of\nprovided values in background does not equal to the number of rows.\n\n\n\nPercentage of Use for Top Elements in Bob Ross' Paintings\n\n\nkey\nvalue\n\n\n\n\nAt least one tree\n94.75\n\n\nAt least two trees\n88.45\n\n\nDeciduous tree\n59.58\n\n\nConiferous tree\n55.64\n\n\nClouds\n46.98\n\n\nAt least one mountain\n41.99\n\n\nLake\n37.53\n\n\nGrass\n37.27\n\n\nRiver or stream\n33.07\n\n\nBushes\n31.50\n\n\nOther\n304.46"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#figure-from-fivethirtyeights-a-statistical-analysis-of-the-work-of-bob-ross",
    "href": "presentation-exercise/presentation-exercise.html#figure-from-fivethirtyeights-a-statistical-analysis-of-the-work-of-bob-ross",
    "title": "Presentation Exercise",
    "section": "",
    "text": "For this project, I will be reproducing the figure from the article “A Statistical Analysis of the Work of Bob Ross”. This is a bar graph that displays the percentage of paintings Bob Ross created that contain specific elements, such as trees, clouds, grass, mountains, etc. The 381 paintings that he produced during his show “The Joy of Painting” each contain a combination of these elements and themes. The presence of each element was quantified for each episode (or painting) by measuring the presence (1) or absence (0) of that element. The original figure produced from this data is shown below:\n\n\n\nFigure 1. Percentage of inclusion of elements within the paintings of Bob Ross, by Walt Hickey\n\n\nThe link to the source article: https://fivethirtyeight.com/features/a-statistical-analysis-of-the-work-of-bob-ross/\nI began by downloading the csv file from FiveThirtyEight’s GitHub repository entitled “bob ross”. The csv file contains the data for each episode/ painting (rows) and element (columns) featured in that episode.\n\n\n\nI will begin the reproduction of this figure by opening the libraries that I will need for this project.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\nI will now read the csv file and create a new data frame in R. Next, I will examine the structure of this data and\n\nbobross &lt;- readr::read_csv( # Use readr to extract the csv to a dataframe called bobross\n  here(\"presentation-exercise/elements-by-episode.csv\"), # Use here to create a relative path in my directory\n  col_types = list(.default = col_double(), # Define all columns unspecified to be a double (1 or 0)\n                   EPISODE = col_character(),\n                   TITLE = col_character()# Define column 1 to contain a character variable (episode)\n  )\n)\nstr(bobross)\n\nspc_tbl_ [403 × 69] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ EPISODE           : chr [1:403] \"S01E01\" \"S01E02\" \"S01E03\" \"S01E04\" ...\n $ TITLE             : chr [1:403] \"\\\"A WALK IN THE WOODS\\\"\" \"\\\"MT. MCKINLEY\\\"\" \"\\\"EBONY SUNSET\\\"\" \"\\\"WINTER MIST\\\"\" ...\n $ APPLE_FRAME       : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ AURORA_BOREALIS   : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BARN              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BEACH             : num [1:403] 0 0 0 0 0 0 0 0 1 0 ...\n $ BOAT              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BRIDGE            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BUILDING          : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ BUSHES            : num [1:403] 1 0 0 1 0 0 0 1 0 1 ...\n $ CABIN             : num [1:403] 0 1 1 0 0 1 0 0 0 0 ...\n $ CACTUS            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ CIRCLE_FRAME      : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ CIRRUS            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ CLIFF             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ CLOUDS            : num [1:403] 0 1 0 1 0 0 0 0 1 0 ...\n $ CONIFER           : num [1:403] 0 1 1 1 0 1 0 1 0 1 ...\n $ CUMULUS           : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ DECIDUOUS         : num [1:403] 1 0 0 0 1 0 1 0 0 1 ...\n $ DIANE_ANDRE       : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ DOCK              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ DOUBLE_OVAL_FRAME : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FARM              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FENCE             : num [1:403] 0 0 1 0 0 0 0 0 1 0 ...\n $ FIRE              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FLORIDA_FRAME     : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FLOWERS           : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FOG               : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ FRAMED            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ GRASS             : num [1:403] 1 0 0 0 0 0 0 0 0 0 ...\n $ GUEST             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ HALF_CIRCLE_FRAME : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ HALF_OVAL_FRAME   : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ HILLS             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ LAKE              : num [1:403] 0 0 0 1 0 1 1 1 0 1 ...\n $ LAKES             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ LIGHTHOUSE        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ MILL              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ MOON              : num [1:403] 0 0 0 0 0 1 0 0 0 0 ...\n $ MOUNTAIN          : num [1:403] 0 1 1 1 0 1 1 1 0 1 ...\n $ MOUNTAINS         : num [1:403] 0 0 1 0 0 1 1 1 0 0 ...\n $ NIGHT             : num [1:403] 0 0 0 0 0 1 0 0 0 0 ...\n $ OCEAN             : num [1:403] 0 0 0 0 0 0 0 0 1 0 ...\n $ OVAL_FRAME        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ PALM_TREES        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ PATH              : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ PERSON            : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ PORTRAIT          : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ RECTANGLE_3D_FRAME: num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ RECTANGULAR_FRAME : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ RIVER             : num [1:403] 1 0 0 0 1 0 0 0 0 0 ...\n $ ROCKS             : num [1:403] 0 0 0 0 1 0 0 0 0 0 ...\n $ SEASHELL_FRAME    : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ SNOW              : num [1:403] 0 1 0 0 0 1 0 0 0 0 ...\n $ SNOWY_MOUNTAIN    : num [1:403] 0 1 0 1 0 1 1 0 0 0 ...\n $ SPLIT_FRAME       : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ STEVE_ROSS        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ STRUCTURE         : num [1:403] 0 0 1 0 0 1 0 0 0 0 ...\n $ SUN               : num [1:403] 0 0 1 0 0 0 0 0 0 0 ...\n $ TOMB_FRAME        : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ TREE              : num [1:403] 1 1 1 1 1 1 1 1 0 1 ...\n $ TREES             : num [1:403] 1 1 1 1 1 1 1 1 0 1 ...\n $ TRIPLE_FRAME      : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WATERFALL         : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WAVES             : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WINDMILL          : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WINDOW_FRAME      : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n $ WINTER            : num [1:403] 0 1 1 0 0 1 0 0 0 0 ...\n $ WOOD_FRAMED       : num [1:403] 0 0 0 0 0 0 0 0 0 0 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   .default = col_double(),\n  ..   EPISODE = col_character(),\n  ..   TITLE = col_character(),\n  ..   APPLE_FRAME = col_double(),\n  ..   AURORA_BOREALIS = col_double(),\n  ..   BARN = col_double(),\n  ..   BEACH = col_double(),\n  ..   BOAT = col_double(),\n  ..   BRIDGE = col_double(),\n  ..   BUILDING = col_double(),\n  ..   BUSHES = col_double(),\n  ..   CABIN = col_double(),\n  ..   CACTUS = col_double(),\n  ..   CIRCLE_FRAME = col_double(),\n  ..   CIRRUS = col_double(),\n  ..   CLIFF = col_double(),\n  ..   CLOUDS = col_double(),\n  ..   CONIFER = col_double(),\n  ..   CUMULUS = col_double(),\n  ..   DECIDUOUS = col_double(),\n  ..   DIANE_ANDRE = col_double(),\n  ..   DOCK = col_double(),\n  ..   DOUBLE_OVAL_FRAME = col_double(),\n  ..   FARM = col_double(),\n  ..   FENCE = col_double(),\n  ..   FIRE = col_double(),\n  ..   FLORIDA_FRAME = col_double(),\n  ..   FLOWERS = col_double(),\n  ..   FOG = col_double(),\n  ..   FRAMED = col_double(),\n  ..   GRASS = col_double(),\n  ..   GUEST = col_double(),\n  ..   HALF_CIRCLE_FRAME = col_double(),\n  ..   HALF_OVAL_FRAME = col_double(),\n  ..   HILLS = col_double(),\n  ..   LAKE = col_double(),\n  ..   LAKES = col_double(),\n  ..   LIGHTHOUSE = col_double(),\n  ..   MILL = col_double(),\n  ..   MOON = col_double(),\n  ..   MOUNTAIN = col_double(),\n  ..   MOUNTAINS = col_double(),\n  ..   NIGHT = col_double(),\n  ..   OCEAN = col_double(),\n  ..   OVAL_FRAME = col_double(),\n  ..   PALM_TREES = col_double(),\n  ..   PATH = col_double(),\n  ..   PERSON = col_double(),\n  ..   PORTRAIT = col_double(),\n  ..   RECTANGLE_3D_FRAME = col_double(),\n  ..   RECTANGULAR_FRAME = col_double(),\n  ..   RIVER = col_double(),\n  ..   ROCKS = col_double(),\n  ..   SEASHELL_FRAME = col_double(),\n  ..   SNOW = col_double(),\n  ..   SNOWY_MOUNTAIN = col_double(),\n  ..   SPLIT_FRAME = col_double(),\n  ..   STEVE_ROSS = col_double(),\n  ..   STRUCTURE = col_double(),\n  ..   SUN = col_double(),\n  ..   TOMB_FRAME = col_double(),\n  ..   TREE = col_double(),\n  ..   TREES = col_double(),\n  ..   TRIPLE_FRAME = col_double(),\n  ..   WATERFALL = col_double(),\n  ..   WAVES = col_double(),\n  ..   WINDMILL = col_double(),\n  ..   WINDOW_FRAME = col_double(),\n  ..   WINTER = col_double(),\n  ..   WOOD_FRAMED = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nI did troubleshooting using ChatGPT to find out how to add a different column type for the first two character columns. Normally, I would use the default option for all columns, but instead, I was told to add a line with the specific column name and type of variable that the column contains. I fixed this by adding col_types for TITLE and EPISODE. The data frame was successfully extracted into R.\n\n\n\nNow, I will attempt to reproduce the graph in the article by using ChatGPT and ggplot functions to make a professional-looking bar chart.\nLooking at the bar graph, it seems that the author renamed many of the columns to better reflect what they represent. I will infer which names correspond to which bar chart subtitles. The author only includes the top 36 of the total possible 67 elements.\nI began with the prompt: &gt;“I want to produce a horizontal bar chart using R ggplot. The columns include a binary value of”0” or “1”. I want to plot the frequency of “1” values for each column. I want to convert this frequency into a percentage out of 381. I want to plot only the 36 greatest percentages.”\n\n# Calculate the frequency of \"1\" values for each column and convert it to percentage\nfreq_br &lt;- bobross %&gt;%\n  summarise_all(~ sum(. == 1) / 381 * 100) %&gt;% # Convert the frequency of 1 to a percentage for eahc column\n  gather() %&gt;%\n  arrange(desc(value)) %&gt;%\n  head(36) # Choose the highest 36 frequencies\n\n# Plotting the horizontal bar chart\nggplot(freq_br, aes(x = reorder(key, -value), y = value)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  coord_flip() +\n  labs(x = \"Column\", y = \"Frequency (%)\", title = \"Frequency of '1' Values in Each Column\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 8)) # Adjust font size of y-axis labels if needed\n\n\n\n\n\n\n\n\nThis is a solid start, however, I will add prompts to reformat the graph in a way that mimics the original. To do this I used the prompt: &gt;“Make the plot descending in value. Label the percentage value at the end of each bar. Delete the axis titles. Remove the grid lines. Change the graph title to”The Paintings of Bob Ross” with the subtitle “Percentage containing each element”.”\n\n# Plotting the horizontal bar chart\nggplot(freq_br, aes(x = reorder(key, -value), y = value, label = sprintf(\"%.1f%%\", value))) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  geom_text(hjust = -0.2, size = 3) +  # Add text labels at the end of bars\n  coord_flip() +\n  labs(title = \"The Paintings of Bob Ross\",\n       subtitle = \"Percentage containing each element\",\n       x = NULL, y = NULL) +  # Remove axis titles\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 8),  # Adjust font size of y-axis labels\n        panel.grid = element_blank())  # Remove grid lines\n\n\n\n\n\n\n\n\nBecause it did not make the plot descending, I will ask ChatGPT to flip the plot along the x-axis. I will also ask it to remove the y-axis labels. &gt;“Flip the plot to make the largest percentage value at the top. Remove the % sign, except for the highest percentage value. Remove the frequency labels on the axis. Change the color to blue.”\n\n# Plotting the horizontal bar chart\nggplot(freq_br, aes(x = reorder(key, value), y = value, label = ifelse(rank(desc(value)) == 1, paste0(round(value), \"%\"), round(value)))) +\n  geom_bar(stat = \"identity\", fill = \"blue\") +\n  geom_text(hjust = -0.2, size = 3) +  # Add text labels at the end of bars\n  coord_flip() +\n  labs(title = \"The Paintings of Bob Ross\",\n       subtitle = \"Percentage containing each element\",\n       x = NULL, y = NULL) +  # Remove axis titles\n  theme_minimal() +\n  theme(axis.text.x = element_blank(),  # Remove y-axis labels\n        axis.ticks.y = element_blank(),  # Remove y-axis ticks\n        panel.grid = element_blank())  # Remove grid lines\n\n\n\n\n\n\n\n\nI now want to change the y-axis names to coordinate with the names used in the paper. I also uploaded the original figure into the AI font finder, called WhatTheFont, to identify the font used. It was called “Elastik Regular D”.\nI started with the prompt: &gt;“Change the font to”Elastik Regular D”. How do I change the y-axis subtitles to custom titles?”\nThis was not what I wanted, as I wanted to change the name of the column labels on the plot. Instead I used this prompt: &gt;“Remove this y-axis title. I want to change the column names used to label each frequency bar”\nThis resulted in the same problem as before, so I asked ChatGPT “How do I rename the values in the ‘Key’ column?” and it suggested to use the mutate() function from the dpylr package. I change the names for each key item below.\n\nfreq_br &lt;- freq_br %&gt;%\n  mutate(key = case_when(\n    key == \"TREE\" ~ \"At least one tree\",\nkey == \"TREES\" ~ \"At least two trees\",\nkey == \"DECIDUOUS\" ~ \"Deciduous tree\",\nkey == \"CONIFER\" ~ \"Coniferous tree\",\nkey == \"CLOUDS\" ~ \"Clouds\",\nkey == \"MOUNTAIN\" ~ \"At least one mountain\",\nkey == \"LAKE\" ~ \"Lake\",\nkey == \"GRASS\" ~ \"Grass\",\nkey == \"RIVER\" ~ \"River or stream\",\nkey == \"BUSHES\" ~ \"Bushes\",\nkey == \"SNOWY_MOUNTAIN\" ~ \"Snow-covered mountain\",\nkey == \"MOUNTAINS\" ~ \"At least two mountains\",\nkey == \"CUMULUS\" ~ \"Cumulus cloud\",\nkey == \"STRUCTURE\" ~ \"Man-made structure\",\nkey == \"ROCKS\" ~ \"Rocks\",\nkey == \"SNOW\" ~ \"Snow\",\nkey == \"WINTER\" ~ \"Winter\",\nkey == \"CABIN\" ~ \"Cabin\",\nkey == \"FRAMED\" ~ \"Frame\",\nkey == \"PATH\" ~ \"Path\",\nkey == \"SUN\" ~ \"Sun\",\nkey == \"WATERFALL\" ~ \"Waterfall\",\nkey == \"OVAL_FRAME\" ~ \"Oval frame\",\nkey == \"OCEAN\" ~ \"Ocean\",\nkey == \"WAVES\" ~ \"Waves\",\nkey == \"CIRRUS\" ~ \"Cirrus cloud\",\nkey == \"BEACH\" ~ \"Beach\",\nkey == \"FENCE\" ~ \"Fence\",\nkey == \"FOG\" ~ \"Fog\",\nkey == \"GUEST\" ~ \"Guest\",\nkey == \"HILLS\" ~ \"Hills\",\nkey == \"BARN\" ~ \"Barn\",\nkey == \"FLOWERS\" ~ \"Flowers\",\nkey == \"STEVE_ROSS\" ~ \"Steve Ross\",\nkey == \"NIGHT\" ~ \"Nighttime\",\nkey == \"PALM_TREES\" ~ \"Palm tree\",\n    TRUE ~ key  # Keep other values unchanged\n  ))\n\nI also noticed that the font called “Elastik Regular D” was not available, so I asked ChatGOT for similar fonts, to which it gave me “Roboto”, amongst others. To use this fotn I had to install the open source font document onto my laptop.\nWhen I subsituted the font “Roboto Regular”, I continued to recieve an error message. Because of this, I sent ChatGPT the error message. I recieved this output. I will refrain from including this code, as it relies on a local path to find the font, rather than the repository. You may change the code after paths to fit your local device.\n\n#Install and load the extrafont package library(extrafont) #Specify the exact font file path for Roboto Regular font_import(paths = “C:/Windows/Fonts”, prompt = FALSE) #Load the Roboto Regular font family loadfonts(device = “win”)\n\nThe installation of Roboto Regular into R was not successful, so I will use a similar font that I found in my font database called “Segoe UI”.\nThe final code for producing the plot is shown below:\n\n# Plotting the horizontal bar chart\nggplot(freq_br, aes(x = reorder(key, value), y = value, label = ifelse(rank(desc(value)) == 1, paste0(round(value), \"%\"), round(value)))) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  geom_text(hjust = -0.2, size = 3) +  # Add text labels at the end of bars\n  coord_flip() +\n  labs(title = \"The Paintings of Bob Ross\",\n       subtitle = \"Percentage containing each element\",\n       x = NULL, y = NULL) +  # Remove axis titles\n  theme_minimal() +\n  theme(axis.text.x = element_blank(),  # Remove y-axis labels\n        axis.ticks.y = element_blank(),  # Remove y-axis ticks\n        panel.grid = element_blank(),  # Remove grid lines\n        text = element_text(family = \"Segoe UI\"))  # Change font to Snow\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\n\n\n\n\nIn the final product, I changed the color back to “skyblue” as this color is more appealing. The format of the box plot is similar to the original, except, the percent frequency of each element differs. This might be because the formula for finding the frequency of each element and the conversion into percentages might have differed. However, the author did not include their methodology for finding the percentages displayed in the figure. For this reason, the figure will stay how it is.\n\n\n\nI will now produce a professional-looking table from the data previously used to create the bar graph. I start by giving ChatGPT this prompt:\n\nCreate a professional-looking from the data frame called freq_df. Let the values in the key column be labels in the left column of the table. Let the values in the column value be the right column of the table. Let the title of the table be “Percentage of Use for Each Element in Bob Ross’ Paintings”. Let the column labels be bold. Use a skyblue and white pattern for the body of the table.\n\nI originally recieved an error saying that R could not find the function row_spec, so I pasted the error message into ChatGPT. Because I was repeatedly recieving errors from R when using knitr, I decided to ask ChatGPT to produce this table using ggplot instead.\nAfter going back and forth with ChatGPT to correct some of my syntax errors, I came up with this table.\n\n# Create ggplot object\nggplot(freq_br, aes(x = 1, y = 1)) +  # Create a plot with single point\n  geom_blank() +  # Add a blank layer to create a canvas\n geom_text(aes(label = key, y = seq(0.9, 0.5, length.out = nrow(freq_br))), hjust = 0, lineheight = 1.5, size = 3) +  # Add text for elements\ngeom_text(aes(label = paste0(value, \"%\"), x = 2, y = seq(0.9, 0.5, length.out = nrow(freq_br))), hjust = 3, lineheight = 1.5, size = 3) +  # Add text for percentages\n  theme_void() +  # Remove axis and background\n  labs(title = \"Percentage of Use for Each Element in Bob Ross' Paintings\")  # Add title\n\n\n\n\n\n\n\n\nEven after a long while of bac and forth, I was unable to space the lines and format the table as I preferred. Instead, I asked ChatGPT to produce the table previously requested, but with using knitr instead of ggplot.\n\nknitr::kable(freq_br, caption = \"Percentage of Use for Each Element in Bob Ross' Paintings\")\n\n\nPercentage of Use for Each Element in Bob Ross’ Paintings\n\n\nkey\nvalue\n\n\n\n\nAt least one tree\n94.750656\n\n\nAt least two trees\n88.451444\n\n\nDeciduous tree\n59.580053\n\n\nConiferous tree\n55.643045\n\n\nClouds\n46.981627\n\n\nAt least one mountain\n41.994751\n\n\nLake\n37.532808\n\n\nGrass\n37.270341\n\n\nRiver or stream\n33.070866\n\n\nBushes\n31.496063\n\n\nSnow-covered mountain\n28.608924\n\n\nAt least two mountains\n25.984252\n\n\nCumulus cloud\n22.572178\n\n\nMan-made structure\n22.309711\n\n\nRocks\n20.209974\n\n\nSnow\n19.685039\n\n\nCabin\n18.110236\n\n\nWinter\n18.110236\n\n\nFrame\n13.910761\n\n\nPath\n12.860892\n\n\nSun\n10.498688\n\n\nWaterfall\n10.236220\n\n\nOval frame\n9.973753\n\n\nOcean\n9.448819\n\n\nWaves\n8.923884\n\n\nCirrus cloud\n7.349081\n\n\nBeach\n7.086614\n\n\nFence\n6.299213\n\n\nFog\n6.036745\n\n\nGuest\n5.774278\n\n\nHills\n4.724409\n\n\nBarn\n4.461942\n\n\nFlowers\n3.149606\n\n\nNighttime\n2.887139\n\n\nSteve Ross\n2.887139\n\n\nPalm tree\n2.362205\n\n\n\n\n\nI added prompts to ChatGPT to change the colors to alternating skyblue and white and to make the table “professional looking”.\n\nkable(freq_br, caption = \"Percentage of Use for Each Element in Bob Ross' Paintings\") %&gt;%\n  kable_styling(full_width = FALSE, \n                bootstrap_options = c(\"striped\", \"hover\"),\n                font_size = 16,\n                latex_options = \"hold_position\",\n                repeat_header_text = \"Table 1: Percentage of Use for Each Element in Bob Ross' Paintings\") %&gt;%\n  column_spec(1:2, background = c(\"skyblue\", \"white\"))\n\nWarning in ensure_len_html(background, nrows, \"background\"): The number of\nprovided values in background does not equal to the number of rows.\n\n\n\nPercentage of Use for Each Element in Bob Ross' Paintings\n\n\nkey\nvalue\n\n\n\n\nAt least one tree\n94.750656\n\n\nAt least two trees\n88.451444\n\n\nDeciduous tree\n59.580053\n\n\nConiferous tree\n55.643045\n\n\nClouds\n46.981627\n\n\nAt least one mountain\n41.994751\n\n\nLake\n37.532808\n\n\nGrass\n37.270341\n\n\nRiver or stream\n33.070866\n\n\nBushes\n31.496063\n\n\nSnow-covered mountain\n28.608924\n\n\nAt least two mountains\n25.984252\n\n\nCumulus cloud\n22.572178\n\n\nMan-made structure\n22.309711\n\n\nRocks\n20.209974\n\n\nSnow\n19.685039\n\n\nCabin\n18.110236\n\n\nWinter\n18.110236\n\n\nFrame\n13.910761\n\n\nPath\n12.860892\n\n\nSun\n10.498688\n\n\nWaterfall\n10.236220\n\n\nOval frame\n9.973753\n\n\nOcean\n9.448819\n\n\nWaves\n8.923884\n\n\nCirrus cloud\n7.349081\n\n\nBeach\n7.086614\n\n\nFence\n6.299213\n\n\nFog\n6.036745\n\n\nGuest\n5.774278\n\n\nHills\n4.724409\n\n\nBarn\n4.461942\n\n\nFlowers\n3.149606\n\n\nNighttime\n2.887139\n\n\nSteve Ross\n2.887139\n\n\nPalm tree\n2.362205\n\n\n\n\n\n\n\nAfter seeing the length of this table, I decided to consolidate it to the top 10 elements. I prompted it to shorten the table by only showing the top 10 elements. This took quite a bit of back and forth, but I finally ended with a smaller table.\n\n# Calculate total frequency\ntotal_frequency &lt;- sum(freq_br$value)\n\n# Sort the data frame by frequency in descending order\nfreq_br &lt;- freq_br[order(-freq_br$value), ]\n\n# Keep only the top N elements\ntop_N &lt;- 10\ntop_elements &lt;- freq_br[1:top_N, c(\"key\", \"value\")]\n\n# Combine less frequent elements into an \"Other\" category\nother_elements &lt;- data.frame(key = \"Other\",\n                             value = sum(freq_br$value[-(1:top_N)]))\n\n# Ensure that both data frames have consistent column names\nnames(other_elements) &lt;- names(top_elements)\n\n# Combine top elements and \"Other\" category\ncombined_data &lt;- rbind(top_elements, other_elements)\n\n# Create the table\ncombined_data %&gt;%\n  kable(caption = \"Percentage of Use for Top Elements in Bob Ross' Paintings\") %&gt;%\n  kable_styling(full_width = FALSE, \n                bootstrap_options = c(\"striped\", \"hover\"),\n                font_size = 16,\n                latex_options = \"hold_position\",\n                repeat_header_text = \"Table 1: Percentage of Use for Top Elements in Bob Ross' Paintings\") %&gt;%\n  column_spec(1:2, background = c(\"skyblue\", \"white\"))\n\nWarning in ensure_len_html(background, nrows, \"background\"): The number of\nprovided values in background does not equal to the number of rows.\n\n\n\nPercentage of Use for Top Elements in Bob Ross' Paintings\n\n\nkey\nvalue\n\n\n\n\nAt least one tree\n94.75066\n\n\nAt least two trees\n88.45144\n\n\nDeciduous tree\n59.58005\n\n\nConiferous tree\n55.64304\n\n\nClouds\n46.98163\n\n\nAt least one mountain\n41.99475\n\n\nLake\n37.53281\n\n\nGrass\n37.27034\n\n\nRiver or stream\n33.07087\n\n\nBushes\n31.49606\n\n\nOther\n304.46194\n\n\n\n\n\n\n\nLastly, I will round the digits in the values column to two decimal places.\n\n# Calculate total frequency\ntotal_frequency &lt;- sum(freq_br$value)\n\n# Sort the data frame by frequency in descending order\nfreq_br &lt;- freq_br[order(-freq_br$value), ]\n\n# Keep only the top N elements\ntop_N &lt;- 10\ntop_elements &lt;- freq_br[1:top_N, c(\"key\", \"value\")]\n\n# Round the \"Frequency\" values to two decimal places\ntop_elements$value &lt;- round(top_elements$value, 2)\n\n# Combine less frequent elements into an \"Other\" category\nother_elements &lt;- data.frame(key = \"Other\",\n                              value = sum(freq_br$value[-(1:top_N)]))\n\n# Round the \"Frequency\" value to two decimal places\nother_elements$value &lt;- round(other_elements$value, 2)\n\n# Ensure that both data frames have consistent column names\nnames(other_elements) &lt;- names(top_elements)\n\n# Combine top elements and \"Other\" category\ncombined_data &lt;- rbind(top_elements, other_elements)\n\n# Create the table\ncombined_data %&gt;%\n  kable(caption = \"Percentage of Use for Top Elements in Bob Ross' Paintings\") %&gt;%\n  kable_styling(full_width = FALSE, \n                bootstrap_options = c(\"striped\", \"hover\"),\n                font_size = 16,\n                latex_options = \"hold_position\",\n                repeat_header_text = \"Table 1: Percentage of Use for Top Elements in Bob Ross' Paintings\") %&gt;%\n  column_spec(1:2, background = c(\"skyblue\", \"white\"))\n\nWarning in ensure_len_html(background, nrows, \"background\"): The number of\nprovided values in background does not equal to the number of rows.\n\n\n\nPercentage of Use for Top Elements in Bob Ross' Paintings\n\n\nkey\nvalue\n\n\n\n\nAt least one tree\n94.75\n\n\nAt least two trees\n88.45\n\n\nDeciduous tree\n59.58\n\n\nConiferous tree\n55.64\n\n\nClouds\n46.98\n\n\nAt least one mountain\n41.99\n\n\nLake\n37.53\n\n\nGrass\n37.27\n\n\nRiver or stream\n33.07\n\n\nBushes\n31.50\n\n\nOther\n304.46"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html",
    "href": "ml-models-exercise/ml-models-exercise.html",
    "title": "Machine Learning Models Exercise",
    "section": "",
    "text": "We will start by loading the packages we need, setting the seed to 1234, and loading the cleaned version of the Mavoglurant trial data.\n\n# Load packages\nlibrary(tidymodels) # use tidymodels framework\nlibrary(ggplot2) # producing visual displays of data\nlibrary(dplyr) # manipulating and cleaning data\nlibrary(here) # making relative pathways\nlibrary(glmnet) # for LASSO regression engine\nlibrary(ranger) # making random forest model\nlibrary(doParallel) # for parallel processing\nlibrary(rsample) # for cross validation\n\n# Set seed\nrngseed &lt;- 1234 # 1234 = rngseed \nset.seed(rngseed)\n\n# Load data\ndata_location &lt;- here::here(\"ml-models-exercise\",\"cleandata.rds\")\ndata &lt;- readRDS(data_location)\nstr(data)\n\n'data.frame':   120 obs. of  7 variables:\n $ Y   : num  2691 2639 2150 1789 3126 ...\n $ DOSE: num  25 25 25 25 25 25 25 25 25 25 ...\n $ AGE : num  42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ WT  : num  94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num  1.77 1.76 1.81 1.65 1.56 ...\n\n\n\n\nThe previous analysis excluded SEX, but we want to include this variable for this portion of analysis. We also have two odd levels in the factor variable, race, which are called 7 and 88. To discover how to handle this variable we must explore to find what these levels stand for. In my previous exploratory analysis, I noticed that the races 7 and 88 were different depending on age (where 7 included those less than 40 years of age and 88 included those older than 40 years of age). For this reason I will stratify race by age. I will then stratify race by sex to determine if there are any further differences that I might be missing. Sex was shown to be associated with height and body weight in the exploratory analysis and I do not know an arbitrary cutoff for this variables, so I will not use them to stratify.\n\n# Stratify RACE by AGE\n# Define age groups of under 40 and over 40\ndata$AGEcat &lt;- ifelse(data$AGE &lt;= 40, \"&lt;=40\", \"&gt;40\")\n\n# Use by() to stratify the race variable by age and find the summary\nRaceAge_summary &lt;- by(data$RACE, data$AGEcat, summary)\n\n# Printing the summary statistics\nRaceAge_summary\n\ndata$AGEcat: &lt;=40\n 1  2  7 88 \n53 29  0  8 \n------------------------------------------------------------ \ndata$AGEcat: &gt;40\n 1  2  7 88 \n21  7  2  0 \n\ndata &lt;- subset(data, select = -AGEcat) # remove the AGEcat variable from the original data frame\n\n# Stratify RACE by SEX\nRaceSex_summary &lt;- by(data$RACE, data$SEX, summary)\nRaceSex_summary\n\ndata$SEX: 1\n 1  2  7 88 \n63 33  1  7 \n------------------------------------------------------------ \ndata$SEX: 2\n 1  2  7 88 \n11  3  1  1 \n\n\nThe summary statistics (counts of RACE for each AGE category and SEX) show that 7 and 88 are in two different age categories. This may indicate that they represent the same race, but divided by those who are &lt;=40 years old and those who are &gt;40 years old. Because of this, we will group the factor levels (7 and 88) or race, together.\n\n# Combining RACE levels 7 and 88\ndata$RACE &lt;- factor(ifelse(data$RACE %in% c(7, 88), 3, data$RACE)) # combine levels 7 and 88 of the factor variable RACE into one level called 3 using the ifelse() function\nstr(data$RACE) # check the data structure to ensure that they were combined\n\n Factor w/ 3 levels \"1\",\"2\",\"3\": 2 2 1 1 2 2 1 3 2 1 ...\n\n\n\n# Correlation Plot\npairs(data[, c(\"WT\", \"HT\", \"AGE\", \"Y\")], # use pairs() to find pairwise correlation for continuous variables\n      labels = c(\"WT\", \"HT\", \"AGE\", \"Y\"), # specify the labels for each variable\n      main = \"Correlation Plot\", # Title of the plot\n      row1attop = FALSE, # Default behavior for the direction of the diagonal\n      gap = 1, # Distance between subplots\n      cex.labels = NULL,# Size of the diagonal text (default)\n      font.labels = 1) # Font style of the diagonal text\n\n\n\n\n\n\n\n# correlation coefficients\n\nmatrix &lt;- cor(data[, c(\"WT\", \"HT\", \"AGE\", \"Y\")]) # use cor() function to make a correlation matrix for the specified continuous\nprint(matrix) # Print the correlation matrix\n\n            WT         HT         AGE           Y\nWT   1.0000000  0.5997505  0.11967399 -0.21287194\nHT   0.5997505  1.0000000 -0.35185806 -0.15832972\nAGE  0.1196740 -0.3518581  1.00000000  0.01256372\nY   -0.2128719 -0.1583297  0.01256372  1.00000000\n\n\nAs shown by the correlation matrix and plot, there is a moderate correlation between weight and height but no other continuous variables show correlation. Because of this, we want to combine these two correlated variables for weight and height into one variable for body mass index (BMI). BMI is calculated by dividing a person’s weight in kg by height in meters squared. We do not know the units for height or weight used int eh study so we will look at the data to try and figure this out.\n\n# Summary of the data\nsummary(data)\n\n       Y               DOSE            AGE        SEX     RACE  \n Min.   : 826.4   Min.   :25.00   Min.   :18.00   1:104   1:74  \n 1st Qu.:1700.5   1st Qu.:25.00   1st Qu.:26.00   2: 16   2:36  \n Median :2349.1   Median :37.50   Median :31.00           3:10  \n Mean   :2445.4   Mean   :36.46   Mean   :33.00                 \n 3rd Qu.:3050.2   3rd Qu.:50.00   3rd Qu.:40.25                 \n Max.   :5606.6   Max.   :50.00   Max.   :50.00                 \n       WT               HT       \n Min.   : 56.60   Min.   :1.520  \n 1st Qu.: 73.17   1st Qu.:1.700  \n Median : 82.10   Median :1.770  \n Mean   : 82.55   Mean   :1.759  \n 3rd Qu.: 90.10   3rd Qu.:1.813  \n Max.   :115.30   Max.   :1.930  \n\n# It looks like height is in meters and weight is in kg in this case\n\n# Calculate BMI\ndata &lt;- mutate(data, BMI = WT/(HT^2)) # use mutate() from dpylr to add a new variable to the data frame using preexisting columns\nstr(data$BMI) # check structure of the BMI variable\n\n num [1:120] 30.1 26 21.9 28.4 26.4 ..."
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#data-cleaning",
    "href": "ml-models-exercise/ml-models-exercise.html#data-cleaning",
    "title": "Machine Learning Models Exercise",
    "section": "",
    "text": "The previous analysis excluded SEX, but we want to include this variable for this portion of analysis. We also have two odd levels in the factor variable, race, which are called 7 and 88. To discover how to handle this variable we must explore to find what these levels stand for. In my previous exploratory analysis, I noticed that the races 7 and 88 were different depending on age (where 7 included those less than 40 years of age and 88 included those older than 40 years of age). For this reason I will stratify race by age. I will then stratify race by sex to determine if there are any further differences that I might be missing. Sex was shown to be associated with height and body weight in the exploratory analysis and I do not know an arbitrary cutoff for this variables, so I will not use them to stratify.\n\n# Stratify RACE by AGE\n# Define age groups of under 40 and over 40\ndata$AGEcat &lt;- ifelse(data$AGE &lt;= 40, \"&lt;=40\", \"&gt;40\")\n\n# Use by() to stratify the race variable by age and find the summary\nRaceAge_summary &lt;- by(data$RACE, data$AGEcat, summary)\n\n# Printing the summary statistics\nRaceAge_summary\n\ndata$AGEcat: &lt;=40\n 1  2  7 88 \n53 29  0  8 \n------------------------------------------------------------ \ndata$AGEcat: &gt;40\n 1  2  7 88 \n21  7  2  0 \n\ndata &lt;- subset(data, select = -AGEcat) # remove the AGEcat variable from the original data frame\n\n# Stratify RACE by SEX\nRaceSex_summary &lt;- by(data$RACE, data$SEX, summary)\nRaceSex_summary\n\ndata$SEX: 1\n 1  2  7 88 \n63 33  1  7 \n------------------------------------------------------------ \ndata$SEX: 2\n 1  2  7 88 \n11  3  1  1 \n\n\nThe summary statistics (counts of RACE for each AGE category and SEX) show that 7 and 88 are in two different age categories. This may indicate that they represent the same race, but divided by those who are &lt;=40 years old and those who are &gt;40 years old. Because of this, we will group the factor levels (7 and 88) or race, together.\n\n# Combining RACE levels 7 and 88\ndata$RACE &lt;- factor(ifelse(data$RACE %in% c(7, 88), 3, data$RACE)) # combine levels 7 and 88 of the factor variable RACE into one level called 3 using the ifelse() function\nstr(data$RACE) # check the data structure to ensure that they were combined\n\n Factor w/ 3 levels \"1\",\"2\",\"3\": 2 2 1 1 2 2 1 3 2 1 ...\n\n\n\n# Correlation Plot\npairs(data[, c(\"WT\", \"HT\", \"AGE\", \"Y\")], # use pairs() to find pairwise correlation for continuous variables\n      labels = c(\"WT\", \"HT\", \"AGE\", \"Y\"), # specify the labels for each variable\n      main = \"Correlation Plot\", # Title of the plot\n      row1attop = FALSE, # Default behavior for the direction of the diagonal\n      gap = 1, # Distance between subplots\n      cex.labels = NULL,# Size of the diagonal text (default)\n      font.labels = 1) # Font style of the diagonal text\n\n\n\n\n\n\n\n# correlation coefficients\n\nmatrix &lt;- cor(data[, c(\"WT\", \"HT\", \"AGE\", \"Y\")]) # use cor() function to make a correlation matrix for the specified continuous\nprint(matrix) # Print the correlation matrix\n\n            WT         HT         AGE           Y\nWT   1.0000000  0.5997505  0.11967399 -0.21287194\nHT   0.5997505  1.0000000 -0.35185806 -0.15832972\nAGE  0.1196740 -0.3518581  1.00000000  0.01256372\nY   -0.2128719 -0.1583297  0.01256372  1.00000000\n\n\nAs shown by the correlation matrix and plot, there is a moderate correlation between weight and height but no other continuous variables show correlation. Because of this, we want to combine these two correlated variables for weight and height into one variable for body mass index (BMI). BMI is calculated by dividing a person’s weight in kg by height in meters squared. We do not know the units for height or weight used int eh study so we will look at the data to try and figure this out.\n\n# Summary of the data\nsummary(data)\n\n       Y               DOSE            AGE        SEX     RACE  \n Min.   : 826.4   Min.   :25.00   Min.   :18.00   1:104   1:74  \n 1st Qu.:1700.5   1st Qu.:25.00   1st Qu.:26.00   2: 16   2:36  \n Median :2349.1   Median :37.50   Median :31.00           3:10  \n Mean   :2445.4   Mean   :36.46   Mean   :33.00                 \n 3rd Qu.:3050.2   3rd Qu.:50.00   3rd Qu.:40.25                 \n Max.   :5606.6   Max.   :50.00   Max.   :50.00                 \n       WT               HT       \n Min.   : 56.60   Min.   :1.520  \n 1st Qu.: 73.17   1st Qu.:1.700  \n Median : 82.10   Median :1.770  \n Mean   : 82.55   Mean   :1.759  \n 3rd Qu.: 90.10   3rd Qu.:1.813  \n Max.   :115.30   Max.   :1.930  \n\n# It looks like height is in meters and weight is in kg in this case\n\n# Calculate BMI\ndata &lt;- mutate(data, BMI = WT/(HT^2)) # use mutate() from dpylr to add a new variable to the data frame using preexisting columns\nstr(data$BMI) # check structure of the BMI variable\n\n num [1:120] 30.1 26 21.9 28.4 26.4 ..."
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#tuning-with-cross-validation",
    "href": "ml-models-exercise/ml-models-exercise.html#tuning-with-cross-validation",
    "title": "Machine Learning Models Exercise",
    "section": "Tuning with Cross-validation",
    "text": "Tuning with Cross-validation\n\n# Cross validation folds\nfolds_data &lt;- vfold_cv(data, v = 5, repeats = 5)\n# Set the number of cores to use\nnum_cores &lt;- detectCores() - 1\n# Initialize parallel backend\ndoParallel::registerDoParallel(cores = num_cores) # add parallel processing to speed up the computations\n\nset.seed(rngseed) # set seed for reproducibility\n\nlasso_cv_grid &lt;- tune_grid(\n  object = tune_lasso_wf,  # Specify object as the workflow\n  resamples = folds_data, # use data for tuning from the CV folds\n  grid = expand.grid(penalty = lasso_grid),  #  add lasso tuning penalty grid\n  control = control_grid(save_pred = TRUE)) # save the predictions\n\nlasso_cv_grid %&gt;% \n  autoplot()\n\n\n\n\n\n\n\n# Stop parallel processing\nstopImplicitCluster()\n\n# RF Tree Model\n##I looked for how to do parallel processing with ChatGPT\n# Set the number of cores to use\nnum_cores &lt;- detectCores() - 1\n\n# Initialize parallel backend\ndoParallel::registerDoParallel(cores = num_cores)\n\nset.seed(rngseed) # set seed for reproducibility\n\nrf_res &lt;- rf_tune_wf %&gt;%\n  tune_grid(\n    resamples = folds_data, # use data from the CV folds\n    grid = tree_grid)\nrf_res %&gt;%\n  autoplot()\n\n\n\n\n\n\n\n# Stop parallel processing\nstopImplicitCluster()\n\nThe RMSE from the CV-tuned LASSO model has increased relative to the RMSE from the model tuned without CV. The LASSO model tuned without CV produced very similar RMSE values to the linear model and un-tuned model because it is essentially the same thing as the linear regression model above. At a small penalty value, the RMSE of the LASSO regression is best, for both tuned models. The random forest model that was tuned with CV also had an increase in RMSE compared to the one tuned without CV. In the RF tuned with CV, we observe that the trees with different minimum node sizes follow a closer pattern in the RMSE graph than the trees from the RF model tuned without CV. The LASSO model tuned with cross validation has a better RMSE than the RF model tuned with CV, despite this being the opposite case when they were tuned using the data itself. The RMSE of both models increased with cross validation, but to different magnitudes. This is because cross-validation is more representative of a real scenario where trained data would be compared to testing data to see if the predictions are the same as the observations. The random forest model RMSE was more affected by cross validation, perhaps, because it was less suited to real life. The model was fit to its own data when it was tuned the first time, which led to over-fitting. Because the random forest model was likely over-fit, compared to the LASSO model, the random forest model is not as suitable for real life. The best performing model, in my opinion, is the LASSO model, though it is not much different than the linear regression model."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html",
    "href": "fitting-exercise/fitting-exercise.html",
    "title": "Fitting Exercise",
    "section": "",
    "text": "First, I will open the libraries I need for this project.\n\nlibrary(tidymodels) # modeling and fitting data\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n\n\n✔ broom        1.0.5     ✔ recipes      1.0.9\n✔ dials        1.2.0     ✔ rsample      1.2.0\n✔ dplyr        1.1.4     ✔ tibble       3.2.1\n✔ ggplot2      3.4.4     ✔ tidyr        1.3.0\n✔ infer        1.0.5     ✔ tune         1.1.2\n✔ modeldata    1.2.0     ✔ workflows    1.1.3\n✔ parsnip      1.1.1     ✔ workflowsets 1.0.1\n✔ purrr        1.0.2     ✔ yardstick    1.2.0\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\nlibrary(readr) # reading and importing data\n\n\nAttaching package: 'readr'\n\n\nThe following object is masked from 'package:yardstick':\n\n    spec\n\n\nThe following object is masked from 'package:scales':\n\n    col_factor\n\nlibrary(broom.mixed) # converting Bayesian models to tidy tibbles\nlibrary(dotwhisker) # visualizing regression results\nlibrary(ggplot2) # producing graphs and figures to visualize results\nlibrary(here) # creating relative pathways to files\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(dplyr) # manipulating and cleaning data frame\nlibrary(psych) # create summary tables\n\n\nAttaching package: 'psych'\n\n\nThe following objects are masked from 'package:ggplot2':\n\n    %+%, alpha\n\n\nThe following objects are masked from 'package:scales':\n\n    alpha, rescale\n\nlibrary(tidyverse) # creating tidy tables\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ psych::%+%()        masks ggplot2::%+%()\n✖ psych::alpha()      masks ggplot2::alpha(), scales::alpha()\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(corrplot) # creating correlation plots\n\ncorrplot 0.92 loaded\n\n\nNext, I will read the csv file to import the Mavoglurant data into R.\n\ntrial_data &lt;- read_csv(here(\"fitting-exercise\", \"Mavoglurant_A2121_nmpk.csv\"), show_col_types = FALSE) # read csv in the relative path to the fitting exercise folder, without showing column types\nstr(trial_data) # examine structure of data in the trial_data frame\n\nspc_tbl_ [2,678 × 17] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID  : num [1:2678] 793 793 793 793 793 793 793 793 793 793 ...\n $ CMT : num [1:2678] 1 2 2 2 2 2 2 2 2 2 ...\n $ EVID: num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ EVI2: num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ MDV : num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ DV  : num [1:2678] 0 491 605 556 310 237 147 101 72.4 52.6 ...\n $ LNDV: num [1:2678] 0 6.2 6.41 6.32 5.74 ...\n $ AMT : num [1:2678] 25 0 0 0 0 0 0 0 0 0 ...\n $ TIME: num [1:2678] 0 0.2 0.25 0.367 0.533 0.7 1.2 2.2 3.2 4.2 ...\n $ DOSE: num [1:2678] 25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : num [1:2678] 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num [1:2678] 75 0 0 0 0 0 0 0 0 0 ...\n $ AGE : num [1:2678] 42 42 42 42 42 42 42 42 42 42 ...\n $ SEX : num [1:2678] 1 1 1 1 1 1 1 1 1 1 ...\n $ RACE: num [1:2678] 2 2 2 2 2 2 2 2 2 2 ...\n $ WT  : num [1:2678] 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 ...\n $ HT  : num [1:2678] 1.77 1.77 1.77 1.77 1.77 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_double(),\n  ..   CMT = col_double(),\n  ..   EVID = col_double(),\n  ..   EVI2 = col_double(),\n  ..   MDV = col_double(),\n  ..   DV = col_double(),\n  ..   LNDV = col_double(),\n  ..   AMT = col_double(),\n  ..   TIME = col_double(),\n  ..   DOSE = col_double(),\n  ..   OCC = col_double(),\n  ..   RATE = col_double(),\n  ..   AGE = col_double(),\n  ..   SEX = col_double(),\n  ..   RACE = col_double(),\n  ..   WT = col_double(),\n  ..   HT = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nI will go ahead and convert the columns for subject ID, Compartment number, Event ID, occasion, dose amount keyword, and sex to factor variables.\n\ntrial_data &lt;- trial_data %&gt;%\n  mutate(across(c(\"ID\", \"CMT\", \"EVID\", \"AMT\", \"OCC\", \"SEX\", \"RACE\"), as.factor))\nstr(trial_data)\n\ntibble [2,678 × 17] (S3: tbl_df/tbl/data.frame)\n $ ID  : Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ CMT : Factor w/ 2 levels \"1\",\"2\": 1 2 2 2 2 2 2 2 2 2 ...\n $ EVID: Factor w/ 2 levels \"0\",\"1\": 2 1 1 1 1 1 1 1 1 1 ...\n $ EVI2: num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ MDV : num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ DV  : num [1:2678] 0 491 605 556 310 237 147 101 72.4 52.6 ...\n $ LNDV: num [1:2678] 0 6.2 6.41 6.32 5.74 ...\n $ AMT : Factor w/ 4 levels \"0\",\"25\",\"37.5\",..: 2 1 1 1 1 1 1 1 1 1 ...\n $ TIME: num [1:2678] 0 0.2 0.25 0.367 0.533 0.7 1.2 2.2 3.2 4.2 ...\n $ DOSE: num [1:2678] 25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num [1:2678] 75 0 0 0 0 0 0 0 0 0 ...\n $ AGE : num [1:2678] 42 42 42 42 42 42 42 42 42 42 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 2 2 2 2 2 2 2 2 ...\n $ WT  : num [1:2678] 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 ...\n $ HT  : num [1:2678] 1.77 1.77 1.77 1.77 1.77 ...\n\n\nI want to create a line plot showing a dosage over time for each individual in the data set, that is stratified by total dose amount.\n\nggplot(trial_data, aes(x = TIME, y = DV, group = ID, color = DOSE)) + \n  geom_line() +\n  labs(title = \"Mavoglurant dose over time by individual and stratified by dose\", y= \"Dosage Variable\", x = \"Time in hours\")\n\n\n\n\n\n\n\n\nBecause the value of 2 for OCC (or occasion) reflects 2 dosages, and we are only examining cases that are given 1 dose, we will drop all levels= ‘2’ of the factor variable, OCC.\n\ntrial_data &lt;- droplevels(trial_data[!trial_data$OCC == '2',]) # drop rows where the level value is '2'\nstr(trial_data) # examine dataframe structure\n\ntibble [1,665 × 17] (S3: tbl_df/tbl/data.frame)\n $ ID  : Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ CMT : Factor w/ 2 levels \"1\",\"2\": 1 2 2 2 2 2 2 2 2 2 ...\n $ EVID: Factor w/ 2 levels \"0\",\"1\": 2 1 1 1 1 1 1 1 1 1 ...\n $ EVI2: num [1:1665] 1 0 0 0 0 0 0 0 0 0 ...\n $ MDV : num [1:1665] 1 0 0 0 0 0 0 0 0 0 ...\n $ DV  : num [1:1665] 0 491 605 556 310 237 147 101 72.4 52.6 ...\n $ LNDV: num [1:1665] 0 6.2 6.41 6.32 5.74 ...\n $ AMT : Factor w/ 4 levels \"0\",\"25\",\"37.5\",..: 2 1 1 1 1 1 1 1 1 1 ...\n $ TIME: num [1:1665] 0 0.2 0.25 0.367 0.533 0.7 1.2 2.2 3.2 4.2 ...\n $ DOSE: num [1:1665] 25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num [1:1665] 75 0 0 0 0 0 0 0 0 0 ...\n $ AGE : num [1:1665] 42 42 42 42 42 42 42 42 42 42 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 2 2 2 2 2 2 2 2 ...\n $ WT  : num [1:1665] 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 ...\n $ HT  : num [1:1665] 1.77 1.77 1.77 1.77 1.77 ...\n\nlevels(trial_data$OCC) # examine levels of the OCC variable\n\n[1] \"1\"\n\n\nAll factor levels of OCC except for ‘1’, were dropped. Next, we will drop all rows with the numeric value for TIME = ‘0’\n\ntrial_data2 &lt;-trial_data[!(trial_data$TIME %in% 0),] # exclude all rows where time has a value fo zero\nsummary(trial_data2$TIME) # check the minimum avlue for TIME\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.200   0.583   3.200   6.930   8.250  48.217 \n\n\nNow we will use dplyr to find the sum of dosage values (DV) for each individual (ID).\n\nsum_DV &lt;- trial_data2 %&gt;% # create data frame for the sum_DV\n  group_by(ID) %&gt;% # group by individual \n  summarise( Y = sum(DV)) # make a summary column of DV using dpylr\nstr(sum_DV) # check structure of sumDV\n\ntibble [120 × 2] (S3: tbl_df/tbl/data.frame)\n $ ID: Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ Y : num [1:120] 2691 2639 2150 1789 3126 ...\n\n\nY, as the sum of DV, was found in a new data frame called sum_DV. We will get a produce for values where TIME=0 and join the data frames.\n\ntrial_data3 &lt;- trial_data %&gt;%\n  filter(TIME == 0) # filter for values of TIME = '0' using dpylr\nstr(trial_data3) # check structure of new df\n\ntibble [120 × 17] (S3: tbl_df/tbl/data.frame)\n $ ID  : Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ CMT : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ EVID: Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 2 2 2 2 ...\n $ EVI2: num [1:120] 1 1 1 1 1 1 1 1 1 1 ...\n $ MDV : num [1:120] 1 1 1 1 1 1 1 1 1 1 ...\n $ DV  : num [1:120] 0 0 0 0 0 0 0 0 0 0 ...\n $ LNDV: num [1:120] 0 0 0 0 0 0 0 0 0 0 ...\n $ AMT : Factor w/ 4 levels \"0\",\"25\",\"37.5\",..: 2 2 2 2 2 2 2 2 2 2 ...\n $ TIME: num [1:120] 0 0 0 0 0 0 0 0 0 0 ...\n $ DOSE: num [1:120] 25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num [1:120] 75 150 150 150 150 150 150 150 150 150 ...\n $ AGE : num [1:120] 42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ WT  : num [1:120] 94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num [1:120] 1.77 1.76 1.81 1.65 1.56 ...\n\ntrial_data4 &lt;- merge(x = trial_data3, y = sum_DV, by = \"ID\", all = TRUE) # outer join the data frame to preserve all rows and join them by the ID variable\nstr(trial_data4) # check structure of joined df\n\n'data.frame':   120 obs. of  18 variables:\n $ ID  : Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ CMT : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ EVID: Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 2 2 2 2 ...\n $ EVI2: num  1 1 1 1 1 1 1 1 1 1 ...\n $ MDV : num  1 1 1 1 1 1 1 1 1 1 ...\n $ DV  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ LNDV: num  0 0 0 0 0 0 0 0 0 0 ...\n $ AMT : Factor w/ 4 levels \"0\",\"25\",\"37.5\",..: 2 2 2 2 2 2 2 2 2 2 ...\n $ TIME: num  0 0 0 0 0 0 0 0 0 0 ...\n $ DOSE: num  25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num  75 150 150 150 150 150 150 150 150 150 ...\n $ AGE : num  42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ WT  : num  94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num  1.77 1.76 1.81 1.65 1.56 ...\n $ Y   : num  2691 2639 2150 1789 3126 ...\n\n\nBecause I have already converted the variables, SEX and RACE, to factors, I will not repeat this step. I will delete the unnecessary columns of my final data frame to only include the variables: Y, DOSE, AGE, SEX, RACE, WT, and HT.\n\ntrial_data4 &lt;- trial_data4 %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\") # select only the aforementioned variables\nstr(trial_data4) # check data structure\n\n'data.frame':   120 obs. of  7 variables:\n $ Y   : num  2691 2639 2150 1789 3126 ...\n $ DOSE: num  25 25 25 25 25 25 25 25 25 25 ...\n $ AGE : num  42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ WT  : num  94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num  1.77 1.76 1.81 1.65 1.56 ...\n\nsummary(trial_data4)\n\n       Y               DOSE            AGE        SEX     RACE   \n Min.   : 826.4   Min.   :25.00   Min.   :18.00   1:104   1 :74  \n 1st Qu.:1700.5   1st Qu.:25.00   1st Qu.:26.00   2: 16   2 :36  \n Median :2349.1   Median :37.50   Median :31.00           7 : 2  \n Mean   :2445.4   Mean   :36.46   Mean   :33.00           88: 8  \n 3rd Qu.:3050.2   3rd Qu.:50.00   3rd Qu.:40.25                  \n Max.   :5606.6   Max.   :50.00   Max.   :50.00                  \n       WT               HT       \n Min.   : 56.60   Min.   :1.520  \n 1st Qu.: 73.17   1st Qu.:1.700  \n Median : 82.10   Median :1.770  \n Mean   : 82.55   Mean   :1.759  \n 3rd Qu.: 90.10   3rd Qu.:1.813  \n Max.   :115.30   Max.   :1.930  \n\n\nI will now check for any missing values.\n\nwhich(is.na(trial_data4)) # find location of missing values\n\ninteger(0)\n\nsum(is.na(trial_data4)) # count total missing values \n\n[1] 0\n\npath &lt;- here(\"./fitting-exercise/cleandata.rds\") # create path using here package\nsaveRDS(trial_data4, file = path) # save as an rds using specified here path\n\nNo missing variables will found, so I will not continue to clean the data and move onto exploratory data analysis. I save the clean data as an rds called cleandata.rds. ## Exploratory Data Analysis ### Summary Table I will create a summary table of the data frame in R by using the describe() function from the “psych” package.\n\ntable1 &lt;- describe(trial_data4[ , c(\"Y\", \"DOSE\", \"AGE\",\"WT\", \"HT\")],fast=TRUE) # summary stats of cleaned data for the numeric columns\nprint(table1)\n\n     vars   n    mean     sd    min     max   range    se\nY       1 120 2445.41 961.64 826.43 5606.58 4780.15 87.78\nDOSE    2 120   36.46  11.86  25.00   50.00   25.00  1.08\nAGE     3 120   33.00   8.98  18.00   50.00   32.00  0.82\nWT      4 120   82.55  12.52  56.60  115.30   58.70  1.14\nHT      5 120    1.76   0.09   1.52    1.93    0.41  0.01\n\n\nIn this summary table, we see the numeric variables. They all have a relatively small SE and reasonable min and max values. The range sumDV (Y) is large, but this is likely because this is the sum of the concentration administered to each individual. Now I will bring in the factor variables. I want to stratify the Y variable and dose by AGE, RACE, AGE, WT and HT. I will be using the tidyverse and gtsummary (which I found on stackoverflow) packages to produce this table.\n\ntable2 &lt;- trial_data4 %&gt;%\n  group_by(SEX, RACE) %&gt;%\n  summarise(\n    mean_Y = mean(Y),\n    mean_DOSE = mean(DOSE),\n    mean_AGE = mean(AGE),\n    sd_Y = sd(Y),\n    sd_DOSE = sd(DOSE),\n    sd_AGE = sd(AGE),\n  )\n\n`summarise()` has grouped output by 'SEX'. You can override using the `.groups`\nargument.\n\nprint(table2)\n\n# A tibble: 8 × 8\n# Groups:   SEX [2]\n  SEX   RACE  mean_Y mean_DOSE mean_AGE  sd_Y sd_DOSE sd_AGE\n  &lt;fct&gt; &lt;fct&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 1     1      2468.      38.1     32.9  995.    11.8   9.14\n2 1     2      2497.      35.6     31.0  910.    12.2   7.91\n3 1     7      1491.      25       41     NA     NA    NA   \n4 1     88     2612.      35.7     24.6  974.    13.4   3.64\n5 2     1      2239.      34.1     40.7 1099.    11.3   6.08\n6 2     2      2087.      25       39   1010.     0    10.1 \n7 2     7      2790.      50       49     NA     NA    NA   \n8 2     88     2093.      25       39     NA     NA    NA   \n\n\nThe means of Y and dosage seam to be similar, and within the range specified above with a couple exceptions. SEX(1) and RACE(7) has a lower mean Y. There is also a high DOSE value for SEX(2) RACE(7). This value of 50 is the max, so either all of the values here must be 50. The mean age for race and sex also varies quite a bit. It is also strange the sd for dose for SEX(2) RACE(2) is 0. ### Data Distribution #### Scatter Plots To examine these strange summary stats in the table in more detail, we will visualize the data distribution using ggplot2. First, I will produce some scatterplots to see if there are any associations or if the data is randomly distributed\n\n# Y versus AGE scatter plot by SEX\nplot1 &lt;- ggplot(trial_data4, aes(x = AGE, y = Y, color = SEX)) +\n  geom_point() +\n  labs(x = \"AGE\", y = \"Y\", title = \"Scatter Plot of Y versus Age by Sex\") +\n  theme_minimal()\nprint(plot1)\n\n\n\n\n\n\n\n# Y versus AGE scatter plot by RACE\nplot2 &lt;- ggplot(trial_data4, aes(x = AGE, y = Y, color = RACE)) +\n  geom_point() +\n  labs(x = \"AGE\", y = \"Y\", title = \"Scatter Plot of Y versus Age by Race\") +\n  theme_minimal()\nprint(plot2)\n\n\n\n\n\n\n\n# WT versus HT scatter plot by Sex\nplot3 &lt;- ggplot(trial_data4, aes(x = HT, y = WT, color = SEX)) +\n  geom_point() +\n  labs(x = \"Height\", y = \"Weight\", title = \"Scatter Plot of Weight versus Height by Sex\") +\n  theme_minimal()\nprint(plot3)\n\n\n\n\n\n\n\n# WT versus HT scatter plot by Race\nplot4 &lt;- ggplot(trial_data4, aes(x = HT, y = WT, color = RACE)) +\n  geom_point() +\n  labs(x = \"Height\", y = \"Weight\", title = \"Scatter Plot of Weight versus Height by Race\") +\n  theme_minimal()\nprint(plot4)\n\n\n\n\n\n\n\n\nThe distribution of age seems and Y seem to be fairly random, with the exception of an outlier in the Y variable that is extremely high. I will leave this outlier as there is no indication of whether this holds importance (we don’t know the definition of many of these variables). The distribution of Sex for Y and Age values seems to be a higher age for sex 2, but random for the Y variable. In general, Race seems fairly random for Age and Y, except Race 7 seems to also predominantly be higher ages. Weight and height show a slight trend, as they normally do, without any extreme outliers. The sex distribution of height and weight also makes sense as females tend to be shorter and weight less than males. For this reason, we might assume that sex 2 is female, but we should not make assumptions. Races 1, 2, and 7 seem to be randomly distributed for weight and height. However, race 88 seems to be on the lower end for both height and weight, which may indicate some sex correlation with race. #### Box Plots Now I will use box plots to examine the distribution of Dose and Y stratified by the two factor variables, Race and Sex.\n\n# Distribution of Y stratified by SEX and RACE\nplot6 &lt;- trial_data4 %&gt;% \n  ggplot(aes(x=RACE, y=Y, color = SEX)) +  \n  geom_boxplot() +\n  labs(x = \"RACE\", y = \"Drug concentration\", title = \"Race and drug concentraiton distribution, stratified by sex\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))  # Rotate x-axis text by 90 degrees\nplot(plot6)\n\n\n\n\n\n\n\n# Distribution of DOSE stratified by SEX and RACE\nplot7 &lt;- trial_data4 %&gt;% \n  ggplot(aes(x=RACE, y=DOSE, color = SEX)) +  \n  geom_boxplot() +\n  labs(x = \"RACE\", y = \"Drug concentration\", title = \"Race and Dose distribution, stratified by sex\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))  # Rotate x-axis text by 90 degrees\nplot(plot7)\n\n\n\n\n\n\n\n\nThere are two outliers for Y, in race 1. Each outlier is of a different sex, so sex might not impact the outliers.There are only 2 values for race 7, making their distribution look wonky. In general, sex 1 has a higher Y and dose than sex 2. No outliers is dose were seen as there are only 3 options for dose. Again, because there are two values in race 7, the distribution is wonky. I will choose to keep Race 7, because I do not know if this represents an important minority group, despite there only being 2 values. ### Correlation Plots Now I will create a correlation plot of the numeric variables. To do this, I asked ChatGPT to provide me with the functions used to make correlation plots for numeric variables.\n\nnumeric_data &lt;- trial_data4[, sapply(trial_data4, is.numeric)]\ncorrelation_matrix &lt;- cor(numeric_data) # Calculating correlation matrix\ncorrplot(correlation_matrix, method = \"circle\", type = \"upper\", \n         tl.col = \"black\", tl.srt = 45) # Creating correlation plot\n\n\n\n\n\n\n\n\nFrom the correlation plot, it seems that weight and height, and Y and Dose are most highly correlated. Age and height are moderately negatively correlated, as well as weight and Y are slightly negatively correlated. ## Model Fitting First, I will fit a linear model to the outcome, Y, using the predictor of DOSE.\n\nset.seed(333)\ndata_split &lt;- trial_data4 %&gt;% \n  initial_split(prop = 3/4) #split the data so that 3/4 is in the training set and 1/4 in the reference set\ntrain_data &lt;- training(data_split) # make the training data object\ntest_data  &lt;- testing(data_split) # make testing data object\n\ntrial_linear_fit_1 &lt;- \n  recipe(Y ~ DOSE, data = train_data) \n\nlm_mod &lt;- linear_reg() %&gt;% # make object called lm_mod for linear_regression function\n  set_engine(\"lm\") %&gt;% # set linear regression engine to lm\n  set_mode(\"regression\") # set to regression mode\n\ntrials_workflow1 &lt;- workflow() %&gt;% #create a workflow\n    add_model(lm_mod) %&gt;% #apply the linear regression model\n  add_recipe(trial_linear_fit_1) #then, apply the recipe\n\nlm_fit &lt;- \n  lm_mod %&gt;% \n  fit(Y ~ DOSE, data = trial_data4) # fit Y to dose \ntidy(lm_fit) # produce tibble for linear regression fit\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    323.     199.        1.62 1.07e- 1\n2 DOSE            58.2      5.19     11.2  2.69e-20\n\n\nThe intercept has a relatively large standard error, while the DOSE regression estimate has a more reasonable SE. This linear regression reflects a positive trend between dose and Y with a slope of 58.2. I will now use this model to predict the trial data. This will allow me to calculate the predictive power using the RMSE and R-squared metrics.\n\ntrial_fit1 &lt;- \n  trials_workflow1 %&gt;% \n  fit(data = train_data) # shows model to fit the data used from training from the aforementioned workflow\n   predict(trial_fit1, test_data) #predict the outcome Y\n\n# A tibble: 30 × 1\n   .pred\n   &lt;dbl&gt;\n 1 1813.\n 2 1813.\n 3 2560.\n 4 2560.\n 5 2560.\n 6 2560.\n 7 2560.\n 8 3307.\n 9 3307.\n10 3307.\n# ℹ 20 more rows\n\ntrial_aug &lt;- \n  augment(trial_fit1, test_data)\ntrial_aug %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\")\n\n# A tibble: 30 × 7\n       Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1789.  25      46 2     1      77.4  1.65\n 2 2549.  25      46 1     1      83    1.78\n 3 2353.  37.5    43 2     1      64.4  1.56\n 4 2009.  37.5    19 1     2      86.1  1.91\n 5 2934.  37.5    46 1     1      71.2  1.67\n 6 2155.  37.5    30 1     1      85.4  1.86\n 7 2424.  37.5    25 1     1      73.3  1.69\n 8 2667.  50      45 2     1      80.7  1.66\n 9 3004.  50      28 1     1      83.2  1.74\n10 2746.  50      40 1     2      74.8  1.65\n# ℹ 20 more rows\n\nnames(trial_aug) # check the name for the predicted column\n\n[1] \"Y\"     \"DOSE\"  \"AGE\"   \"SEX\"   \"RACE\"  \"WT\"    \"HT\"    \".pred\"\n\neval_metrics &lt;- metric_set(rmse, rsq) # use yardstick to select multiple regression metrics (rmse and r squared)\n\neval_metrics(data = trial_aug,\n             truth = Y,\n             estimate = .pred) %&gt;% \n  select(-2) # Evaluate RMSE, R2 based on the results\n\n# A tibble: 2 × 2\n  .metric .estimate\n  &lt;chr&gt;       &lt;dbl&gt;\n1 rmse      630.   \n2 rsq         0.533\n\n\nThe RMSE is very large and rsq is close to 0.5 which shows that the predictive model is not a very good fit for the data. Next, I will fit a linear model to the outcome, Y, using all of the predictors.\n\ntrial_linear_fit_2 &lt;- \n  recipe(Y ~ ., data = train_data) \n\nlm_mod2 &lt;- linear_reg() %&gt;% # make object called lm_mod for linear_regression function\n  set_engine(\"lm\") %&gt;% # set linear regression engine to lm\n  set_mode(\"regression\") # set to regression mode\n\ntrials_workflow2 &lt;- workflow() %&gt;% #create a workflow\n    add_model(lm_mod2) %&gt;% #apply the linear regression model\n  add_recipe(trial_linear_fit_2) #then, apply the recipe\n\nlm_fit2 &lt;- \n  lm_mod2 %&gt;% \n  fit(Y ~ ., data = trial_data4) # fit Y to dose \ntidy(lm_fit2) # produce tibble for linear regression fit\n\n# A tibble: 9 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  3387.     1835.       1.85  6.76e- 2\n2 DOSE           59.9       4.88    12.3   2.05e-22\n3 AGE             3.16      7.82     0.403 6.88e- 1\n4 SEX2         -358.      217.      -1.65  1.02e- 1\n5 RACE2         155.      129.       1.21  2.31e- 1\n6 RACE7        -405.      448.      -0.904 3.68e- 1\n7 RACE88        -53.5     245.      -0.219 8.27e- 1\n8 WT            -23.0       6.40    -3.60  4.71e- 4\n9 HT           -748.     1104.      -0.678 4.99e- 1\n\n\nThe standard error for the intercept, SEX2, RACE2, Race7, and HT are extremely large. This may be in part due to the large standard error of the original Y (outcome) variable. Dose, Age and Race2 have a positive trend with Y while the variables Sex2, Race7, Race88, WT, and HT have a negative trend with Y.\n\ntrial_fit2 &lt;- \n  trials_workflow2 %&gt;% \n  fit(data = train_data) # shows model to fit the data sued from training from the aforementioned workflow\n   predict(trial_fit2, test_data) #predict the outcome Y\n\n# A tibble: 30 × 1\n   .pred\n   &lt;dbl&gt;\n 1 1646.\n 2 1857.\n 3 2838.\n 4 2428.\n 5 3070.\n 6 2377.\n 7 2859.\n 8 3139.\n 9 3381.\n10 3984.\n# ℹ 20 more rows\n\ntrial_aug &lt;- \n  augment(trial_fit2, test_data)\ntrial_aug %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\")\n\n# A tibble: 30 × 7\n       Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1789.  25      46 2     1      77.4  1.65\n 2 2549.  25      46 1     1      83    1.78\n 3 2353.  37.5    43 2     1      64.4  1.56\n 4 2009.  37.5    19 1     2      86.1  1.91\n 5 2934.  37.5    46 1     1      71.2  1.67\n 6 2155.  37.5    30 1     1      85.4  1.86\n 7 2424.  37.5    25 1     1      73.3  1.69\n 8 2667.  50      45 2     1      80.7  1.66\n 9 3004.  50      28 1     1      83.2  1.74\n10 2746.  50      40 1     2      74.8  1.65\n# ℹ 20 more rows\n\neval_metrics &lt;- metric_set(rmse, rsq) # use yardstick to select multiple regression metrics (rmse and r squared)\n\neval_metrics(data = trial_aug,\n             truth = Y,\n             estimate = .pred) %&gt;% \n  select(-2) # Evaluate RMSE, R2 based on the results\n\n# A tibble: 2 × 2\n  .metric .estimate\n  &lt;chr&gt;       &lt;dbl&gt;\n1 rmse      629.   \n2 rsq         0.613\n\n\nThe R squared value for the model including all of the predictors is slightly better than the previous model (at around 0.6), but still NOT good. The rmse has not changed much, reflecting a large impact of outliers on the standard error of the predictions in the linear model.\nNow we will make a model with SEX to practice fitting with a categorical outcome variable. We will fit a logistic model to the SEX outcome using the predictor, DOSE.\n\ntrial_logreg_rec &lt;- \n  recipe(SEX ~ DOSE, data = train_data) %&gt;% # create recipe for logistic regression model using SEX as outcome\n  prep() # Prepare the recipe\n\nlr_mod &lt;- logistic_reg() %&gt;% # make object called lr_mod for logistic regression function\n  set_engine(\"glm\") # set logistic regression engine to glm\n\nlr_trials_workflow &lt;- workflow() %&gt;% # create a workflow\n  add_model(lr_mod) %&gt;% # apply the logistic regression model\n  add_recipe(trial_logreg_rec) # then, apply the recipe\n\nlr_fit &lt;- \n  lr_mod %&gt;% \n  fit(SEX ~ DOSE, data = trial_data4) # fit Y to dose \ntidy(lr_fit) # produce tibble for log regression fit\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  -0.765     0.854     -0.896   0.370\n2 DOSE         -0.0318    0.0243    -1.31    0.192\n\n\nThere is a relatively high standard error for both the dose and intercept estimates. Both estimates are negative, meaning there is a negative trend between dose and sex.\nWe will now compute accuracy and ROC-AUC for this model.\n\nlr_trial_fit &lt;- \n  lr_trials_workflow %&gt;% \n  fit(data = train_data)\n\npredict(lr_trial_fit, new_data = test_data)\n\n# A tibble: 30 × 1\n   .pred_class\n   &lt;fct&gt;      \n 1 1          \n 2 1          \n 3 1          \n 4 1          \n 5 1          \n 6 1          \n 7 1          \n 8 1          \n 9 1          \n10 1          \n# ℹ 20 more rows\n\nlr_trial_aug &lt;- \n  augment(lr_trial_fit, test_data)\n\nlr_trial_aug %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\")\n\n# A tibble: 30 × 7\n       Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1789.  25      46 2     1      77.4  1.65\n 2 2549.  25      46 1     1      83    1.78\n 3 2353.  37.5    43 2     1      64.4  1.56\n 4 2009.  37.5    19 1     2      86.1  1.91\n 5 2934.  37.5    46 1     1      71.2  1.67\n 6 2155.  37.5    30 1     1      85.4  1.86\n 7 2424.  37.5    25 1     1      73.3  1.69\n 8 2667.  50      45 2     1      80.7  1.66\n 9 3004.  50      28 1     1      83.2  1.74\n10 2746.  50      40 1     2      74.8  1.65\n# ℹ 20 more rows\n\nnames(lr_trial_aug)\n\n [1] \"Y\"           \"DOSE\"        \"AGE\"         \"SEX\"         \"RACE\"       \n [6] \"WT\"          \"HT\"          \".pred_class\" \".pred_1\"     \".pred_2\"    \n\nROC1 &lt;- lr_trial_aug %&gt;% \n  roc_auc(truth = SEX, .pred_1)\nprint(ROC1)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.621\n\nROC2 &lt;- lr_trial_aug %&gt;% \n  roc_auc(truth = SEX, .pred_2)\nprint(ROC2)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.379\n\n\nThe AUC metric for the first predictor is 0.62 and for the second is 0.38. They are both the same magnitude away from 0.5. This means that both predictions are equally as good, but neither prediction is great because it they are not very close to 1 or 0. This means that this model doesn’t have great predictive power either.\nNext, we will fit a logistic model to SEX using all of the other predictors.\n\ntrial_logreg_rec2 &lt;- \n  recipe(SEX ~ ., data = train_data) %&gt;% # create recipe for logistic regression model using SEX as outcome\n  prep() # Prepare the recipe\n\nlr_mod2 &lt;- logistic_reg() %&gt;% # make object called lr_mod for logistic regression function\n  set_engine(\"glm\") # set logistic regression engine to glm\n\nlr_trials_workflow2 &lt;- workflow() %&gt;% # create a workflow\n  add_model(lr_mod2) %&gt;% # apply the logistic regression model\n  add_recipe(trial_logreg_rec2) # then, apply the recipe\n\nlr_fit2 &lt;- \n  lr_mod2 %&gt;% \n  fit(SEX ~ ., data = trial_data4) # fit Y to dose \ntidy(lr_fit2) # produce tibble for log regression fit\n\n# A tibble: 9 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  60.3     18.0         3.34   0.000824\n2 Y            -0.00104  0.000963   -1.08   0.280   \n3 DOSE         -0.0308   0.0776     -0.396  0.692   \n4 AGE           0.0834   0.0607      1.37   0.170   \n5 RACE2        -1.93     1.37       -1.40   0.161   \n6 RACE7         0.118    3.85        0.0306 0.976   \n7 RACE88       -1.50     2.19       -0.683  0.494   \n8 WT           -0.0628   0.0794     -0.791  0.429   \n9 HT          -33.2     11.1        -3.00   0.00274 \n\n\nThe intercept now has a much higher estimate, of 60 and a smaller SE than the previous logistic regression model. Almost all of the variables have a negative trends with the Sex variables, except for Race7. In addition, all of the estimates for the predictor variables versus Sex (outcome) have a very high SE, meaning that they have a high variability.\nWe will also compute accuracy and ROC-AUC for this model.\n\nlr_trial_fit2 &lt;- \n  lr_trials_workflow2 %&gt;% \n  fit(data = train_data)\n\nWarning: glm.fit: algorithm did not converge\n\n\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\npredict(lr_trial_fit2, new_data = test_data)\n\n# A tibble: 30 × 1\n   .pred_class\n   &lt;fct&gt;      \n 1 2          \n 2 1          \n 3 2          \n 4 1          \n 5 1          \n 6 1          \n 7 1          \n 8 2          \n 9 1          \n10 1          \n# ℹ 20 more rows\n\nlr_trial_aug2 &lt;- \n  augment(lr_trial_fit2, test_data)\n\nlr_trial_aug2 %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\")\n\n# A tibble: 30 × 7\n       Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1789.  25      46 2     1      77.4  1.65\n 2 2549.  25      46 1     1      83    1.78\n 3 2353.  37.5    43 2     1      64.4  1.56\n 4 2009.  37.5    19 1     2      86.1  1.91\n 5 2934.  37.5    46 1     1      71.2  1.67\n 6 2155.  37.5    30 1     1      85.4  1.86\n 7 2424.  37.5    25 1     1      73.3  1.69\n 8 2667.  50      45 2     1      80.7  1.66\n 9 3004.  50      28 1     1      83.2  1.74\n10 2746.  50      40 1     2      74.8  1.65\n# ℹ 20 more rows\n\nnames(lr_trial_aug2)\n\n [1] \"Y\"           \"DOSE\"        \"AGE\"         \"SEX\"         \"RACE\"       \n [6] \"WT\"          \"HT\"          \".pred_class\" \".pred_1\"     \".pred_2\"    \n\nROC1_2 &lt;- lr_trial_aug2 %&gt;% \n  roc_auc(truth = SEX, .pred_1)\nprint(ROC1)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.621\n\nROC2_2 &lt;- lr_trial_aug %&gt;% \n  roc_auc(truth = SEX, .pred_2)\nprint(ROC2)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.379\n\n\nWith a AUC of 0.62 and 0.38, both predictions are equally good, but also both not the greatest. AUC values closer to 0.5 means the model is more near a random model versus an AUC close to 0 or 1, which might show good predictive power."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#data-cleaning",
    "href": "fitting-exercise/fitting-exercise.html#data-cleaning",
    "title": "Fitting Exercise",
    "section": "",
    "text": "First, I will open the libraries I need for this project.\n\nlibrary(tidymodels) # modeling and fitting data\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n\n\n✔ broom        1.0.5     ✔ recipes      1.0.9\n✔ dials        1.2.0     ✔ rsample      1.2.0\n✔ dplyr        1.1.4     ✔ tibble       3.2.1\n✔ ggplot2      3.4.4     ✔ tidyr        1.3.0\n✔ infer        1.0.5     ✔ tune         1.1.2\n✔ modeldata    1.2.0     ✔ workflows    1.1.3\n✔ parsnip      1.1.1     ✔ workflowsets 1.0.1\n✔ purrr        1.0.2     ✔ yardstick    1.2.0\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\nlibrary(readr) # reading and importing data\n\n\nAttaching package: 'readr'\n\n\nThe following object is masked from 'package:yardstick':\n\n    spec\n\n\nThe following object is masked from 'package:scales':\n\n    col_factor\n\nlibrary(broom.mixed) # converting Bayesian models to tidy tibbles\nlibrary(dotwhisker) # visualizing regression results\nlibrary(ggplot2) # producing graphs and figures to visualize results\nlibrary(here) # creating relative pathways to files\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(dplyr) # manipulating and cleaning data frame\nlibrary(psych) # create summary tables\n\n\nAttaching package: 'psych'\n\n\nThe following objects are masked from 'package:ggplot2':\n\n    %+%, alpha\n\n\nThe following objects are masked from 'package:scales':\n\n    alpha, rescale\n\nlibrary(tidyverse) # creating tidy tables\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ psych::%+%()        masks ggplot2::%+%()\n✖ psych::alpha()      masks ggplot2::alpha(), scales::alpha()\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(corrplot) # creating correlation plots\n\ncorrplot 0.92 loaded\n\n\nNext, I will read the csv file to import the Mavoglurant data into R.\n\ntrial_data &lt;- read_csv(here(\"fitting-exercise\", \"Mavoglurant_A2121_nmpk.csv\"), show_col_types = FALSE) # read csv in the relative path to the fitting exercise folder, without showing column types\nstr(trial_data) # examine structure of data in the trial_data frame\n\nspc_tbl_ [2,678 × 17] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID  : num [1:2678] 793 793 793 793 793 793 793 793 793 793 ...\n $ CMT : num [1:2678] 1 2 2 2 2 2 2 2 2 2 ...\n $ EVID: num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ EVI2: num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ MDV : num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ DV  : num [1:2678] 0 491 605 556 310 237 147 101 72.4 52.6 ...\n $ LNDV: num [1:2678] 0 6.2 6.41 6.32 5.74 ...\n $ AMT : num [1:2678] 25 0 0 0 0 0 0 0 0 0 ...\n $ TIME: num [1:2678] 0 0.2 0.25 0.367 0.533 0.7 1.2 2.2 3.2 4.2 ...\n $ DOSE: num [1:2678] 25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : num [1:2678] 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num [1:2678] 75 0 0 0 0 0 0 0 0 0 ...\n $ AGE : num [1:2678] 42 42 42 42 42 42 42 42 42 42 ...\n $ SEX : num [1:2678] 1 1 1 1 1 1 1 1 1 1 ...\n $ RACE: num [1:2678] 2 2 2 2 2 2 2 2 2 2 ...\n $ WT  : num [1:2678] 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 ...\n $ HT  : num [1:2678] 1.77 1.77 1.77 1.77 1.77 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_double(),\n  ..   CMT = col_double(),\n  ..   EVID = col_double(),\n  ..   EVI2 = col_double(),\n  ..   MDV = col_double(),\n  ..   DV = col_double(),\n  ..   LNDV = col_double(),\n  ..   AMT = col_double(),\n  ..   TIME = col_double(),\n  ..   DOSE = col_double(),\n  ..   OCC = col_double(),\n  ..   RATE = col_double(),\n  ..   AGE = col_double(),\n  ..   SEX = col_double(),\n  ..   RACE = col_double(),\n  ..   WT = col_double(),\n  ..   HT = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nI will go ahead and convert the columns for subject ID, Compartment number, Event ID, occasion, dose amount keyword, and sex to factor variables.\n\ntrial_data &lt;- trial_data %&gt;%\n  mutate(across(c(\"ID\", \"CMT\", \"EVID\", \"AMT\", \"OCC\", \"SEX\", \"RACE\"), as.factor))\nstr(trial_data)\n\ntibble [2,678 × 17] (S3: tbl_df/tbl/data.frame)\n $ ID  : Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ CMT : Factor w/ 2 levels \"1\",\"2\": 1 2 2 2 2 2 2 2 2 2 ...\n $ EVID: Factor w/ 2 levels \"0\",\"1\": 2 1 1 1 1 1 1 1 1 1 ...\n $ EVI2: num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ MDV : num [1:2678] 1 0 0 0 0 0 0 0 0 0 ...\n $ DV  : num [1:2678] 0 491 605 556 310 237 147 101 72.4 52.6 ...\n $ LNDV: num [1:2678] 0 6.2 6.41 6.32 5.74 ...\n $ AMT : Factor w/ 4 levels \"0\",\"25\",\"37.5\",..: 2 1 1 1 1 1 1 1 1 1 ...\n $ TIME: num [1:2678] 0 0.2 0.25 0.367 0.533 0.7 1.2 2.2 3.2 4.2 ...\n $ DOSE: num [1:2678] 25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num [1:2678] 75 0 0 0 0 0 0 0 0 0 ...\n $ AGE : num [1:2678] 42 42 42 42 42 42 42 42 42 42 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 2 2 2 2 2 2 2 2 ...\n $ WT  : num [1:2678] 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 ...\n $ HT  : num [1:2678] 1.77 1.77 1.77 1.77 1.77 ...\n\n\nI want to create a line plot showing a dosage over time for each individual in the data set, that is stratified by total dose amount.\n\nggplot(trial_data, aes(x = TIME, y = DV, group = ID, color = DOSE)) + \n  geom_line() +\n  labs(title = \"Mavoglurant dose over time by individual and stratified by dose\", y= \"Dosage Variable\", x = \"Time in hours\")\n\n\n\n\n\n\n\n\nBecause the value of 2 for OCC (or occasion) reflects 2 dosages, and we are only examining cases that are given 1 dose, we will drop all levels= ‘2’ of the factor variable, OCC.\n\ntrial_data &lt;- droplevels(trial_data[!trial_data$OCC == '2',]) # drop rows where the level value is '2'\nstr(trial_data) # examine dataframe structure\n\ntibble [1,665 × 17] (S3: tbl_df/tbl/data.frame)\n $ ID  : Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ CMT : Factor w/ 2 levels \"1\",\"2\": 1 2 2 2 2 2 2 2 2 2 ...\n $ EVID: Factor w/ 2 levels \"0\",\"1\": 2 1 1 1 1 1 1 1 1 1 ...\n $ EVI2: num [1:1665] 1 0 0 0 0 0 0 0 0 0 ...\n $ MDV : num [1:1665] 1 0 0 0 0 0 0 0 0 0 ...\n $ DV  : num [1:1665] 0 491 605 556 310 237 147 101 72.4 52.6 ...\n $ LNDV: num [1:1665] 0 6.2 6.41 6.32 5.74 ...\n $ AMT : Factor w/ 4 levels \"0\",\"25\",\"37.5\",..: 2 1 1 1 1 1 1 1 1 1 ...\n $ TIME: num [1:1665] 0 0.2 0.25 0.367 0.533 0.7 1.2 2.2 3.2 4.2 ...\n $ DOSE: num [1:1665] 25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num [1:1665] 75 0 0 0 0 0 0 0 0 0 ...\n $ AGE : num [1:1665] 42 42 42 42 42 42 42 42 42 42 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 2 2 2 2 2 2 2 2 ...\n $ WT  : num [1:1665] 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 ...\n $ HT  : num [1:1665] 1.77 1.77 1.77 1.77 1.77 ...\n\nlevels(trial_data$OCC) # examine levels of the OCC variable\n\n[1] \"1\"\n\n\nAll factor levels of OCC except for ‘1’, were dropped. Next, we will drop all rows with the numeric value for TIME = ‘0’\n\ntrial_data2 &lt;-trial_data[!(trial_data$TIME %in% 0),] # exclude all rows where time has a value fo zero\nsummary(trial_data2$TIME) # check the minimum avlue for TIME\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.200   0.583   3.200   6.930   8.250  48.217 \n\n\nNow we will use dplyr to find the sum of dosage values (DV) for each individual (ID).\n\nsum_DV &lt;- trial_data2 %&gt;% # create data frame for the sum_DV\n  group_by(ID) %&gt;% # group by individual \n  summarise( Y = sum(DV)) # make a summary column of DV using dpylr\nstr(sum_DV) # check structure of sumDV\n\ntibble [120 × 2] (S3: tbl_df/tbl/data.frame)\n $ ID: Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ Y : num [1:120] 2691 2639 2150 1789 3126 ...\n\n\nY, as the sum of DV, was found in a new data frame called sum_DV. We will get a produce for values where TIME=0 and join the data frames.\n\ntrial_data3 &lt;- trial_data %&gt;%\n  filter(TIME == 0) # filter for values of TIME = '0' using dpylr\nstr(trial_data3) # check structure of new df\n\ntibble [120 × 17] (S3: tbl_df/tbl/data.frame)\n $ ID  : Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ CMT : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ EVID: Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 2 2 2 2 ...\n $ EVI2: num [1:120] 1 1 1 1 1 1 1 1 1 1 ...\n $ MDV : num [1:120] 1 1 1 1 1 1 1 1 1 1 ...\n $ DV  : num [1:120] 0 0 0 0 0 0 0 0 0 0 ...\n $ LNDV: num [1:120] 0 0 0 0 0 0 0 0 0 0 ...\n $ AMT : Factor w/ 4 levels \"0\",\"25\",\"37.5\",..: 2 2 2 2 2 2 2 2 2 2 ...\n $ TIME: num [1:120] 0 0 0 0 0 0 0 0 0 0 ...\n $ DOSE: num [1:120] 25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num [1:120] 75 150 150 150 150 150 150 150 150 150 ...\n $ AGE : num [1:120] 42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ WT  : num [1:120] 94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num [1:120] 1.77 1.76 1.81 1.65 1.56 ...\n\ntrial_data4 &lt;- merge(x = trial_data3, y = sum_DV, by = \"ID\", all = TRUE) # outer join the data frame to preserve all rows and join them by the ID variable\nstr(trial_data4) # check structure of joined df\n\n'data.frame':   120 obs. of  18 variables:\n $ ID  : Factor w/ 120 levels \"793\",\"794\",\"795\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ CMT : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ EVID: Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 2 2 2 2 ...\n $ EVI2: num  1 1 1 1 1 1 1 1 1 1 ...\n $ MDV : num  1 1 1 1 1 1 1 1 1 1 ...\n $ DV  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ LNDV: num  0 0 0 0 0 0 0 0 0 0 ...\n $ AMT : Factor w/ 4 levels \"0\",\"25\",\"37.5\",..: 2 2 2 2 2 2 2 2 2 2 ...\n $ TIME: num  0 0 0 0 0 0 0 0 0 0 ...\n $ DOSE: num  25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: num  75 150 150 150 150 150 150 150 150 150 ...\n $ AGE : num  42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ WT  : num  94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num  1.77 1.76 1.81 1.65 1.56 ...\n $ Y   : num  2691 2639 2150 1789 3126 ...\n\n\nBecause I have already converted the variables, SEX and RACE, to factors, I will not repeat this step. I will delete the unnecessary columns of my final data frame to only include the variables: Y, DOSE, AGE, SEX, RACE, WT, and HT.\n\ntrial_data4 &lt;- trial_data4 %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\") # select only the aforementioned variables\nstr(trial_data4) # check data structure\n\n'data.frame':   120 obs. of  7 variables:\n $ Y   : num  2691 2639 2150 1789 3126 ...\n $ DOSE: num  25 25 25 25 25 25 25 25 25 25 ...\n $ AGE : num  42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ WT  : num  94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num  1.77 1.76 1.81 1.65 1.56 ...\n\nsummary(trial_data4)\n\n       Y               DOSE            AGE        SEX     RACE   \n Min.   : 826.4   Min.   :25.00   Min.   :18.00   1:104   1 :74  \n 1st Qu.:1700.5   1st Qu.:25.00   1st Qu.:26.00   2: 16   2 :36  \n Median :2349.1   Median :37.50   Median :31.00           7 : 2  \n Mean   :2445.4   Mean   :36.46   Mean   :33.00           88: 8  \n 3rd Qu.:3050.2   3rd Qu.:50.00   3rd Qu.:40.25                  \n Max.   :5606.6   Max.   :50.00   Max.   :50.00                  \n       WT               HT       \n Min.   : 56.60   Min.   :1.520  \n 1st Qu.: 73.17   1st Qu.:1.700  \n Median : 82.10   Median :1.770  \n Mean   : 82.55   Mean   :1.759  \n 3rd Qu.: 90.10   3rd Qu.:1.813  \n Max.   :115.30   Max.   :1.930  \n\n\nI will now check for any missing values.\n\nwhich(is.na(trial_data4)) # find location of missing values\n\ninteger(0)\n\nsum(is.na(trial_data4)) # count total missing values \n\n[1] 0\n\npath &lt;- here(\"./fitting-exercise/cleandata.rds\") # create path using here package\nsaveRDS(trial_data4, file = path) # save as an rds using specified here path\n\nNo missing variables will found, so I will not continue to clean the data and move onto exploratory data analysis. I save the clean data as an rds called cleandata.rds. ## Exploratory Data Analysis ### Summary Table I will create a summary table of the data frame in R by using the describe() function from the “psych” package.\n\ntable1 &lt;- describe(trial_data4[ , c(\"Y\", \"DOSE\", \"AGE\",\"WT\", \"HT\")],fast=TRUE) # summary stats of cleaned data for the numeric columns\nprint(table1)\n\n     vars   n    mean     sd    min     max   range    se\nY       1 120 2445.41 961.64 826.43 5606.58 4780.15 87.78\nDOSE    2 120   36.46  11.86  25.00   50.00   25.00  1.08\nAGE     3 120   33.00   8.98  18.00   50.00   32.00  0.82\nWT      4 120   82.55  12.52  56.60  115.30   58.70  1.14\nHT      5 120    1.76   0.09   1.52    1.93    0.41  0.01\n\n\nIn this summary table, we see the numeric variables. They all have a relatively small SE and reasonable min and max values. The range sumDV (Y) is large, but this is likely because this is the sum of the concentration administered to each individual. Now I will bring in the factor variables. I want to stratify the Y variable and dose by AGE, RACE, AGE, WT and HT. I will be using the tidyverse and gtsummary (which I found on stackoverflow) packages to produce this table.\n\ntable2 &lt;- trial_data4 %&gt;%\n  group_by(SEX, RACE) %&gt;%\n  summarise(\n    mean_Y = mean(Y),\n    mean_DOSE = mean(DOSE),\n    mean_AGE = mean(AGE),\n    sd_Y = sd(Y),\n    sd_DOSE = sd(DOSE),\n    sd_AGE = sd(AGE),\n  )\n\n`summarise()` has grouped output by 'SEX'. You can override using the `.groups`\nargument.\n\nprint(table2)\n\n# A tibble: 8 × 8\n# Groups:   SEX [2]\n  SEX   RACE  mean_Y mean_DOSE mean_AGE  sd_Y sd_DOSE sd_AGE\n  &lt;fct&gt; &lt;fct&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 1     1      2468.      38.1     32.9  995.    11.8   9.14\n2 1     2      2497.      35.6     31.0  910.    12.2   7.91\n3 1     7      1491.      25       41     NA     NA    NA   \n4 1     88     2612.      35.7     24.6  974.    13.4   3.64\n5 2     1      2239.      34.1     40.7 1099.    11.3   6.08\n6 2     2      2087.      25       39   1010.     0    10.1 \n7 2     7      2790.      50       49     NA     NA    NA   \n8 2     88     2093.      25       39     NA     NA    NA   \n\n\nThe means of Y and dosage seam to be similar, and within the range specified above with a couple exceptions. SEX(1) and RACE(7) has a lower mean Y. There is also a high DOSE value for SEX(2) RACE(7). This value of 50 is the max, so either all of the values here must be 50. The mean age for race and sex also varies quite a bit. It is also strange the sd for dose for SEX(2) RACE(2) is 0. ### Data Distribution #### Scatter Plots To examine these strange summary stats in the table in more detail, we will visualize the data distribution using ggplot2. First, I will produce some scatterplots to see if there are any associations or if the data is randomly distributed\n\n# Y versus AGE scatter plot by SEX\nplot1 &lt;- ggplot(trial_data4, aes(x = AGE, y = Y, color = SEX)) +\n  geom_point() +\n  labs(x = \"AGE\", y = \"Y\", title = \"Scatter Plot of Y versus Age by Sex\") +\n  theme_minimal()\nprint(plot1)\n\n\n\n\n\n\n\n# Y versus AGE scatter plot by RACE\nplot2 &lt;- ggplot(trial_data4, aes(x = AGE, y = Y, color = RACE)) +\n  geom_point() +\n  labs(x = \"AGE\", y = \"Y\", title = \"Scatter Plot of Y versus Age by Race\") +\n  theme_minimal()\nprint(plot2)\n\n\n\n\n\n\n\n# WT versus HT scatter plot by Sex\nplot3 &lt;- ggplot(trial_data4, aes(x = HT, y = WT, color = SEX)) +\n  geom_point() +\n  labs(x = \"Height\", y = \"Weight\", title = \"Scatter Plot of Weight versus Height by Sex\") +\n  theme_minimal()\nprint(plot3)\n\n\n\n\n\n\n\n# WT versus HT scatter plot by Race\nplot4 &lt;- ggplot(trial_data4, aes(x = HT, y = WT, color = RACE)) +\n  geom_point() +\n  labs(x = \"Height\", y = \"Weight\", title = \"Scatter Plot of Weight versus Height by Race\") +\n  theme_minimal()\nprint(plot4)\n\n\n\n\n\n\n\n\nThe distribution of age seems and Y seem to be fairly random, with the exception of an outlier in the Y variable that is extremely high. I will leave this outlier as there is no indication of whether this holds importance (we don’t know the definition of many of these variables). The distribution of Sex for Y and Age values seems to be a higher age for sex 2, but random for the Y variable. In general, Race seems fairly random for Age and Y, except Race 7 seems to also predominantly be higher ages. Weight and height show a slight trend, as they normally do, without any extreme outliers. The sex distribution of height and weight also makes sense as females tend to be shorter and weight less than males. For this reason, we might assume that sex 2 is female, but we should not make assumptions. Races 1, 2, and 7 seem to be randomly distributed for weight and height. However, race 88 seems to be on the lower end for both height and weight, which may indicate some sex correlation with race. #### Box Plots Now I will use box plots to examine the distribution of Dose and Y stratified by the two factor variables, Race and Sex.\n\n# Distribution of Y stratified by SEX and RACE\nplot6 &lt;- trial_data4 %&gt;% \n  ggplot(aes(x=RACE, y=Y, color = SEX)) +  \n  geom_boxplot() +\n  labs(x = \"RACE\", y = \"Drug concentration\", title = \"Race and drug concentraiton distribution, stratified by sex\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))  # Rotate x-axis text by 90 degrees\nplot(plot6)\n\n\n\n\n\n\n\n# Distribution of DOSE stratified by SEX and RACE\nplot7 &lt;- trial_data4 %&gt;% \n  ggplot(aes(x=RACE, y=DOSE, color = SEX)) +  \n  geom_boxplot() +\n  labs(x = \"RACE\", y = \"Drug concentration\", title = \"Race and Dose distribution, stratified by sex\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))  # Rotate x-axis text by 90 degrees\nplot(plot7)\n\n\n\n\n\n\n\n\nThere are two outliers for Y, in race 1. Each outlier is of a different sex, so sex might not impact the outliers.There are only 2 values for race 7, making their distribution look wonky. In general, sex 1 has a higher Y and dose than sex 2. No outliers is dose were seen as there are only 3 options for dose. Again, because there are two values in race 7, the distribution is wonky. I will choose to keep Race 7, because I do not know if this represents an important minority group, despite there only being 2 values. ### Correlation Plots Now I will create a correlation plot of the numeric variables. To do this, I asked ChatGPT to provide me with the functions used to make correlation plots for numeric variables.\n\nnumeric_data &lt;- trial_data4[, sapply(trial_data4, is.numeric)]\ncorrelation_matrix &lt;- cor(numeric_data) # Calculating correlation matrix\ncorrplot(correlation_matrix, method = \"circle\", type = \"upper\", \n         tl.col = \"black\", tl.srt = 45) # Creating correlation plot\n\n\n\n\n\n\n\n\nFrom the correlation plot, it seems that weight and height, and Y and Dose are most highly correlated. Age and height are moderately negatively correlated, as well as weight and Y are slightly negatively correlated. ## Model Fitting First, I will fit a linear model to the outcome, Y, using the predictor of DOSE.\n\nset.seed(333)\ndata_split &lt;- trial_data4 %&gt;% \n  initial_split(prop = 3/4) #split the data so that 3/4 is in the training set and 1/4 in the reference set\ntrain_data &lt;- training(data_split) # make the training data object\ntest_data  &lt;- testing(data_split) # make testing data object\n\ntrial_linear_fit_1 &lt;- \n  recipe(Y ~ DOSE, data = train_data) \n\nlm_mod &lt;- linear_reg() %&gt;% # make object called lm_mod for linear_regression function\n  set_engine(\"lm\") %&gt;% # set linear regression engine to lm\n  set_mode(\"regression\") # set to regression mode\n\ntrials_workflow1 &lt;- workflow() %&gt;% #create a workflow\n    add_model(lm_mod) %&gt;% #apply the linear regression model\n  add_recipe(trial_linear_fit_1) #then, apply the recipe\n\nlm_fit &lt;- \n  lm_mod %&gt;% \n  fit(Y ~ DOSE, data = trial_data4) # fit Y to dose \ntidy(lm_fit) # produce tibble for linear regression fit\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    323.     199.        1.62 1.07e- 1\n2 DOSE            58.2      5.19     11.2  2.69e-20\n\n\nThe intercept has a relatively large standard error, while the DOSE regression estimate has a more reasonable SE. This linear regression reflects a positive trend between dose and Y with a slope of 58.2. I will now use this model to predict the trial data. This will allow me to calculate the predictive power using the RMSE and R-squared metrics.\n\ntrial_fit1 &lt;- \n  trials_workflow1 %&gt;% \n  fit(data = train_data) # shows model to fit the data used from training from the aforementioned workflow\n   predict(trial_fit1, test_data) #predict the outcome Y\n\n# A tibble: 30 × 1\n   .pred\n   &lt;dbl&gt;\n 1 1813.\n 2 1813.\n 3 2560.\n 4 2560.\n 5 2560.\n 6 2560.\n 7 2560.\n 8 3307.\n 9 3307.\n10 3307.\n# ℹ 20 more rows\n\ntrial_aug &lt;- \n  augment(trial_fit1, test_data)\ntrial_aug %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\")\n\n# A tibble: 30 × 7\n       Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1789.  25      46 2     1      77.4  1.65\n 2 2549.  25      46 1     1      83    1.78\n 3 2353.  37.5    43 2     1      64.4  1.56\n 4 2009.  37.5    19 1     2      86.1  1.91\n 5 2934.  37.5    46 1     1      71.2  1.67\n 6 2155.  37.5    30 1     1      85.4  1.86\n 7 2424.  37.5    25 1     1      73.3  1.69\n 8 2667.  50      45 2     1      80.7  1.66\n 9 3004.  50      28 1     1      83.2  1.74\n10 2746.  50      40 1     2      74.8  1.65\n# ℹ 20 more rows\n\nnames(trial_aug) # check the name for the predicted column\n\n[1] \"Y\"     \"DOSE\"  \"AGE\"   \"SEX\"   \"RACE\"  \"WT\"    \"HT\"    \".pred\"\n\neval_metrics &lt;- metric_set(rmse, rsq) # use yardstick to select multiple regression metrics (rmse and r squared)\n\neval_metrics(data = trial_aug,\n             truth = Y,\n             estimate = .pred) %&gt;% \n  select(-2) # Evaluate RMSE, R2 based on the results\n\n# A tibble: 2 × 2\n  .metric .estimate\n  &lt;chr&gt;       &lt;dbl&gt;\n1 rmse      630.   \n2 rsq         0.533\n\n\nThe RMSE is very large and rsq is close to 0.5 which shows that the predictive model is not a very good fit for the data. Next, I will fit a linear model to the outcome, Y, using all of the predictors.\n\ntrial_linear_fit_2 &lt;- \n  recipe(Y ~ ., data = train_data) \n\nlm_mod2 &lt;- linear_reg() %&gt;% # make object called lm_mod for linear_regression function\n  set_engine(\"lm\") %&gt;% # set linear regression engine to lm\n  set_mode(\"regression\") # set to regression mode\n\ntrials_workflow2 &lt;- workflow() %&gt;% #create a workflow\n    add_model(lm_mod2) %&gt;% #apply the linear regression model\n  add_recipe(trial_linear_fit_2) #then, apply the recipe\n\nlm_fit2 &lt;- \n  lm_mod2 %&gt;% \n  fit(Y ~ ., data = trial_data4) # fit Y to dose \ntidy(lm_fit2) # produce tibble for linear regression fit\n\n# A tibble: 9 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  3387.     1835.       1.85  6.76e- 2\n2 DOSE           59.9       4.88    12.3   2.05e-22\n3 AGE             3.16      7.82     0.403 6.88e- 1\n4 SEX2         -358.      217.      -1.65  1.02e- 1\n5 RACE2         155.      129.       1.21  2.31e- 1\n6 RACE7        -405.      448.      -0.904 3.68e- 1\n7 RACE88        -53.5     245.      -0.219 8.27e- 1\n8 WT            -23.0       6.40    -3.60  4.71e- 4\n9 HT           -748.     1104.      -0.678 4.99e- 1\n\n\nThe standard error for the intercept, SEX2, RACE2, Race7, and HT are extremely large. This may be in part due to the large standard error of the original Y (outcome) variable. Dose, Age and Race2 have a positive trend with Y while the variables Sex2, Race7, Race88, WT, and HT have a negative trend with Y.\n\ntrial_fit2 &lt;- \n  trials_workflow2 %&gt;% \n  fit(data = train_data) # shows model to fit the data sued from training from the aforementioned workflow\n   predict(trial_fit2, test_data) #predict the outcome Y\n\n# A tibble: 30 × 1\n   .pred\n   &lt;dbl&gt;\n 1 1646.\n 2 1857.\n 3 2838.\n 4 2428.\n 5 3070.\n 6 2377.\n 7 2859.\n 8 3139.\n 9 3381.\n10 3984.\n# ℹ 20 more rows\n\ntrial_aug &lt;- \n  augment(trial_fit2, test_data)\ntrial_aug %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\")\n\n# A tibble: 30 × 7\n       Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1789.  25      46 2     1      77.4  1.65\n 2 2549.  25      46 1     1      83    1.78\n 3 2353.  37.5    43 2     1      64.4  1.56\n 4 2009.  37.5    19 1     2      86.1  1.91\n 5 2934.  37.5    46 1     1      71.2  1.67\n 6 2155.  37.5    30 1     1      85.4  1.86\n 7 2424.  37.5    25 1     1      73.3  1.69\n 8 2667.  50      45 2     1      80.7  1.66\n 9 3004.  50      28 1     1      83.2  1.74\n10 2746.  50      40 1     2      74.8  1.65\n# ℹ 20 more rows\n\neval_metrics &lt;- metric_set(rmse, rsq) # use yardstick to select multiple regression metrics (rmse and r squared)\n\neval_metrics(data = trial_aug,\n             truth = Y,\n             estimate = .pred) %&gt;% \n  select(-2) # Evaluate RMSE, R2 based on the results\n\n# A tibble: 2 × 2\n  .metric .estimate\n  &lt;chr&gt;       &lt;dbl&gt;\n1 rmse      629.   \n2 rsq         0.613\n\n\nThe R squared value for the model including all of the predictors is slightly better than the previous model (at around 0.6), but still NOT good. The rmse has not changed much, reflecting a large impact of outliers on the standard error of the predictions in the linear model.\nNow we will make a model with SEX to practice fitting with a categorical outcome variable. We will fit a logistic model to the SEX outcome using the predictor, DOSE.\n\ntrial_logreg_rec &lt;- \n  recipe(SEX ~ DOSE, data = train_data) %&gt;% # create recipe for logistic regression model using SEX as outcome\n  prep() # Prepare the recipe\n\nlr_mod &lt;- logistic_reg() %&gt;% # make object called lr_mod for logistic regression function\n  set_engine(\"glm\") # set logistic regression engine to glm\n\nlr_trials_workflow &lt;- workflow() %&gt;% # create a workflow\n  add_model(lr_mod) %&gt;% # apply the logistic regression model\n  add_recipe(trial_logreg_rec) # then, apply the recipe\n\nlr_fit &lt;- \n  lr_mod %&gt;% \n  fit(SEX ~ DOSE, data = trial_data4) # fit Y to dose \ntidy(lr_fit) # produce tibble for log regression fit\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  -0.765     0.854     -0.896   0.370\n2 DOSE         -0.0318    0.0243    -1.31    0.192\n\n\nThere is a relatively high standard error for both the dose and intercept estimates. Both estimates are negative, meaning there is a negative trend between dose and sex.\nWe will now compute accuracy and ROC-AUC for this model.\n\nlr_trial_fit &lt;- \n  lr_trials_workflow %&gt;% \n  fit(data = train_data)\n\npredict(lr_trial_fit, new_data = test_data)\n\n# A tibble: 30 × 1\n   .pred_class\n   &lt;fct&gt;      \n 1 1          \n 2 1          \n 3 1          \n 4 1          \n 5 1          \n 6 1          \n 7 1          \n 8 1          \n 9 1          \n10 1          \n# ℹ 20 more rows\n\nlr_trial_aug &lt;- \n  augment(lr_trial_fit, test_data)\n\nlr_trial_aug %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\")\n\n# A tibble: 30 × 7\n       Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1789.  25      46 2     1      77.4  1.65\n 2 2549.  25      46 1     1      83    1.78\n 3 2353.  37.5    43 2     1      64.4  1.56\n 4 2009.  37.5    19 1     2      86.1  1.91\n 5 2934.  37.5    46 1     1      71.2  1.67\n 6 2155.  37.5    30 1     1      85.4  1.86\n 7 2424.  37.5    25 1     1      73.3  1.69\n 8 2667.  50      45 2     1      80.7  1.66\n 9 3004.  50      28 1     1      83.2  1.74\n10 2746.  50      40 1     2      74.8  1.65\n# ℹ 20 more rows\n\nnames(lr_trial_aug)\n\n [1] \"Y\"           \"DOSE\"        \"AGE\"         \"SEX\"         \"RACE\"       \n [6] \"WT\"          \"HT\"          \".pred_class\" \".pred_1\"     \".pred_2\"    \n\nROC1 &lt;- lr_trial_aug %&gt;% \n  roc_auc(truth = SEX, .pred_1)\nprint(ROC1)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.621\n\nROC2 &lt;- lr_trial_aug %&gt;% \n  roc_auc(truth = SEX, .pred_2)\nprint(ROC2)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.379\n\n\nThe AUC metric for the first predictor is 0.62 and for the second is 0.38. They are both the same magnitude away from 0.5. This means that both predictions are equally as good, but neither prediction is great because it they are not very close to 1 or 0. This means that this model doesn’t have great predictive power either.\nNext, we will fit a logistic model to SEX using all of the other predictors.\n\ntrial_logreg_rec2 &lt;- \n  recipe(SEX ~ ., data = train_data) %&gt;% # create recipe for logistic regression model using SEX as outcome\n  prep() # Prepare the recipe\n\nlr_mod2 &lt;- logistic_reg() %&gt;% # make object called lr_mod for logistic regression function\n  set_engine(\"glm\") # set logistic regression engine to glm\n\nlr_trials_workflow2 &lt;- workflow() %&gt;% # create a workflow\n  add_model(lr_mod2) %&gt;% # apply the logistic regression model\n  add_recipe(trial_logreg_rec2) # then, apply the recipe\n\nlr_fit2 &lt;- \n  lr_mod2 %&gt;% \n  fit(SEX ~ ., data = trial_data4) # fit Y to dose \ntidy(lr_fit2) # produce tibble for log regression fit\n\n# A tibble: 9 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  60.3     18.0         3.34   0.000824\n2 Y            -0.00104  0.000963   -1.08   0.280   \n3 DOSE         -0.0308   0.0776     -0.396  0.692   \n4 AGE           0.0834   0.0607      1.37   0.170   \n5 RACE2        -1.93     1.37       -1.40   0.161   \n6 RACE7         0.118    3.85        0.0306 0.976   \n7 RACE88       -1.50     2.19       -0.683  0.494   \n8 WT           -0.0628   0.0794     -0.791  0.429   \n9 HT          -33.2     11.1        -3.00   0.00274 \n\n\nThe intercept now has a much higher estimate, of 60 and a smaller SE than the previous logistic regression model. Almost all of the variables have a negative trends with the Sex variables, except for Race7. In addition, all of the estimates for the predictor variables versus Sex (outcome) have a very high SE, meaning that they have a high variability.\nWe will also compute accuracy and ROC-AUC for this model.\n\nlr_trial_fit2 &lt;- \n  lr_trials_workflow2 %&gt;% \n  fit(data = train_data)\n\nWarning: glm.fit: algorithm did not converge\n\n\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\npredict(lr_trial_fit2, new_data = test_data)\n\n# A tibble: 30 × 1\n   .pred_class\n   &lt;fct&gt;      \n 1 2          \n 2 1          \n 3 2          \n 4 1          \n 5 1          \n 6 1          \n 7 1          \n 8 2          \n 9 1          \n10 1          \n# ℹ 20 more rows\n\nlr_trial_aug2 &lt;- \n  augment(lr_trial_fit2, test_data)\n\nlr_trial_aug2 %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"RACE\", \"WT\", \"HT\")\n\n# A tibble: 30 × 7\n       Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1789.  25      46 2     1      77.4  1.65\n 2 2549.  25      46 1     1      83    1.78\n 3 2353.  37.5    43 2     1      64.4  1.56\n 4 2009.  37.5    19 1     2      86.1  1.91\n 5 2934.  37.5    46 1     1      71.2  1.67\n 6 2155.  37.5    30 1     1      85.4  1.86\n 7 2424.  37.5    25 1     1      73.3  1.69\n 8 2667.  50      45 2     1      80.7  1.66\n 9 3004.  50      28 1     1      83.2  1.74\n10 2746.  50      40 1     2      74.8  1.65\n# ℹ 20 more rows\n\nnames(lr_trial_aug2)\n\n [1] \"Y\"           \"DOSE\"        \"AGE\"         \"SEX\"         \"RACE\"       \n [6] \"WT\"          \"HT\"          \".pred_class\" \".pred_1\"     \".pred_2\"    \n\nROC1_2 &lt;- lr_trial_aug2 %&gt;% \n  roc_auc(truth = SEX, .pred_1)\nprint(ROC1)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.621\n\nROC2_2 &lt;- lr_trial_aug %&gt;% \n  roc_auc(truth = SEX, .pred_2)\nprint(ROC2)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.379\n\n\nWith a AUC of 0.62 and 0.38, both predictions are equally good, but also both not the greatest. AUC values closer to 0.5 means the model is more near a random model versus an AUC close to 0 or 1, which might show good predictive power."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-improvement",
    "href": "fitting-exercise/fitting-exercise.html#model-improvement",
    "title": "Fitting Exercise",
    "section": "Model Improvement",
    "text": "Model Improvement\nFor this exercise, we will be using the data previously used to fit our linear and logistic models to create new models and improve those models. We will be using tidymodels and the packages previously opened for the first part of this exercise. We will start this exercise by eliminating the variable entitled RACE because it has values (7 and 88) with too few observations, and which might be acting as outliers.\n\ntrial_data5 &lt;- subset(trial_data4, select = -RACE) # Use subset to column to drop \nstr(trial_data5) # check structure of new df\n\n'data.frame':   120 obs. of  6 variables:\n $ Y   : num  2691 2639 2150 1789 3126 ...\n $ DOSE: num  25 25 25 25 25 25 25 25 25 25 ...\n $ AGE : num  42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ WT  : num  94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num  1.77 1.76 1.81 1.65 1.56 ...\n\n\nNext, we will set a seed for reproducibility. And split the data with 75% in the training set and 25% in the testing set.\n\nrngseed &lt;- 1234\nset.seed(rngseed) # set seed according to the variable rngseed (which equals 1234)\n# Data Splitting\nlibrary(rsample)\ntrial5_split &lt;- initial_split(trial_data5, prop = 3/4)# create new data frame with the 3/4 split\ntrain_data2 &lt;- training(trial5_split) # create data frame for training data\ntest_data2  &lt;- testing(trial5_split) # create data frame for testing data\n\nNext, I will produce a linear model with just one predictor, DOSE, the outcome, or the Y variable. I will then produce a full model including all of the predictors: DOSE, AGE, SEX, WT, and HT.\n\n# Single Predictor Model (Y v. DOSE)\nsingle_rec &lt;- \n  recipe(Y ~ DOSE, data = train_data2) # specify the recipe by putting the formula for the null linear model\n\nsingle_linreg &lt;- linear_reg() %&gt;% # make object called null_linreg for linear_regression function\n  set_engine(\"lm\") %&gt;% # set linear regression engine to lm\n  set_mode(\"regression\") # set to regression mode\n\nworkflow_single &lt;- workflow() %&gt;% #create a workflow for the linear model called workflow_null\n    add_model(single_linreg) %&gt;% #apply the linear regression model\n  add_recipe(single_rec) #then, apply the recipe\n\nsingle_lmfit &lt;- \n  workflow_single %&gt;% \n  fit(data = train_data2) # fit Y to dose using ONLY the training data\ntidy(single_lmfit) # produce tibble for linear regression fit\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    535.     244.        2.19 3.08e- 2\n2 DOSE            53.4      6.29      8.50 4.41e-13\n\n\n\n# Full model (Y v. all predictors)\nfull_rec &lt;- \n  recipe(Y ~ ., data = train_data2) # specify the recipe by putting the formula for the linear model with all the predictors\n\nfull_linreg &lt;- linear_reg() %&gt;% # make object called full_linreg for linear_regression function\n  set_engine(\"lm\") %&gt;% # Use the same linear regression engine as the null model\n  set_mode(\"regression\") # and also, set to regression mode\n\nworkflow_full &lt;- workflow() %&gt;% #create a workflow for the full linear model called workflow_full\n    add_model(full_linreg) %&gt;% #apply the new linear regression model\n  add_recipe(full_rec) #then, apply the recipe\n\nfull_lmfit &lt;- \n   workflow_full %&gt;% # add the workflow to the fit\n  fit(data = train_data2) # fit Y to dose using ONLY the training data\ntidy(full_lmfit) # produce tibble to organize the resulting linear regression fit\n\n# A tibble: 6 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  4397.      2170.      2.03   4.59e- 2\n2 DOSE           55.3        5.83    9.49   6.09e-15\n3 AGE            -0.417      9.50   -0.0439 9.65e- 1\n4 SEX2         -569.       285.     -1.99   4.95e- 2\n5 WT            -22.6        7.65   -2.96   4.00e- 3\n6 HT          -1130.      1358.     -0.832  4.08e- 1\n\n\n\nUsing RMSE to evaluate linear models\nNow I will compute the predictions that are made by both the singular predictor model and the full model. RMSE will be calculated using the observed versus the predicted values. Lastly, we will compare these RMSE values to the RMSE of the null model as fitted using the null_model() function.\n#Edited by Taylor Glass I noticed that the reason your RMSE values were not as expected is because you were using the test_data2 instead of the train_data2. This entire process should be using the train_data2 only, so I made those changes. The RMSE values are now 948, 702, and 627 respectively.\n\n# Make predictions with the single predictor linear model\npredict(single_lmfit, train_data2) #predict the outcome Y from the single predictor linear model (Y v. dose)\n\n# A tibble: 90 × 1\n   .pred\n   &lt;dbl&gt;\n 1 3207.\n 2 1871.\n 3 2539.\n 4 1871.\n 5 3207.\n 6 1871.\n 7 1871.\n 8 1871.\n 9 1871.\n10 2539.\n# ℹ 80 more rows\n\nsingle_aug &lt;- \n  augment(single_lmfit, train_data2) # add columns of interest to new data frame\nsingle_aug %&gt;%\n  select(\"Y\", \"DOSE\") # select columns to add to the data frame\n\n# A tibble: 90 × 2\n       Y  DOSE\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 3004.  50  \n 2 1347.  25  \n 3 2772.  37.5\n 4 2028.  25  \n 5 2353.  50  \n 6  826.  25  \n 7 3866.  25  \n 8 3126.  25  \n 9 1108.  25  \n10 2815.  37.5\n# ℹ 80 more rows\n\nnames(single_aug) # check the names\n\n[1] \"Y\"     \"DOSE\"  \"AGE\"   \"SEX\"   \"WT\"    \"HT\"    \".pred\"\n\n# Calculate the RMSE of the single predictor model\nrmse_sing &lt;- rmse(data = single_aug,\n             truth = Y,\n             estimate = .pred)\n  print(rmse_sing) # Evaluate RMSE based on the results\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        703.\n\n# Make predictions with the full predictor linear model\npredict(full_lmfit, train_data2) #predict the outcome Y from the FULL predictor linear model (Y v. all predictors)\n\n# A tibble: 90 × 1\n   .pred\n   &lt;dbl&gt;\n 1 3303.\n 2 1953.\n 3 2745.\n 4 2081.\n 5 2894.\n 6 1265.\n 7 2429.\n 8 1976.\n 9 1561.\n10 2549.\n# ℹ 80 more rows\n\nfull_aug &lt;- \n  augment(full_lmfit, train_data2) # add predictions to new data frame\nfull_aug %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"WT\", \"HT\") # select columns to add to the data frame\n\n# A tibble: 90 × 6\n       Y  DOSE   AGE SEX      WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 3004.  50      28 1      83.2  1.74\n 2 1347.  25      41 1      81    1.75\n 3 2772.  37.5    28 1      78.3  1.72\n 4 2028.  25      28 2      58.9  1.58\n 5 2353.  50      37 1      99.1  1.78\n 6  826.  25      30 1     105.   1.88\n 7 3866.  25      23 1      65.3  1.65\n 8 3126.  25      41 2      64.3  1.56\n 9 1108.  25      48 2      79.5  1.62\n10 2815.  37.5    26 1      84.5  1.77\n# ℹ 80 more rows\n\nnames(full_aug) # check the names for the columns\n\n[1] \"Y\"     \"DOSE\"  \"AGE\"   \"SEX\"   \"WT\"    \"HT\"    \".pred\"\n\nstr(full_aug)\n\ntibble [90 × 7] (S3: tbl_df/tbl/data.frame)\n $ Y    : num [1:90] 3004 1347 2772 2028 2353 ...\n $ DOSE : num [1:90] 50 25 37.5 25 50 25 25 25 25 37.5 ...\n $ AGE  : num [1:90] 28 41 28 28 37 30 23 41 48 26 ...\n $ SEX  : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 1 1 1 2 2 1 ...\n $ WT   : num [1:90] 83.2 81 78.3 58.9 99.1 ...\n $ HT   : num [1:90] 1.74 1.75 1.72 1.58 1.78 ...\n $ .pred: num [1:90] 3303 1953 2745 2081 2894 ...\n\n# Calculate the RMSE of the full model\nrmse_full &lt;- rmse(data = full_aug,\n             truth = Y,\n             estimate = .pred)\n  print(rmse_full) # Evaluate RMSE based on the results\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        627.\n\n# Make predictions using a null model\nblank_model &lt;- null_model() %&gt;% \n  set_engine(\"parsnip\") %&gt;% \n  set_mode(\"regression\") # use the null_model function and the parsnip engine to create a blank model\n\nblank_rec &lt;-\n  recipe(Y ~ 1, data = train_data2) # produce recipe for blank model\n\nworkflow_blank &lt;- workflow() %&gt;% #create a workflow for the null model called workflow_blank\n    add_model(blank_model) %&gt;% #apply the new null model\n  add_recipe(blank_rec) #then, apply the recipe\n\nblank_fit &lt;- \n   workflow_blank %&gt;% # add the workflow to the fit\n  fit(data = train_data2) # fit Y to dose using ONLY the training data\ntidy(blank_fit) # produce tibble to organize the resulting linear regression fit\n\n# A tibble: 1 × 1\n  value\n  &lt;dbl&gt;\n1 2509.\n\npredict(blank_fit, train_data2) #predict the outcome Y from the BLANK predictor linear model\n\n# A tibble: 90 × 1\n   .pred\n   &lt;dbl&gt;\n 1 2509.\n 2 2509.\n 3 2509.\n 4 2509.\n 5 2509.\n 6 2509.\n 7 2509.\n 8 2509.\n 9 2509.\n10 2509.\n# ℹ 80 more rows\n\nblank_aug &lt;- \n  augment(blank_fit, train_data2) # add predictions to new data frame\nblank_aug %&gt;%\n  select(\"Y\", \"DOSE\", \"AGE\", \"SEX\", \"WT\", \"HT\") # select columns to add to the data frame\n\n# A tibble: 90 × 6\n       Y  DOSE   AGE SEX      WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 3004.  50      28 1      83.2  1.74\n 2 1347.  25      41 1      81    1.75\n 3 2772.  37.5    28 1      78.3  1.72\n 4 2028.  25      28 2      58.9  1.58\n 5 2353.  50      37 1      99.1  1.78\n 6  826.  25      30 1     105.   1.88\n 7 3866.  25      23 1      65.3  1.65\n 8 3126.  25      41 2      64.3  1.56\n 9 1108.  25      48 2      79.5  1.62\n10 2815.  37.5    26 1      84.5  1.77\n# ℹ 80 more rows\n\nnames(blank_aug) # check the names for the columns\n\n[1] \"Y\"     \"DOSE\"  \"AGE\"   \"SEX\"   \"WT\"    \"HT\"    \".pred\"\n\n# Calculate the RMSE of the blank model\nrmse_blank &lt;- rmse(data = blank_aug,\n             truth = Y,\n             estimate = .pred)\n  print(rmse_blank) # Evaluate RMSE based on the results\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        948.\n\n\nThe RMSE for the single predictor model, full model, and null model are 560, 520, and 993 respectively. This is not equal to the values found by Dr. Handel, however I did set the seed in the initial step. The RMSE of both the full and single predictor models are similar, with a difference of 60, while the RMSE for the null model is much greater than both models including predictors. The null model has an RMSE that with a difference of 433 and 393 for the single predictor and full models, respectively. This reflects that both models that contain predictors are better at predicting values based on the original observations, than the null model is at predicting the observations. This means that both models including predictors are better than random models, and capture some trend using linear regression. ### Using cross validation to evaluate linear models I will now use cross validation to evaluate the linear models and null model that were produced. Cross validation is a re-sampling method to measure model performance while accounting for the variance-bias trade off. Here, we will use a 10-fold cross validation method, which compares the train and test data 10 times (using different subsamples) using RMSE to check for consistancy in model predictions. I start by specifying the workflow for the cross validation method. Then I will use the fit_resamples function to perform the CV fit. I will use RMSE to compare each models’ CV fit.\n\n# Single Predictor Linear Model Cross Validation\nfolds &lt;- vfold_cv(trial_data5, v = 10)\nsingle_cv_wf &lt;- \n  workflow() %&gt;% #define an object for the cv workflow \n  add_model(single_linreg) %&gt;% # add in the previous linear model\n  add_recipe(single_rec) # specify the formula for the first linear model\n\nsingle_fit_cv &lt;- \n  single_cv_wf %&gt;% # apply cv workflow to an object for the cv fit\n  fit_resamples(folds) # specify the number of folds for the cv\nprint(single_fit_cv)\n\n# Resampling results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits           id     .metrics         .notes          \n   &lt;list&gt;           &lt;chr&gt;  &lt;list&gt;           &lt;list&gt;          \n 1 &lt;split [108/12]&gt; Fold01 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 2 &lt;split [108/12]&gt; Fold02 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 3 &lt;split [108/12]&gt; Fold03 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 4 &lt;split [108/12]&gt; Fold04 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 5 &lt;split [108/12]&gt; Fold05 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 6 &lt;split [108/12]&gt; Fold06 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 7 &lt;split [108/12]&gt; Fold07 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 8 &lt;split [108/12]&gt; Fold08 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 9 &lt;split [108/12]&gt; Fold09 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n10 &lt;split [108/12]&gt; Fold10 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n\n# Examine rmse of the cv fit\nrmse_values1 &lt;- single_fit_cv %&gt;%\n  collect_metrics() %&gt;% # get the metrics for all of the re-sampled folds\n  filter(.metric == \"rmse\") # filter by the rmse values only\nprint(rmse_values1)\n\n# A tibble: 1 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    663.    10    52.6 Preprocessor1_Model1\n\n# Full Linear Model Cross Validation\nfull_cv_wf &lt;- \n  workflow() %&gt;% #define an object for the cv workflow \n  add_model(full_linreg) %&gt;% # add in the previous linear model\n  add_recipe(full_rec) # specify the formula for the first linear model\n\nfull_fit_cv &lt;- \n  full_cv_wf %&gt;% # apply cv workflow to an object for the cv fit\n  fit_resamples(folds) # specify the number of folds for the cv\n\n# Examine rmse of the cv fit\nrmse_values2 &lt;- full_fit_cv %&gt;%\n  collect_metrics() %&gt;% # get the metrics for all of the re-sampled folds\n  filter(.metric == \"rmse\") # filter by the rmse values only\nprint(rmse_values2)\n\n# A tibble: 1 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    619.    10    46.7 Preprocessor1_Model1\n\n# Null Model Cross Validation\nnull_cv_wf &lt;- \n  workflow() %&gt;% #define an object for the cv workflow \n  add_model(blank_model) %&gt;% # add blank model in\n  add_recipe(blank_rec)\n\nnull_fit_cv &lt;- \n  null_cv_wf %&gt;% # apply cv workflow to an object for the cv fit\n  fit_resamples(folds) # specify the number of folds for the cv\n\n→ A | warning: A correlation computation is required, but `estimate` is constant and has 0 standard deviation, resulting in a divide by 0 error. `NA` will be returned.\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\n# Examine rmse of the cv fit\nrmse_values3 &lt;- null_fit_cv %&gt;%\n  collect_metrics() %&gt;% # get the metrics for all of the re-sampled folds\n  filter(.metric == \"rmse\") # filter by the rmse values only\nprint(rmse_values3)\n\n# A tibble: 1 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    948.    10    63.7 Preprocessor1_Model1\n\n\nThe mean RMSE for both models including predictors greatly increased, while the mean RMSE for the null model stayed nearly the same. For the model including a single predictor, the RMSE increased by 99 and the full model RMSE increased by 97. Both models had an rmse value increase by approximately the same magnitude. The standard error for all three models (including the null) are very similar (58, 53, and 55), which demonstrates consistency between models despite varying numbers of predictors being used.\nLastly, I will run the code again with a different seed to see if the cross validation and rmse values change.\n\nset.seed(333)\n# Single Predictor Linear Model Cross Validation\nfolds &lt;- vfold_cv(trial_data5, v = 10)\nsingle_cv_wf &lt;- \n  workflow() %&gt;% #define an object for the cv workflow \n  add_model(single_linreg) %&gt;% # add in the previous linear model\n  add_recipe(single_rec) # specify the formula for the first linear model\n\nsingle_fit_cv &lt;- \n  single_cv_wf %&gt;% # apply cv workflow to an object for the cv fit\n  fit_resamples(folds) # specify the number of folds for the cv\nprint(single_fit_cv)\n\n# Resampling results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits           id     .metrics         .notes          \n   &lt;list&gt;           &lt;chr&gt;  &lt;list&gt;           &lt;list&gt;          \n 1 &lt;split [108/12]&gt; Fold01 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 2 &lt;split [108/12]&gt; Fold02 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 3 &lt;split [108/12]&gt; Fold03 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 4 &lt;split [108/12]&gt; Fold04 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 5 &lt;split [108/12]&gt; Fold05 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 6 &lt;split [108/12]&gt; Fold06 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 7 &lt;split [108/12]&gt; Fold07 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 8 &lt;split [108/12]&gt; Fold08 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 9 &lt;split [108/12]&gt; Fold09 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n10 &lt;split [108/12]&gt; Fold10 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n\n# Examine rmse of the cv fit\nrmse_values1 &lt;- single_fit_cv %&gt;%\n  collect_metrics() %&gt;% # get the metrics for all of the re-sampled folds\n  filter(.metric == \"rmse\") # filter by the rmse values only\nprint(rmse_values1)\n\n# A tibble: 1 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    669.    10    28.3 Preprocessor1_Model1\n\n# Full Linear Model Cross Validation\nfull_cv_wf &lt;- \n  workflow() %&gt;% #define an object for the cv workflow \n  add_model(full_linreg) %&gt;% # add in the previous linear model\n  add_recipe(full_rec) # specify the formula for the first linear model\n\nfull_fit_cv &lt;- \n  full_cv_wf %&gt;% # apply cv workflow to an object for the cv fit\n  fit_resamples(folds) # specify the number of folds for the cv\n\n# Examine rmse of the cv fit\nrmse_values2 &lt;- full_fit_cv %&gt;%\n  collect_metrics() %&gt;% # get the metrics for all of the re-sampled folds\n  filter(.metric == \"rmse\") # filter by the rmse values only\nprint(rmse_values2)\n\n# A tibble: 1 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    606.    10    47.7 Preprocessor1_Model1\n\n# Null Model Cross Validation\nnull_cv_wf &lt;- \n  workflow() %&gt;% #define an object for the cv workflow \n  add_model(blank_model) %&gt;% # add blank model in\n  add_recipe(blank_rec)\n\nnull_fit_cv &lt;- \n  null_cv_wf %&gt;% # apply cv workflow to an object for the cv fit\n  fit_resamples(folds) # specify the number of folds for the cv\n\n→ A | warning: A correlation computation is required, but `estimate` is constant and has 0 standard deviation, resulting in a divide by 0 error. `NA` will be returned.\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\n# Examine rmse of the cv fit\nrmse_values3 &lt;- null_fit_cv %&gt;%\n  collect_metrics() %&gt;% # get the metrics for all of the re-sampled folds\n  filter(.metric == \"rmse\") # filter by the rmse values only\nprint(rmse_values3)\n\n# A tibble: 1 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    953.    10    40.7 Preprocessor1_Model1\n\n\nThe RMSE values for this cross validation are slightly lower than the previous; 669 for the single predictor model, 606 for the full model and 953 for the null model. The standard errors for all three fits have greatly decreased to 28, 48, and 41 respectively. Those rmse values with lower se values are likely a better reflection of model performance than the rmse values in the previous cv (with higher se)."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-predictions",
    "href": "fitting-exercise/fitting-exercise.html#model-predictions",
    "title": "Fitting Exercise",
    "section": "Model Predictions",
    "text": "Model Predictions\nI will plot the observed and predicted values from the first 3 models with all of the training data. I will create a data frame with these values first and add a label to indicate the model.\n\n# set seed for reproducibility\nset.seed(rngseed)\n\n# create data frame with the observed values and 3 sets of predicted values \nplotdata &lt;- data.frame(\n  observed = c(train_data2$Y), \n  predicted_null = c(blank_aug$.pred), \n  predicted_model1 = c(single_aug$.pred), \n  predicted_model2 = c(full_aug$.pred), \n  model = rep(c(\"null model\", \"model 1\", \"model 2\"), each = nrow(train_data2))) # add label indicating the model\nplotdata\n\n    observed predicted_null predicted_model1 predicted_model2      model\n1    3004.21       2509.171         3206.650         3303.028 null model\n2    1346.62       2509.171         1871.052         1952.556 null model\n3    2771.69       2509.171         2538.851         2744.878 null model\n4    2027.60       2509.171         1871.052         2081.182 null model\n5    2353.40       2509.171         3206.650         2894.205 null model\n6     826.43       2509.171         1871.052         1264.763 null model\n7    3865.79       2509.171         1871.052         2428.627 null model\n8    3126.37       2509.171         1871.052         1976.185 null model\n9    1108.17       2509.171         1871.052         1561.336 null model\n10   2815.26       2509.171         2538.851         2548.685 null model\n11   1788.89       2509.171         1871.052         1575.912 null model\n12   1374.48       2509.171         1871.052         1922.814 null model\n13   2485.00       2509.171         3206.650         2361.116 null model\n14   3458.43       2509.171         3206.650         3281.325 null model\n15   1439.57       2509.171         1871.052         1978.826 null model\n16   2532.10       2509.171         1871.052         2253.618 null model\n17   1948.80       2509.171         3206.650         3422.975 null model\n18   2978.20       2509.171         3206.650         2907.248 null model\n19   1800.79       2509.171         2538.851         2449.336 null model\n20   2610.00       2509.171         3206.650         3245.884 null model\n21   4451.84       2509.171         3206.650         3956.416 null model\n22   3306.15       2509.171         3206.650         3204.047 null model\n23   1451.50       2509.171         1871.052         1267.688 null model\n24   3462.59       2509.171         2538.851         2808.324 null model\n25   2177.20       2509.171         3206.650         3163.879 null model\n26   3751.90       2509.171         3206.650         3054.970 null model\n27   2278.97       2509.171         3206.650         2431.811 null model\n28   1175.69       2509.171         1871.052         1485.125 null model\n29   1490.93       2509.171         1871.052         1798.728 null model\n30   1886.48       2509.171         1871.052         2022.501 null model\n31   3777.20       2509.171         3206.650         2776.584 null model\n32   3609.33       2509.171         3206.650         3549.538 null model\n33   2654.70       2509.171         1871.052         2019.776 null model\n34   2063.43       2509.171         1871.052         1314.893 null model\n35   2149.61       2509.171         1871.052         2097.371 null model\n36   2193.20       2509.171         1871.052         1728.261 null model\n37   2372.70       2509.171         3206.650         3183.098 null model\n38   4493.01       2509.171         3206.650         3701.456 null model\n39   1810.59       2509.171         1871.052         2157.603 null model\n40   1666.10       2509.171         1871.052         1769.537 null model\n41   2638.81       2509.171         1871.052         1962.071 null model\n42   1731.80       2509.171         1871.052         2214.390 null model\n43   1423.70       2509.171         1871.052         1860.657 null model\n44   4378.37       2509.171         3206.650         3909.195 null model\n45   3243.29       2509.171         3206.650         3301.437 null model\n46   3774.00       2509.171         3206.650         3437.942 null model\n47   2336.89       2509.171         1871.052         2024.359 null model\n48   1712.00       2509.171         1871.052         2194.708 null model\n49   3239.66       2509.171         3206.650         3436.449 null model\n50   3193.98       2509.171         3206.650         3464.606 null model\n51   2795.65       2509.171         1871.052         2416.191 null model\n52   2572.45       2509.171         3206.650         2855.525 null model\n53   2008.52       2509.171         2538.851         2167.618 null model\n54   3507.10       2509.171         3206.650         3527.530 null model\n55   1958.27       2509.171         1871.052         2275.623 null model\n56   1898.00       2509.171         1871.052         1687.029 null model\n57   3644.37       2509.171         3206.650         2814.220 null model\n58   2092.89       2509.171         1871.052         2047.547 null model\n59   2472.90       2509.171         3206.650         3283.833 null model\n60   1288.64       2509.171         1871.052         1958.242 null model\n61   3733.10       2509.171         3206.650         3078.806 null model\n62   1392.78       2509.171         1871.052         1927.145 null model\n63   1761.62       2509.171         1871.052         1346.855 null model\n64   3037.39       2509.171         3206.650         3350.018 null model\n65   1474.60       2509.171         1871.052         1711.456 null model\n66   2345.50       2509.171         3206.650         3263.395 null model\n67   4984.57       2509.171         3206.650         3367.617 null model\n68    997.89       2509.171         1871.052         1469.488 null model\n69   2748.86       2509.171         2538.851         2517.525 null model\n70   1853.91       2509.171         1871.052         2158.730 null model\n71   2036.20       2509.171         3206.650         2786.723 null model\n72   2423.89       2509.171         2538.851         2892.948 null model\n73   1935.24       2509.171         1871.052         2210.778 null model\n74   2154.56       2509.171         2538.851         2424.827 null model\n75   1464.29       2509.171         1871.052         1719.560 null model\n76   3007.20       2509.171         1871.052         1690.728 null model\n77   3622.80       2509.171         3206.650         3029.952 null model\n78   2789.70       2509.171         3206.650         3213.928 null model\n79   1424.00       2509.171         1871.052         1406.861 null model\n80   2667.02       2509.171         3206.650         2874.060 null model\n81   1967.61       2509.171         1871.052         2295.337 null model\n82   2471.60       2509.171         3206.650         3010.616 null model\n83   2690.52       2509.171         1871.052         1628.400 null model\n84   2746.20       2509.171         3206.650         3589.721 null model\n85   3593.55       2509.171         3206.650         2918.086 null model\n86   1625.46       2509.171         1871.052         1694.713 null model\n87   1067.56       2509.171         1871.052         1775.419 null model\n88   5606.58       2509.171         3206.650         3211.962 null model\n89   3408.61       2509.171         3206.650         3490.975 null model\n90   2996.40       2509.171         3206.650         3283.515 null model\n91   3004.21       2509.171         3206.650         3303.028    model 1\n92   1346.62       2509.171         1871.052         1952.556    model 1\n93   2771.69       2509.171         2538.851         2744.878    model 1\n94   2027.60       2509.171         1871.052         2081.182    model 1\n95   2353.40       2509.171         3206.650         2894.205    model 1\n96    826.43       2509.171         1871.052         1264.763    model 1\n97   3865.79       2509.171         1871.052         2428.627    model 1\n98   3126.37       2509.171         1871.052         1976.185    model 1\n99   1108.17       2509.171         1871.052         1561.336    model 1\n100  2815.26       2509.171         2538.851         2548.685    model 1\n101  1788.89       2509.171         1871.052         1575.912    model 1\n102  1374.48       2509.171         1871.052         1922.814    model 1\n103  2485.00       2509.171         3206.650         2361.116    model 1\n104  3458.43       2509.171         3206.650         3281.325    model 1\n105  1439.57       2509.171         1871.052         1978.826    model 1\n106  2532.10       2509.171         1871.052         2253.618    model 1\n107  1948.80       2509.171         3206.650         3422.975    model 1\n108  2978.20       2509.171         3206.650         2907.248    model 1\n109  1800.79       2509.171         2538.851         2449.336    model 1\n110  2610.00       2509.171         3206.650         3245.884    model 1\n111  4451.84       2509.171         3206.650         3956.416    model 1\n112  3306.15       2509.171         3206.650         3204.047    model 1\n113  1451.50       2509.171         1871.052         1267.688    model 1\n114  3462.59       2509.171         2538.851         2808.324    model 1\n115  2177.20       2509.171         3206.650         3163.879    model 1\n116  3751.90       2509.171         3206.650         3054.970    model 1\n117  2278.97       2509.171         3206.650         2431.811    model 1\n118  1175.69       2509.171         1871.052         1485.125    model 1\n119  1490.93       2509.171         1871.052         1798.728    model 1\n120  1886.48       2509.171         1871.052         2022.501    model 1\n121  3777.20       2509.171         3206.650         2776.584    model 1\n122  3609.33       2509.171         3206.650         3549.538    model 1\n123  2654.70       2509.171         1871.052         2019.776    model 1\n124  2063.43       2509.171         1871.052         1314.893    model 1\n125  2149.61       2509.171         1871.052         2097.371    model 1\n126  2193.20       2509.171         1871.052         1728.261    model 1\n127  2372.70       2509.171         3206.650         3183.098    model 1\n128  4493.01       2509.171         3206.650         3701.456    model 1\n129  1810.59       2509.171         1871.052         2157.603    model 1\n130  1666.10       2509.171         1871.052         1769.537    model 1\n131  2638.81       2509.171         1871.052         1962.071    model 1\n132  1731.80       2509.171         1871.052         2214.390    model 1\n133  1423.70       2509.171         1871.052         1860.657    model 1\n134  4378.37       2509.171         3206.650         3909.195    model 1\n135  3243.29       2509.171         3206.650         3301.437    model 1\n136  3774.00       2509.171         3206.650         3437.942    model 1\n137  2336.89       2509.171         1871.052         2024.359    model 1\n138  1712.00       2509.171         1871.052         2194.708    model 1\n139  3239.66       2509.171         3206.650         3436.449    model 1\n140  3193.98       2509.171         3206.650         3464.606    model 1\n141  2795.65       2509.171         1871.052         2416.191    model 1\n142  2572.45       2509.171         3206.650         2855.525    model 1\n143  2008.52       2509.171         2538.851         2167.618    model 1\n144  3507.10       2509.171         3206.650         3527.530    model 1\n145  1958.27       2509.171         1871.052         2275.623    model 1\n146  1898.00       2509.171         1871.052         1687.029    model 1\n147  3644.37       2509.171         3206.650         2814.220    model 1\n148  2092.89       2509.171         1871.052         2047.547    model 1\n149  2472.90       2509.171         3206.650         3283.833    model 1\n150  1288.64       2509.171         1871.052         1958.242    model 1\n151  3733.10       2509.171         3206.650         3078.806    model 1\n152  1392.78       2509.171         1871.052         1927.145    model 1\n153  1761.62       2509.171         1871.052         1346.855    model 1\n154  3037.39       2509.171         3206.650         3350.018    model 1\n155  1474.60       2509.171         1871.052         1711.456    model 1\n156  2345.50       2509.171         3206.650         3263.395    model 1\n157  4984.57       2509.171         3206.650         3367.617    model 1\n158   997.89       2509.171         1871.052         1469.488    model 1\n159  2748.86       2509.171         2538.851         2517.525    model 1\n160  1853.91       2509.171         1871.052         2158.730    model 1\n161  2036.20       2509.171         3206.650         2786.723    model 1\n162  2423.89       2509.171         2538.851         2892.948    model 1\n163  1935.24       2509.171         1871.052         2210.778    model 1\n164  2154.56       2509.171         2538.851         2424.827    model 1\n165  1464.29       2509.171         1871.052         1719.560    model 1\n166  3007.20       2509.171         1871.052         1690.728    model 1\n167  3622.80       2509.171         3206.650         3029.952    model 1\n168  2789.70       2509.171         3206.650         3213.928    model 1\n169  1424.00       2509.171         1871.052         1406.861    model 1\n170  2667.02       2509.171         3206.650         2874.060    model 1\n171  1967.61       2509.171         1871.052         2295.337    model 1\n172  2471.60       2509.171         3206.650         3010.616    model 1\n173  2690.52       2509.171         1871.052         1628.400    model 1\n174  2746.20       2509.171         3206.650         3589.721    model 1\n175  3593.55       2509.171         3206.650         2918.086    model 1\n176  1625.46       2509.171         1871.052         1694.713    model 1\n177  1067.56       2509.171         1871.052         1775.419    model 1\n178  5606.58       2509.171         3206.650         3211.962    model 1\n179  3408.61       2509.171         3206.650         3490.975    model 1\n180  2996.40       2509.171         3206.650         3283.515    model 1\n181  3004.21       2509.171         3206.650         3303.028    model 2\n182  1346.62       2509.171         1871.052         1952.556    model 2\n183  2771.69       2509.171         2538.851         2744.878    model 2\n184  2027.60       2509.171         1871.052         2081.182    model 2\n185  2353.40       2509.171         3206.650         2894.205    model 2\n186   826.43       2509.171         1871.052         1264.763    model 2\n187  3865.79       2509.171         1871.052         2428.627    model 2\n188  3126.37       2509.171         1871.052         1976.185    model 2\n189  1108.17       2509.171         1871.052         1561.336    model 2\n190  2815.26       2509.171         2538.851         2548.685    model 2\n191  1788.89       2509.171         1871.052         1575.912    model 2\n192  1374.48       2509.171         1871.052         1922.814    model 2\n193  2485.00       2509.171         3206.650         2361.116    model 2\n194  3458.43       2509.171         3206.650         3281.325    model 2\n195  1439.57       2509.171         1871.052         1978.826    model 2\n196  2532.10       2509.171         1871.052         2253.618    model 2\n197  1948.80       2509.171         3206.650         3422.975    model 2\n198  2978.20       2509.171         3206.650         2907.248    model 2\n199  1800.79       2509.171         2538.851         2449.336    model 2\n200  2610.00       2509.171         3206.650         3245.884    model 2\n201  4451.84       2509.171         3206.650         3956.416    model 2\n202  3306.15       2509.171         3206.650         3204.047    model 2\n203  1451.50       2509.171         1871.052         1267.688    model 2\n204  3462.59       2509.171         2538.851         2808.324    model 2\n205  2177.20       2509.171         3206.650         3163.879    model 2\n206  3751.90       2509.171         3206.650         3054.970    model 2\n207  2278.97       2509.171         3206.650         2431.811    model 2\n208  1175.69       2509.171         1871.052         1485.125    model 2\n209  1490.93       2509.171         1871.052         1798.728    model 2\n210  1886.48       2509.171         1871.052         2022.501    model 2\n211  3777.20       2509.171         3206.650         2776.584    model 2\n212  3609.33       2509.171         3206.650         3549.538    model 2\n213  2654.70       2509.171         1871.052         2019.776    model 2\n214  2063.43       2509.171         1871.052         1314.893    model 2\n215  2149.61       2509.171         1871.052         2097.371    model 2\n216  2193.20       2509.171         1871.052         1728.261    model 2\n217  2372.70       2509.171         3206.650         3183.098    model 2\n218  4493.01       2509.171         3206.650         3701.456    model 2\n219  1810.59       2509.171         1871.052         2157.603    model 2\n220  1666.10       2509.171         1871.052         1769.537    model 2\n221  2638.81       2509.171         1871.052         1962.071    model 2\n222  1731.80       2509.171         1871.052         2214.390    model 2\n223  1423.70       2509.171         1871.052         1860.657    model 2\n224  4378.37       2509.171         3206.650         3909.195    model 2\n225  3243.29       2509.171         3206.650         3301.437    model 2\n226  3774.00       2509.171         3206.650         3437.942    model 2\n227  2336.89       2509.171         1871.052         2024.359    model 2\n228  1712.00       2509.171         1871.052         2194.708    model 2\n229  3239.66       2509.171         3206.650         3436.449    model 2\n230  3193.98       2509.171         3206.650         3464.606    model 2\n231  2795.65       2509.171         1871.052         2416.191    model 2\n232  2572.45       2509.171         3206.650         2855.525    model 2\n233  2008.52       2509.171         2538.851         2167.618    model 2\n234  3507.10       2509.171         3206.650         3527.530    model 2\n235  1958.27       2509.171         1871.052         2275.623    model 2\n236  1898.00       2509.171         1871.052         1687.029    model 2\n237  3644.37       2509.171         3206.650         2814.220    model 2\n238  2092.89       2509.171         1871.052         2047.547    model 2\n239  2472.90       2509.171         3206.650         3283.833    model 2\n240  1288.64       2509.171         1871.052         1958.242    model 2\n241  3733.10       2509.171         3206.650         3078.806    model 2\n242  1392.78       2509.171         1871.052         1927.145    model 2\n243  1761.62       2509.171         1871.052         1346.855    model 2\n244  3037.39       2509.171         3206.650         3350.018    model 2\n245  1474.60       2509.171         1871.052         1711.456    model 2\n246  2345.50       2509.171         3206.650         3263.395    model 2\n247  4984.57       2509.171         3206.650         3367.617    model 2\n248   997.89       2509.171         1871.052         1469.488    model 2\n249  2748.86       2509.171         2538.851         2517.525    model 2\n250  1853.91       2509.171         1871.052         2158.730    model 2\n251  2036.20       2509.171         3206.650         2786.723    model 2\n252  2423.89       2509.171         2538.851         2892.948    model 2\n253  1935.24       2509.171         1871.052         2210.778    model 2\n254  2154.56       2509.171         2538.851         2424.827    model 2\n255  1464.29       2509.171         1871.052         1719.560    model 2\n256  3007.20       2509.171         1871.052         1690.728    model 2\n257  3622.80       2509.171         3206.650         3029.952    model 2\n258  2789.70       2509.171         3206.650         3213.928    model 2\n259  1424.00       2509.171         1871.052         1406.861    model 2\n260  2667.02       2509.171         3206.650         2874.060    model 2\n261  1967.61       2509.171         1871.052         2295.337    model 2\n262  2471.60       2509.171         3206.650         3010.616    model 2\n263  2690.52       2509.171         1871.052         1628.400    model 2\n264  2746.20       2509.171         3206.650         3589.721    model 2\n265  3593.55       2509.171         3206.650         2918.086    model 2\n266  1625.46       2509.171         1871.052         1694.713    model 2\n267  1067.56       2509.171         1871.052         1775.419    model 2\n268  5606.58       2509.171         3206.650         3211.962    model 2\n269  3408.61       2509.171         3206.650         3490.975    model 2\n270  2996.40       2509.171         3206.650         3283.515    model 2\n\n\nI will use the new data frame to create a visualization.\n\n# create a visual representation\nggplot(plotdata, aes(x = observed)) +\n  geom_point(aes(y = predicted_null, color = \"null model\"), shape = 1) +\n  geom_point(aes(y = predicted_model1, color = \"model 1\"), shape = 2) +\n  geom_point(aes(y = predicted_model2, color = \"model 2\"), shape = 3) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") + #add the 45 degree line\n  xlim(0, 5000) + #limit the x-axis values\n  ylim(0, 5000) + #limit the y-axis values\n  labs(x = \"Observed Values\", y = \"Predicted Values\")\n\nWarning: Removed 3 rows containing missing values (`geom_point()`).\nRemoved 3 rows containing missing values (`geom_point()`).\nRemoved 3 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nThe predictions from the null model are a horizontal line because each prediction is just the mean observation. The predictions from model 1 with the DOSE variable only are shown in three horizontal lines, which makes sense because the DOSE variable has 3 discrete values. The predicted values should be the same for each of those 3 dosage values because there are only 3 original values to predict. The predictions for model 2 with all variables is the best and shows a lot of scatter that seems to follow a pattern along the 45 degree line.\nTo determine if there is a pattern in the residuals, I will plot the predicted values against the residuals. The formula for finding the residual is just (predicted-observed). I will create a new data frame with the predicted values and residuals first.\n\n# create data frame with predictions and residuals for model 2\nplotresiduals &lt;- data.frame(\n  predicted_model2 = c(full_aug$.pred), \n  residuals = c(full_aug$.pred - full_aug$Y)) #calculate residuals by predicted - observed\nplotresiduals\n\n   predicted_model2   residuals\n1          3303.028   298.81777\n2          1952.556   605.93586\n3          2744.878   -26.81172\n4          2081.182    53.58237\n5          2894.205   540.80500\n6          1264.763   438.33334\n7          2428.627 -1437.16314\n8          1976.185 -1150.18459\n9          1561.336   453.16614\n10         2548.685  -266.57463\n11         1575.912  -212.97752\n12         1922.814   548.33383\n13         2361.116  -123.88422\n14         3281.325  -177.10537\n15         1978.826   539.25608\n16         2253.618  -278.48151\n17         3422.975  1474.17465\n18         2907.248   -70.95170\n19         2449.336   648.54599\n20         3245.884   635.88439\n21         3956.416  -495.42354\n22         3204.047  -102.10297\n23         1267.688  -183.81229\n24         2808.324  -654.26599\n25         3163.879   986.67861\n26         3054.970  -696.93001\n27         2431.811   152.84116\n28         1485.125   309.43542\n29         1798.728   307.79786\n30         2022.501   136.02115\n31         2776.584 -1000.61616\n32         3549.538   -59.79222\n33         2019.776  -634.92395\n34         1314.893  -748.53729\n35         2097.371   -52.23881\n36         1728.261  -464.93852\n37         3183.098   810.39781\n38         3701.456  -791.55415\n39         2157.603   347.01261\n40         1769.537   103.43746\n41         1962.071  -676.73934\n42         2214.390   482.58989\n43         1860.657   436.95692\n44         3909.195  -469.17471\n45         3301.437    58.14672\n46         3437.942  -336.05811\n47         2024.359  -312.53101\n48         2194.708   482.70770\n49         3436.449   196.78909\n50         3464.606   270.62635\n51         2416.191  -379.45893\n52         2855.525   283.07494\n53         2167.618   159.09793\n54         3527.530    20.43010\n55         2275.623   317.35262\n56         1687.029  -210.97096\n57         2814.220  -830.14965\n58         2047.547   -45.34339\n59         3283.833   810.93293\n60         1958.242   669.60182\n61         3078.806  -654.29438\n62         1927.145   534.36510\n63         1346.855  -414.76528\n64         3350.018   312.62796\n65         1711.456   236.85619\n66         3263.395   917.89451\n67         3367.617 -1616.95322\n68         1469.488   471.59820\n69         2517.525  -231.33509\n70         2158.730   304.81990\n71         2786.723   750.52308\n72         2892.948   469.05781\n73         2210.778   275.53761\n74         2424.827   270.26672\n75         1719.560   255.27023\n76         1690.728 -1316.47183\n77         3029.952  -592.84802\n78         3213.928   424.22801\n79         1406.861   -17.13949\n80         2874.060   207.04015\n81         2295.337   327.72724\n82         3010.616   539.01559\n83         1628.400 -1062.12038\n84         3589.721   843.52106\n85         2918.086  -675.46376\n86         1694.713    69.25323\n87         1775.419   707.85896\n88         3211.962 -2394.61828\n89         3490.975    82.36480\n90         3283.515   287.11531\n\n\nI will plot the new residual values to look for any patterns.\n\n# plot predictions versus residuals for model 2\nggplot(plotresiduals, aes(x=predicted_model2, y=residuals)) + \n  geom_point() + \n  geom_abline(slope = 0, intercept = 0, color = \"pink\", size = 1.5) + #add straight line at 0\n  ylim(-2000,2000) + #make sure y-axis goes the same amount in positive and negative direction\n  labs(x= \"Predicted Values\", y= \"Residuals\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nAs Dr. Handel suggested, I see a pattern in these residuals because there are more and higher negative residuals compared to positive residuals. There are 6 observations less than -1000, but there is only 1 observation more than 1000. The positive residuals are grouped together more, while the negative residuals are more spaced out. This could be because there is important information missing or the model is too simple."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-predictions-and-uncertainty",
    "href": "fitting-exercise/fitting-exercise.html#model-predictions-and-uncertainty",
    "title": "Fitting Exercise",
    "section": "Model predictions and uncertainty",
    "text": "Model predictions and uncertainty\nTo determine uncertainty in the predictions, I will use a bootstrap method to sample the data 100 times and fit the model to each set of predictions.\n\n# set the seed for reproducibility\nset.seed(rngseed)\n\n# create 100 bootstraps with the training data\nbootstraps &lt;- bootstraps(train_data2, times = 100)\n\n# create empty vector to store predictions list \npreds_bs &lt;- vector(\"list\", length = length(bootstraps))\n\n# write a loop to fit the model to each bootstrap and make predictions\nfor (i in 1:length(bootstraps)) {\n  \n  bootstrap_sample &lt;- analysis(bootstraps$splits[[i]])  # isolate the bootstrap sample\n  \n  model &lt;- lm(Y ~ DOSE + AGE + HT + WT + SEX, data = bootstrap_sample) # fit the model using the bootstrap sample\n  \n  predictions &lt;- predict(model, newdata = train_data2) # make predictions with the training data\n  \n  preds_bs[[i]] &lt;- predictions # store predictions in the empty vector\n}\n\n# find an individual bootstrap sample \nsample &lt;- analysis(bootstraps$splits[[i]])\nsample\n\n         Y DOSE AGE SEX    WT       HT\n1   826.43 25.0  30   1 105.1 1.879883\n2  3593.55 50.0  23   1  96.3 1.820081\n3  3593.55 50.0  23   1  96.3 1.820081\n4  3609.33 50.0  29   1  68.8 1.810025\n5  3622.80 50.0  32   1  92.2 1.799898\n6  1948.80 50.0  39   1  75.7 1.780081\n7  2345.50 50.0  31   1  85.9 1.719881\n8   826.43 25.0  30   1 105.1 1.879883\n9  2092.89 25.0  39   2  58.2 1.619872\n10 1346.62 25.0  41   1  81.0 1.749966\n11 2008.52 37.5  39   1  99.1 1.809982\n12 2667.02 50.0  45   2  80.7 1.659881\n13 1788.89 25.0  46   2  77.4 1.649993\n14 1288.64 25.0  28   1  77.5 1.819881\n15 2149.61 25.0  31   1  71.8 1.809847\n16 2996.40 50.0  26   1  82.1 1.780073\n17 4451.84 50.0  24   1  58.4 1.660126\n18 1731.80 25.0  26   1  72.2 1.700092\n19  826.43 25.0  30   1 105.1 1.879883\n20 1108.17 25.0  48   2  79.5 1.620071\n21 1423.70 25.0  39   1  82.1 1.810010\n22 1800.79 37.5  50   2  69.8 1.640057\n23 3306.15 50.0  38   1  83.4 1.819932\n24 3774.00 50.0  35   1  81.6 1.650067\n25 1666.10 25.0  45   1  92.0 1.690046\n26 1490.93 25.0  41   1  85.8 1.789940\n27 3644.37 50.0  28   1  96.8 1.900156\n28 2532.10 25.0  30   1  71.4 1.679921\n29 2345.50 50.0  31   1  85.9 1.719881\n30 4493.01 50.0  38   1  70.4 1.640153\n31 5606.58 50.0  29   1  85.7 1.770157\n32 1886.48 25.0  47   1  80.3 1.699861\n33 1853.91 25.0  24   1  70.7 1.780164\n34 1800.79 37.5  50   2  69.8 1.640057\n35 1424.00 25.0  44   2  85.4 1.640050\n36 1625.46 25.0  30   1  90.6 1.789882\n37 3458.43 50.0  39   2  69.8 1.520031\n38 1451.50 25.0  36   2  88.2 1.710089\n39 1288.64 25.0  28   1  77.5 1.819881\n40 1800.79 37.5  50   2  69.8 1.640057\n41 1800.79 37.5  50   2  69.8 1.640057\n42 2036.20 50.0  18   1 102.7 1.809949\n43 1935.24 25.0  24   1  70.4 1.740103\n44 1288.64 25.0  28   1  77.5 1.819881\n45 1712.00 25.0  19   1  72.7 1.710081\n46 3751.90 50.0  42   1  92.9 1.760028\n47 2532.10 25.0  30   1  71.4 1.679921\n48 3306.15 50.0  38   1  83.4 1.819932\n49 1067.56 25.0  37   1  85.4 1.820067\n50 1175.69 25.0  33   1  99.3 1.799946\n51 1712.00 25.0  19   1  72.7 1.710081\n52 4451.84 50.0  24   1  58.4 1.660126\n53 2638.81 25.0  24   1  80.4 1.759850\n54 2149.61 25.0  31   1  71.8 1.809847\n55 1666.10 25.0  45   1  92.0 1.690046\n56 4984.57 50.0  47   1  79.5 1.749972\n57 2423.89 37.5  25   1  73.3 1.690144\n58 1800.79 37.5  50   2  69.8 1.640057\n59 3733.10 50.0  34   1  88.0 1.840086\n60  997.89 25.0  43   1  99.8 1.800072\n61 2746.20 50.0  40   1  74.8 1.650143\n62 2690.52 25.0  42   1  94.3 1.769997\n63 2036.20 50.0  18   1 102.7 1.809949\n64 1948.80 50.0  39   1  75.7 1.780081\n65 2177.20 50.0  31   1  88.3 1.759875\n66 2149.61 25.0  31   1  71.8 1.809847\n67 1346.62 25.0  41   1  81.0 1.749966\n68 2336.89 25.0  27   1  74.1 1.829862\n69 2336.89 25.0  27   1  74.1 1.829862\n70 1886.48 25.0  47   1  80.3 1.699861\n71 2815.26 37.5  26   1  84.5 1.770060\n72 3306.15 50.0  38   1  83.4 1.819932\n73 3644.37 50.0  28   1  96.8 1.900156\n74 3239.66 50.0  23   1  72.4 1.840202\n75 3408.61 50.0  39   1  74.2 1.749948\n76 2667.02 50.0  45   2  80.7 1.659881\n77 1935.24 25.0  24   1  70.4 1.740103\n78 2610.00 50.0  25   1  79.8 1.859849\n79 1374.48 25.0  25   1  84.6 1.710058\n80 2372.70 50.0  39   1  89.3 1.719864\n81 1967.61 25.0  22   1  68.7 1.700058\n82 4984.57 50.0  47   1  79.5 1.749972\n83 2336.89 25.0  27   1  74.1 1.829862\n84 1625.46 25.0  30   1  90.6 1.789882\n85 4493.01 50.0  38   1  70.4 1.640153\n86 2471.60 50.0  45   1  93.8 1.780146\n87 1800.79 37.5  50   2  69.8 1.640057\n88 2978.20 50.0  49   1  97.3 1.800026\n89 1451.50 25.0  36   2  88.2 1.710089\n90 3777.20 50.0  37   1 101.8 1.829941\n\n\nNow that I have all of my predictions stored in a vector, I need to convert it to an array, so I can compute the median and 95% confidence intervals for each one.\n\n# create an empty array to store the predictions\nnum_samples &lt;- length(preds_bs)\nnum_datapoints &lt;- length(preds_bs[[1]])  \npreds_array &lt;- array(NA, dim = c(num_samples, num_datapoints))\n\n# fill the array with predictions from bootstrappping\nfor (i in 1:num_samples) {\n  preds_array[i,] &lt;- unlist(preds_bs[[i]])\n}\n\n# find the median and 95% confidence intervals of each prediction\npreds &lt;- preds_array %&gt;%\n          apply(2, quantile,  c(0.05, 0.5, 0.95)) %&gt;%\n          t()\n\nFinally, I will graph the observed values on the x-axis and point estimates from the training data on the y-axis. I will add the median and confidence intervals for the predictions from the bootstrap sampling to the y-axis as well.\n\n# create a data frame with all the necessary variables\nfinaldata &lt;- data.frame(\n  observed = c(train_data2$Y), \n  point_estimates = c(full_aug$.pred),\n  medians = preds[, 2],\n  lower_bound = preds[, 1],\n  upper_bound = preds[, 3]\n)\n\n# create visualization with all 5 variables \nggplot(finaldata, aes(x = observed, y = point_estimates)) +\n  geom_point(color = \"black\") +  \n  geom_point(aes(y = medians), color = \"green\") + \n  geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), width = 0.1, color = \"blue\") + \n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") +  # add 45 degree line\n  xlim(0, 5000) +\n  ylim(0, 5000) +\n  labs(x = \"Observed Values\", y = \"Predicted Values\")\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\nRemoved 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nThis plot shows that our model does a good job of predicted the observed values because most of the point estimates lie around the 45 degree line. I think some of the variation shown in the bootstrap estimates is accounted for by the fact that the DOSE variable has 3 discrete values, so those predicted values will follow 3 horizontal lines as shown in a previous graph. All of the median values from the bootstrap sampling, shown in green, are father away from the 45 degree line than the actual predicted values, shown in black. There are many instances where the confidence interval from the bootstrapping estimate does not contain the point estimate, but some of the confidence intervals contain the point estimates, especially where the point estimates are clustered. I think this graph is evidence that our model is a decent option for this data because the general pattern of point estimates follows the expected 45 degree line. # Rachel continued this section Now we will use the fitted full model to make predictions for the test data. This will allow us to assess the generalizability of the full model that was fitted. I will start by refitting the full linear regression model to both the training and testing data, using the seed set for the previous analysis.\n\n# predictions based on testing data\ntest_pred_aug &lt;- augment(full_lmfit, test_data2) %&gt;% # use augment to make predictions\n  select(Y, .pred) %&gt;% # select columns for plotting\n  rename(test_pred = .pred) # change the name of the predictions column\n\n# predictions based on training data\ntrain_pred_aug &lt;- augment(full_lmfit, train_data2) %&gt;%\n  select(Y, .pred) %&gt;%\n  rename(train_pred = .pred)\n\n# combine prediction columns into one data frame\ncombined_df &lt;- full_join(trial_data5, test_pred_aug, by = \"Y\") %&gt;%\n  full_join(train_pred_aug, by = \"Y\") # use full join to retain all values for Y and trial_data 5 for all of the original Y values\nstr(combined_df) # check the structure\n\n'data.frame':   120 obs. of  8 variables:\n $ Y         : num  2691 2639 2150 1789 3126 ...\n $ DOSE      : num  25 25 25 25 25 25 25 25 25 25 ...\n $ AGE       : num  42 24 31 46 41 27 23 20 23 28 ...\n $ SEX       : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ WT        : num  94.3 80.4 71.8 77.4 64.3 ...\n $ HT        : num  1.77 1.76 1.81 1.65 1.56 ...\n $ test_pred : num  NA NA NA NA NA NA NA NA NA NA ...\n $ train_pred: num  1628 1962 2097 1576 1976 ...\n\n\nNow, we will plot these two model predictions against the original Y observations to visualize if the testing data produced predictions similar to the training data (and if the model in generalizable).\n\n# grap both predictions\ntrain_test_plot &lt;- ggplot(combined_df, aes(x = Y)) +\n  geom_point(aes(y = test_pred, color = \"testing predictions\"), shape = 1) +\n  geom_point(aes(y = train_pred, color = \"training predicitons\"), shape = 2) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") + #add the 45 degree line\n  xlim(0, 5000) + #limit the x-axis values\n  ylim(0, 5000) + #limit the y-axis values\n  labs(x = \"Observed Y Values\", y = \"Predicted Values for Train and Test data\")\nprint(train_test_plot)\n\nWarning: Removed 90 rows containing missing values (`geom_point()`).\n\n\nWarning: Removed 31 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nThe chart above displays that the training data predictions and testing data predictions follow the same pattern. This means that the model captures the same trends that it did on the testing data as when it was fitted using the training data. This means that the model is generalizable when presented with “new” data. However, the pattern in both sets of predictions shows that a trend was not captured. Even though the model is generalizable, it is also under-fitted and may be too flexible. This means that more tuning, additional predictors, or a larger sample size, will help the model fit the unrepresented trend."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#conclusions",
    "href": "fitting-exercise/fitting-exercise.html#conclusions",
    "title": "Fitting Exercise",
    "section": "Conclusions",
    "text": "Conclusions\n\nWe want to make sure that any model we have performs better than the null model. Is that the case?\n\nAccording to the RMSE computations for the single predictor model, full model, and null model, which are 560, 520, and 993 respectively, the models including any predictor are both better than the null model. However, we see in the plot of the predicted values of both models versus the null, that the model including the single predictor is not much better than the null model. The null model shows a single horizontal line of predictions, while the single predictor model shows three horizontal lines of predictions. The points in the single predictor model follow the trend (of the 45 degree line) slightly better than the null model, but with only three possible values for the predictor (DOSE), the overall trends of Y are not captured. When you add in all of the predictors, this allows more trends to be captured. This is shown in the graph of the full model predictions, where the points more closely follow the 45 degree trend line.\n\nDoes model 1 with only dose in the model improve results over the null model? Do the results make sense? Would you consider this model “usable” for any real purpose?\n\nModel 1 with only DOSE as a predictor slightly improves the results compared to the null model. As discussed before, model 1 has a much lower RMSE value and follows the trend line slightly better than the null model. However, because there are only 3 options for dose, it leaves out many trends contributing the the distribution of Y. This is why the single predictor model would not be usable for any real purpose. Although one could use it to predict the Y given DOSE, we learn that many other predictors impact the trends in Y and DOSE might not be the best predictor.\n\nDoes model 2 with all predictors further improve results? Do the results make sense? Would you consider this model “usable” for any real purpose?\n\nModel 2 with all of the predictors does improve the predictions compared to model 1 and the null model. First, the RMSE is lower for the full model than all of the others. Secondly, in the graph, you can see a clear cloud of points following the 45 degree trend line. The full model predictions follow the trend line more closely than all of the other model predictions, showing that the full model fits best. However, there is still a pattern, seen in the residual plot, where higher predicted values are more scattered and contain more outliers. This means that the full model still is not able to capture all of the trends contributing to the observed Y values. This model is still more usable for predicting Y given any of the predictors in the model, because it is more accurate. It must be kept in mind that for larger Y values, the predictive power of the full model likely decreases. This means that it can be used to make predictions for small Y values but not larger ones."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Today I will practice coding by working with the gapminder data from the dslabs package. First I will load the packages that I need by using the library() function.\n\n\n\nlibrary(dslabs)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(dplyr)"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#setting-up-the-packages",
    "href": "coding-exercise/coding-exercise.html#setting-up-the-packages",
    "title": "R Coding Exercise",
    "section": "",
    "text": "library(dslabs)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(dplyr)"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#exploring-gapminder-dataframe",
    "href": "coding-exercise/coding-exercise.html#exploring-gapminder-dataframe",
    "title": "R Coding Exercise",
    "section": "Exploring gapminder dataframe",
    "text": "Exploring gapminder dataframe\n\nhelp(gapminder) ## Viewing help file from gapminder \n\nstarting httpd help server ... done\n\nstr(gapminder) ## Viewing the structure of gapminder\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\nsummary(gapminder) ## Viewing the data summary statistics of gapminder data\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\nclass(gapminder) ## Determining the type of object gapminder is\n\n[1] \"data.frame\""
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#assign-african-countries-to-a-variable-called-africa-data",
    "href": "coding-exercise/coding-exercise.html#assign-african-countries-to-a-variable-called-africa-data",
    "title": "R Coding Exercise",
    "section": "Assign african countries to a variable called africa data",
    "text": "Assign african countries to a variable called africa data\n\nafricadata &lt;- gapminder %&gt;%\n  filter(continent == \"Africa\") \n##I filter the data to only include data from Africa in the new object entitled africadata\n\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n\nThe number of values is correct in the Summary data, so I will continue to creating new objects"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#creating-object-containing-infant_mortality-and-life_expectancy-under-d2",
    "href": "coding-exercise/coding-exercise.html#creating-object-containing-infant_mortality-and-life_expectancy-under-d2",
    "title": "R Coding Exercise",
    "section": "Creating object containing infant_mortality and life_expectancy under d2",
    "text": "Creating object containing infant_mortality and life_expectancy under d2\n\nd2 &lt;- africadata %&gt;%\n  select(life_expectancy, infant_mortality) ##I create an object from africadata that only includes the life expectancy and infant mortality from that object.\n  \nsummary(d2) ##I check to make sure that the object includes the two variables life expectancy and infant mortality only\n\n life_expectancy infant_mortality\n Min.   :13.20   Min.   : 11.40  \n 1st Qu.:48.23   1st Qu.: 62.20  \n Median :53.98   Median : 93.40  \n Mean   :54.38   Mean   : 95.12  \n 3rd Qu.:60.10   3rd Qu.:124.70  \n Max.   :77.60   Max.   :237.40  \n                 NA's   :226"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#creating-object-containing-population-and-life_expectancy-under-d3",
    "href": "coding-exercise/coding-exercise.html#creating-object-containing-population-and-life_expectancy-under-d3",
    "title": "R Coding Exercise",
    "section": "Creating object containing population and life_expectancy under d3",
    "text": "Creating object containing population and life_expectancy under d3\n\nd3 &lt;- africadata %&gt;%\n  select(life_expectancy, population) ##I make a new object from africadata that only includes the life expectancy and population variables\n  \nsummary(d3) ##I check to confirm that the columns are correct\n\n life_expectancy   population       \n Min.   :13.20   Min.   :    41538  \n 1st Qu.:48.23   1st Qu.:  1605232  \n Median :53.98   Median :  5570982  \n Mean   :54.38   Mean   : 12235961  \n 3rd Qu.:60.10   3rd Qu.: 13888152  \n Max.   :77.60   Max.   :182201962  \n                 NA's   :51"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plot-life-expectancy-as-a-funciton-of-infant-mortality",
    "href": "coding-exercise/coding-exercise.html#plot-life-expectancy-as-a-funciton-of-infant-mortality",
    "title": "R Coding Exercise",
    "section": "Plot life expectancy as a funciton of infant mortality",
    "text": "Plot life expectancy as a funciton of infant mortality\n\nlifevim_plot &lt;- ggplot(d2, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. Infant Mortality\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\") ## I use ggplot and the d2 object to plot infant mortality versus life expectancy\n    \n  print(lifevim_plot) ## I print the plot below\n\nWarning: Removed 226 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plot-life-expectancy-as-a-function-of-populaiton-size-using-ggplot2",
    "href": "coding-exercise/coding-exercise.html#plot-life-expectancy-as-a-function-of-populaiton-size-using-ggplot2",
    "title": "R Coding Exercise",
    "section": "Plot life expectancy as a function of populaiton size using ggplot2",
    "text": "Plot life expectancy as a function of populaiton size using ggplot2\n\nlifevpop_plot &lt;- ggplot(d3, aes(x = log(population), y = life_expectancy)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. log(Population)\",\n       x = \"Log(Population)\",\n       y = \"Life Expectancy\") ## I use ggplot to plot the log of population as log(pop) versus life expectancy\n      \n  print(lifevpop_plot) ## I print this plot\n\nWarning: Removed 51 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#looking-at-differences-in-life_expectancy-versus-infant_mortality-by-other-variables",
    "href": "coding-exercise/coding-exercise.html#looking-at-differences-in-life_expectancy-versus-infant_mortality-by-other-variables",
    "title": "R Coding Exercise",
    "section": "Looking at differences in life_expectancy versus infant_mortality by other variables",
    "text": "Looking at differences in life_expectancy versus infant_mortality by other variables\nI begin by looking at differences in infant_morality and life_expectancy by country using the same plot, but with color.\n\nlifevim_plot2 &lt;- ggplot(africadata, aes(x = infant_mortality, y = life_expectancy, color = country)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. Infant Mortality\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\") ##I make a plot using africadata because this includes country as well as infant mortality and life expectancy\n    \n  print(lifevim_plot2) ## I print the plot to check it\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nI observe differences in the rate depending on the country. Next, I will check to made sure the differences are not due to regional trends.\n\nlifevim_plot3 &lt;- ggplot(africadata, aes(x = infant_mortality, y = life_expectancy, color = region)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. Infant Mortality\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\")\n    \n  print(lifevim_plot3)\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nThere are multiple streaks of the same color, but on different linear planes. It seems that country is the determinant of infant mortality and life expectancy, so I do a faceted plot to show eahc individual country and confirm this.\n\nlifevim_plot4 &lt;- ggplot(africadata, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point() +\n  facet_wrap(~country) +\n  labs(title = \"Life Expectancy vs. Infant Mortality by Country\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\") ## ChatGPT offered the facet_wrap function which separately plots the country variable by value\nprint(lifevim_plot4)\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nWith this plot, you can see that each country has a streat that decreases over time. The explaination for the streaks in the life expectancy versus infant mortality trends is that infant mortality differs by country, which leads life expectancy to also differ by African country. The rates change over the timeframe displayed."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#now-i-will-confirm-that-the-life_expectancy-and-population-streaks-are-also-due-to-differeces-in-the-country",
    "href": "coding-exercise/coding-exercise.html#now-i-will-confirm-that-the-life_expectancy-and-population-streaks-are-also-due-to-differeces-in-the-country",
    "title": "R Coding Exercise",
    "section": "Now, I will confirm that the life_expectancy and population streaks are also due to differeces in the country",
    "text": "Now, I will confirm that the life_expectancy and population streaks are also due to differeces in the country\n\nlifevpop_plot2 &lt;- ggplot(africadata, aes(x = log(population), y = life_expectancy, color = country)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. log(Population) by Country\",\n       x = \"Log(Population)\",\n       y = \"Life Expectancy\")\n      \n  print(lifevpop_plot2)\n\nWarning: Removed 51 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nEach country contains a different colored streak, confirming that life expectancy is positively related to population depending on each country. This is because the life expectancy differs for each country, resulting in different population sums, despite having a similar overall trend.\nI will now examine differences in the plot by year to see if this differs by country. I first do this with the life expectancy versus infant mortality plot\n\nlifevim_plot5 &lt;- ggplot(africadata, aes(x = infant_mortality, y = life_expectancy, color = country)) +\n  geom_point() +\n   facet_grid(year ~ ., scales = \"free_y\") +\n  labs(title = \"Life Expectancy vs. Infant Mortality stratified by year and colored by country\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\") ## Adding the year variable to the facet grid allow year to be seperated. ChatGPT suggested using scaled= free_y as to not make a seperate plot for eahc year, but display the differences on the same plot\n    \n  print(lifevim_plot5)\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nWith each line representing a year, it seems that the life expectancy moves upwards each year. I will now confirm that this is also the case for the life expectancy versus population.\n\nlifevpop_plot3 &lt;- ggplot(africadata, aes(x = log(population), y = life_expectancy, color = country)) +\n  geom_point() +\n   facet_grid(year ~ ., scales = \"free_y\") +\n  labs(title = \"Life Expectancy vs. log(Population) by Country\",\n       x = \"Log(Population)\",\n       y = \"Life Expectancy\")\n      \n  print(lifevpop_plot3)\n\nWarning: Removed 51 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nThis upwards trend is displayed by country in this plot as well, confirming that the country and year impact the life expectancy-based trends."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#now-i-will-use-a-code-to-find-which-years-have-missing-values-for-infant-mortality",
    "href": "coding-exercise/coding-exercise.html#now-i-will-use-a-code-to-find-which-years-have-missing-values-for-infant-mortality",
    "title": "R Coding Exercise",
    "section": "Now I will use a code to find which years have missing values for infant mortality",
    "text": "Now I will use a code to find which years have missing values for infant mortality\n\nmissingvalues &lt;- unique(africadata[!complete.cases(africadata$infant_mortality), \"year\"]) ## This shows which years in the variable are not complete cases (or are 0)\n\nprint(missingvalues)\n\n [1] 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974\n[16] 1975 1976 1977 1978 1979 1980 1981 2016\n\n\nIt seems that many years are missing between 1960-1981 and also in 2016."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#creating-a-new-object-for-just-the-values-with-the-year-2000",
    "href": "coding-exercise/coding-exercise.html#creating-a-new-object-for-just-the-values-with-the-year-2000",
    "title": "R Coding Exercise",
    "section": "Creating a new object for just the values with the year 2000",
    "text": "Creating a new object for just the values with the year 2000\n\nd4 &lt;- africadata %&gt;%\n filter(year == 2000) ## this will give me an object from africadata only including the data from 2000\n\n# Checking that the new object is correct\n str(d4)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n summary(d4)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plot-with-life-expectancy-versus-infant-mortality",
    "href": "coding-exercise/coding-exercise.html#plot-with-life-expectancy-versus-infant-mortality",
    "title": "R Coding Exercise",
    "section": "Plot with life expectancy versus infant mortality",
    "text": "Plot with life expectancy versus infant mortality\n\nlifevim_plot6 &lt;- ggplot(d4, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. Infant Mortality in 2000\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\")\n    \n  print(lifevim_plot6)\n\n\n\n\n\n\n\n\nA negative trend is still observed between infant mortality and life expectancy int heyear 2000."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plot-with-life-expectancy-versus-logpopulation",
    "href": "coding-exercise/coding-exercise.html#plot-with-life-expectancy-versus-logpopulation",
    "title": "R Coding Exercise",
    "section": "Plot with life expectancy versus log(population)",
    "text": "Plot with life expectancy versus log(population)\n\nlifevpop_plot4 &lt;- ggplot(d4, aes(x = log(population), y = life_expectancy)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. log(Population) by Country\",\n       x = \"Log(Population)\",\n       y = \"Life Expectancy\")\n      \n  print(lifevpop_plot4)\n\n\n\n\n\n\n\n\nThere is no trend observed between log(population) and life expectancy in this case, so we will test this using a linear model."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#model-for-life-expectancy-versus-infant-mortality-in-2000",
    "href": "coding-exercise/coding-exercise.html#model-for-life-expectancy-versus-infant-mortality-in-2000",
    "title": "R Coding Exercise",
    "section": "Model for life expectancy versus infant mortality in 2000",
    "text": "Model for life expectancy versus infant mortality in 2000\nI will use the lm() function to create a linear model of life expectancy as the outcome and infant mortality as the factor.\n\nlmfit_lifevim &lt;- lm(life_expectancy ~ infant_mortality, d4) ## Linear model from life expectancy and infant mortality in the year 2000  \nlmtable_lifevim &lt;- broom::tidy(lmfit_lifevim) ## tidyverse includes the broom function to produce a table from the linear model above\nprint(lmtable_lifevim)\n\n# A tibble: 2 × 5\n  term             estimate std.error statistic  p.value\n  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)        71.3      2.43       29.4  8.91e-33\n2 infant_mortality   -0.189    0.0287     -6.59 2.83e- 8\n\n\nThe linear model table reflects the negative trend between infant mortality and life expectancy in the year 2000."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#model-for-life-expectancy-versus-logpopulation-in-2000",
    "href": "coding-exercise/coding-exercise.html#model-for-life-expectancy-versus-logpopulation-in-2000",
    "title": "R Coding Exercise",
    "section": "Model for life expectancy versus log(population) in 2000",
    "text": "Model for life expectancy versus log(population) in 2000\nNext, we will use the same process to create a linear model of life expectancy and log(population) in the year 2000.\n\nlmfit_lifevpop &lt;- lm(life_expectancy ~ log(population), d4)  \nlmtable_lifevpop &lt;- broom::tidy(lmfit_lifevpop)\nprint(lmtable_lifevpop)\n\n# A tibble: 2 × 5\n  term            estimate std.error statistic    p.value\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 (Intercept)       65.3      12.5       5.22  0.00000365\n2 log(population)   -0.571     0.794    -0.719 0.476     \n\n\nThere is a slight negative trend in life expectancy and log(population), however this is not statistically significant, with a p-value of 0.5. Therefore no trend is observed for the year 2000."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "My name is Rachel Robertson and I am a second-year MPH Epidemiology student at UGA. I recently received my undergraduate degree in Biology here and decided to continue my academic journey. I became interested in public health following the SARS-CoV-2 pandemic and decided to explore CPH courses through ‘Double Dawgs’ at UGA. This led to me where I am today!\n\n\n\nThis is me\n\n\n\n\n\nI have had the wonderful opportunity to do infectious disease research with the Brindley Lab at UGA. Although not public health-related, this virology research gave me a solid basis for the academic world. From this, I also got two poster presentations under my belt: the UGA Center for Undergraduate Research Opportunities and the American Society of Virology conferences. Over the summer, I was able to complete mosquito surveillance in Georgia with a program called, SECVBD, in collaboration with supervisors from the DPH. It was rough, but fun fieldwork that involved traveling to Georgia parks and trapping live mosquitoes. Currently, I am looking forward to beginning research with the SRH lab on Crisis Pregnancy Centers and women’s health!\n\n\n\nThe College of Public Health has sent me through several courses that gave me experience in SAS and STATA, but little to none in R. I have used a few data visualization platforms, such as Tableau and Bio-render, and worked with a team to create presentations. Two examples of such are a tick-borne disease map in the U.S. and a poster exploring the microbial composition in water fountains at UGA. I’d like to take these experiences and build upon them with the knowledge of R to create more complex and relevant projects.\n\n\n\nIn my free time, you can probably find me gaming with my friends. We sometimes play multi-player computer games, but mainly we get together to play Dungeons and Dragons. I also enjoy painting as a hobby and learning other visual art media, like watercolors, graphic design, and crocheting.\n\n\n\nIn this video, Tanisha Batra, a data science graduate, presents her capstone on creating a model to predict the popularity of a song on Spotify. I thought this was interesting because I love music, but I did not expect her findings."
  },
  {
    "objectID": "aboutme.html#read-about-me-here",
    "href": "aboutme.html#read-about-me-here",
    "title": "About me",
    "section": "",
    "text": "My name is Rachel Robertson and I am a second-year MPH Epidemiology student at UGA. I recently received my undergraduate degree in Biology here and decided to continue my academic journey. I became interested in public health following the SARS-CoV-2 pandemic and decided to explore CPH courses through ‘Double Dawgs’ at UGA. This led to me where I am today!\n\n\n\nThis is me\n\n\n\n\n\nI have had the wonderful opportunity to do infectious disease research with the Brindley Lab at UGA. Although not public health-related, this virology research gave me a solid basis for the academic world. From this, I also got two poster presentations under my belt: the UGA Center for Undergraduate Research Opportunities and the American Society of Virology conferences. Over the summer, I was able to complete mosquito surveillance in Georgia with a program called, SECVBD, in collaboration with supervisors from the DPH. It was rough, but fun fieldwork that involved traveling to Georgia parks and trapping live mosquitoes. Currently, I am looking forward to beginning research with the SRH lab on Crisis Pregnancy Centers and women’s health!\n\n\n\nThe College of Public Health has sent me through several courses that gave me experience in SAS and STATA, but little to none in R. I have used a few data visualization platforms, such as Tableau and Bio-render, and worked with a team to create presentations. Two examples of such are a tick-borne disease map in the U.S. and a poster exploring the microbial composition in water fountains at UGA. I’d like to take these experiences and build upon them with the knowledge of R to create more complex and relevant projects.\n\n\n\nIn my free time, you can probably find me gaming with my friends. We sometimes play multi-player computer games, but mainly we get together to play Dungeons and Dragons. I also enjoy painting as a hobby and learning other visual art media, like watercolors, graphic design, and crocheting.\n\n\n\nIn this video, Tanisha Batra, a data science graduate, presents her capstone on creating a model to predict the popularity of a song on Spotify. I thought this was interesting because I love music, but I did not expect her findings."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "This data contains suspected botulism cases in the United States dating back to the year 1899. This data is provided by the CDC Botulism Consultation Service, the Alaska Division of Public Health, and California Department of Public Health.These organizations are the only sources of non-infant botulism anti-toxin in the U.S. and they collect epidemiological and medical information from suspected botulism cases all over the U.S. This data set contains 5 columns and 2280 rows. The variables in this data set include state, year, botulism transmission type (BotType), botulism toxin type (ToxinType), and frequency count (Count).\nLink to the data set: https://data.cdc.gov/Foodborne-Waterborne-and-Related-Diseases/Botulism/66i6-hisz/about_data\n\n\n\nI will start by openning the libraries of the packages that I will need for data processing/cleaning and exploratory analysis. install.packages(readxl)\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(tidyr)\nlibrary(skimr)\nlibrary(naniar)\n\n\nAttaching package: 'naniar'\n\n\nThe following object is masked from 'package:skimr':\n\n    n_complete\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.4     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(broom)\nlibrary(readxl)\n\nNext, I will write code to read the csv file.\n\nlist.files() #confirm that the file is in the working directory\n\n[1] \"Botulism.csv\"               \"cdcdata-exercise.qmd\"      \n[3] \"cdcdata-exercise.rmarkdown\"\n\ncdcdata &lt;- read_csv(\"Botulism.csv\") #read the csv file\n\nRows: 2280 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): State, BotType, ToxinType\ndbl (2): Year, Count\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNext I will look at the data structure and summary.\n\nsummary(cdcdata)\n\n    State                Year        BotType           ToxinType        \n Length:2280        Min.   :1899   Length:2280        Length:2280       \n Class :character   1st Qu.:1976   Class :character   Class :character  \n Mode  :character   Median :1993   Mode  :character   Mode  :character  \n                    Mean   :1986                                        \n                    3rd Qu.:2006                                        \n                    Max.   :2017                                        \n     Count       \n Min.   : 1.000  \n 1st Qu.: 1.000  \n Median : 1.000  \n Mean   : 3.199  \n 3rd Qu.: 3.000  \n Max.   :59.000  \n\nstr(cdcdata)\n\nspc_tbl_ [2,280 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ State    : chr [1:2280] \"Alaska\" \"Alaska\" \"Alaska\" \"Alaska\" ...\n $ Year     : num [1:2280] 1947 1948 1950 1952 1956 ...\n $ BotType  : chr [1:2280] \"Foodborne\" \"Foodborne\" \"Foodborne\" \"Foodborne\" ...\n $ ToxinType: chr [1:2280] \"Unknown\" \"Unknown\" \"E\" \"E\" ...\n $ Count    : num [1:2280] 3 4 5 1 5 10 2 1 1 1 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   State = col_character(),\n  ..   Year = col_double(),\n  ..   BotType = col_character(),\n  ..   ToxinType = col_character(),\n  ..   Count = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nNow I will check which unique variables are present in the BotType, ToxinType, and State Categories by using the unique function.\n\nunique_bottype &lt;- unique(cdcdata$BotType)\nunique_toxintype &lt;- unique(cdcdata$ToxinType)\nunique_state &lt;- unique(cdcdata$State) #Makes a new column of unique values for an existing column\nprint(unique_bottype)\n\n[1] \"Foodborne\" \"Infant\"    \"Wound\"     \"Other\"    \n\nprint(unique_toxintype)\n\n [1] \"Unknown\" \"E\"       \"B\"       \"A\"       \"F\"       \"A&B\"     \"AB\"     \n [8] \"Ba\"      \"Bf\"      \"E,F\"     \"ABE\"     \"Ab\"      \"B/F\"     \"A/B/E\"  \n\nprint(unique_state) #Print the unique factors to read them\n\n [1] \"Alaska\"         \"Alabama\"        \"Arkansas\"       \"Arizona\"       \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    NA              \n [9] \"Delaware\"       \"Florida\"        \"Georgia\"        \"Hawaii\"        \n[13] \"Iowa\"           \"Idaho\"          \"Illinois\"       \"Indiana\"       \n[17] \"Kansas\"         \"Kentucky\"       \"Louisiana\"      \"Massachusetts\" \n[21] \"Maryland\"       \"Maine\"          \"Michigan\"       \"Minnesota\"     \n[25] \"Missouri\"       \"Mississippi\"    \"Montana\"        \"North Carolina\"\n[29] \"North Dakota\"   \"Nebraska\"       \"New Hampshire\"  \"New Jersey\"    \n[33] \"New Mexico\"     \"Nevada\"         \"New York\"       \"Ohio\"          \n[37] \"Oklahoma\"       \"Oregon\"         \"Pennsylvania\"   \"Texas\"         \n[41] \"Rhode Island\"   \"South Carolina\" \"South Dakota\"   \"Tennessee\"     \n[45] \"Utah\"           \"Virginia\"       \"Vermont\"        \"Washington\"    \n[49] \"Wisconsin\"      \"West Virginia\"  \"Wyoming\"       \n\n\nIt seems that there are multiple values of the factor bottype that have the same meaning. These values that should be grouped together are “AB”, “Ba”, “A&B”, and “Ab”; “B/F” and “Bf”; “A/B/E” and “ABE”.\n\n\n\nFirst, I will rename the values of ToxinType that can be combined to a single value using mutate().\n\ncdcdata2 &lt;- cdcdata %&gt;%\n  mutate(ToxinType = case_when(\n    ToxinType %in% c(\"AB\", \"Ba\", \"Ab\", \"A&B\") ~ \"AB\",\n    ToxinType %in% c(\"B/F\", \"Bf\") ~ \"BF\",\n    ToxinType %in% c(\"ABE\", \"A/B/E\") ~ \"ABE\",\n    TRUE ~ ToxinType\n  )) #I found how to mutate multiple values of one variable by using the base function of mutate and then asking ChatGPT how to combine multiple values using mutate and not just one.\nunique_toxintype2 &lt;- unique(cdcdata2$ToxinType)\nprint(unique_toxintype2) #Use unique to check that the unique values have merged into a single value, in this case it was sucessful\n\n[1] \"Unknown\" \"E\"       \"B\"       \"A\"       \"F\"       \"AB\"      \"BF\"     \n[8] \"E,F\"     \"ABE\"    \n\n\nI will now change the character variables: State, BotType, and ToxinType into factor variables so they are simpler to analyze as levels.\n\ncdcdata2$State &lt;- as.factor(cdcdata2$State)\ncdcdata2$ToxinType &lt;- as.factor(cdcdata2$ToxinType)\ncdcdata2$BotType &lt;- as.factor(cdcdata2$BotType) #Use the as.factor function to convert each of these character variables to factors that will be simpler to work with\nstr(cdcdata2) #check the variable types of the data frame\n\ntibble [2,280 × 5] (S3: tbl_df/tbl/data.frame)\n $ State    : Factor w/ 50 levels \"Alabama\",\"Alaska\",..: 2 2 2 2 2 2 2 2 2 2 ...\n $ Year     : num [1:2280] 1947 1948 1950 1952 1956 ...\n $ BotType  : Factor w/ 4 levels \"Foodborne\",\"Infant\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ ToxinType: Factor w/ 9 levels \"A\",\"AB\",\"ABE\",..: 9 9 6 6 6 6 6 6 9 6 ...\n $ Count    : num [1:2280] 3 4 5 1 5 10 2 1 1 1 ...\n\n\nNow I will rename the E,F column to EF for consistency.\n\ncdcdata3 &lt;- cdcdata2 %&gt;%\n  mutate(ToxinType = as.character(ToxinType), #first you must change the factor toxin type to a character variable\n         ToxinType = ifelse(ToxinType == \"E,F\", \"EF\", ToxinType), #Then, you convert the value \"E,F\" into \"EF\"\n         ToxinType = as.factor(ToxinType)) #convert toxin type back into a factor\nprint(levels(cdcdata3$ToxinType)) #check the levels of the toxintype factor by using the print(levels()) function\n\n[1] \"A\"       \"AB\"      \"ABE\"     \"B\"       \"BF\"      \"E\"       \"EF\"     \n[8] \"F\"       \"Unknown\"\n\n\nNow I will check for missing values in all of the variables. The “Unknown” values for ToxinTupe, BotType, or State are NOT missing values because they can be analyzed as a factor level and correspond to important data of case counts. I will determine which variables have the most missing data using a nanair package function called gg_miss_var.\n\ngg_miss_var(cdcdata3)\n\n\n\n\n\n\n\n\nThere are over 30 missing values for state, but this is a relatively small percentage compared to the total of 2850 values, so I will delete these missing values.\n\ncdcdata4 &lt;- cdcdata3 %&gt;% #Create a new data frame called cdcdata4\n  drop_na(State) #Drop values of state that are NA\nskimr::skim(cdcdata4) #Check the number of rows\n\n\nData summary\n\n\nName\ncdcdata4\n\n\nNumber of rows\n2246\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nState\n0\n1\nFALSE\n50\nCal: 343, Was: 143, Tex: 107, Col: 98\n\n\nBotType\n0\n1\nFALSE\n4\nInf: 1124, Foo: 899, Wou: 151, Oth: 72\n\n\nToxinType\n0\n1\nFALSE\n9\nA: 958, B: 778, Unk: 369, E: 72\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1985.50\n26.60\n1899\n1976\n1992\n2006\n2017\n▁▂▂▅▇\n\n\nCount\n0\n1\n3.22\n4.66\n1\n1\n1\n3\n59\n▇▁▁▁▁\n\n\n\n\n\n34 values were deleted as the number fo rows changed from 2280 to 2246. Now since all of the missing values are taken care of, we will explore to data to find outliers.\n\n\n\nI will use exploratory analysis and create figures to summarize the data distribution and to identify any outliers.\nBecause the outcome of interest is botulism case count (Count), I will check the normalcy and distribution of the variable count. I used ChatGPT to ask what kind of plot I can use to show me the distribution of Count. If output a code for a histogram that shows a density distribution. This shows that the data is highly right-skewed.\n\nggplot(cdcdata4, aes(x = Count)) +\n  geom_histogram(binwidth = 10, aes(y = ..density..)) +\n  geom_density(alpha = 0.2) +\n  labs(title = \"Distribution of Counts\", x = \"Counts\", y = \"Density\")\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n\n\n\n\n\n\n\nI will now make a simple boxplot using ggplot to confirm the results in the density distribution given above.\n\nggplot(cdcdata4, aes(y = Count)) + #Create a boxplot of count \n  geom_boxplot(fill = \"skyblue\", color = \"black\") + #Fill colors are used as box is far too compressed to notice otherwise\n  labs(title = \"Box Plot of Counts\", y = \"Counts\")\n\n\n\n\n\n\n\n\nEven though the plot is highly skewed, there is a single outlier that stands out, close to a count of 60. I will try and find which year and state values are associated with this maximum count and very that there was an unusual outbreak, using online literature.\n\nsummary(cdcdata4$Count) \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   1.000   3.223   3.000  59.000 \n\n\nI found the max count value to be 59, so I will identify the row of this value.\n\nmax_row &lt;- cdcdata4$Count == 59 #create a data frame just including the max value of count\nmax_states &lt;- cdcdata4$State[max_row]\nmax_years &lt;- cdcdata4$Year[max_row] #Produce data frames with the year and state corresponding to the max count\nprint(max_states)\n\n[1] Michigan\n50 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\nprint(max_years) #print the data frames with the corresponding years and states\n\n[1] 1977\n\n\nNow seeing that this outlier is from 1977 Michigan, I will search for this outbreak. Reference: https://pubmed.ncbi.nlm.nih.gov/707476/ In 1977, there was the largest botulism outbreak in American history due to a foodborne outbreak at a Mexican restaurant, from improperly canned Jalapenos. This data point is important and will therefore be kept.\nI will now check the frequency of the factor variables\n\n\nI will check the frequency of year using a histogram plot, similar to the distribution plot used for count.\n\nggplot(cdcdata4, aes(x = Year)) +\n  geom_histogram(binwidth = 10, aes(y = ..density..)) +\n  geom_density(alpha = 0.2) +\n  labs(title = \"Distribution of Years\", x = \"Year\", y = \"Density\")\n\n\n\n\n\n\n\n\nMost data has been collected in more recent years, so the data is left-skewed.\nI will not plot count versus year. First I will make a total count variable that takes the sum of all state counts for a year\n\ntotcount_year &lt;- aggregate(Count ~ Year, data = cdcdata4, FUN = sum) #Use aggregate() to find the sum count for each year value\nggplot(totcount_year, aes(x = Year, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  geom_point() + \n  labs(title = \"Botulism Count for each Year in the U.S.\", x = \"Year\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nIt looks like total botulism cases have greatly increased in recent years, botulism surveillance has greatly improved, or the suspected botulism case had changed around 1970 to become more broad. Whichever is the case, the total botulism case count per state has greatly increased starting around 1970.\n\n\n\nFirst I will see the total cases per state. For this I will first aggregate the count values to get a total for each state. Next, I will make a histogram of the total case count versus state.\n\ntotcount_state &lt;- aggregate(Count ~ State, data = cdcdata4, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nOne state has an extremely high total case count. I will identify max value by using the same method I used when identifying the max count value.\n\nsummary(totcount_state) #summary stats for the total count by state data frame\n\n        State        Count        \n Alabama   : 1   Min.   :   3.00  \n Alaska    : 1   1st Qu.:  29.25  \n Arizona   : 1   Median :  44.00  \n Arkansas  : 1   Mean   : 144.76  \n California: 1   3rd Qu.: 149.50  \n Colorado  : 1   Max.   :2598.00  \n (Other)   :44                    \n\n\nI will find the row that this max takes place in.\n\nmax_row &lt;- totcount_state$Count == 2598 #create a data frame just including the max value of count\nmax_state2 &lt;- totcount_state$State[max_row] #find the row in whcih the state with the max total count occurs\nprint(max_state2) #print the data frames with the corresponding state\n\n[1] California\n50 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\n\nThis extreme value takes place in California. I will now fact check this with online literature. Reference 2: https://www.cdph.ca.gov/Programs/CID/DCDC/CDPH%20Document%20Library/IDBGuidanceforCALHJs-Botulism.pdf According to the California DPH, CA reports the highest proportion of wound botulism cases in the U.S.(approx. 26/yr from 2016 to 2019) These are likely related to drug injection. They have also have had 24 foodborne illness cases during this time period. However, this only accounts for 180 of the 2598 reported, suspected cases. I am unsure about including CA in the final analysis for this reason, as the cases may be due to unequal distribution of botulism outbreaks rather than a reporting bias, but it is unknown which one. To decide whether to exclude CA I will explore the distribution of count values based on the year and state.\nI will now investigate the aggregate values of state and year counts.\n\ntotcount_stateandyear &lt;- aggregate(Count ~ Year + State, data = cdcdata4, FUN = sum) # Use aggregate to calculate the sum of counts for each state and year\nggplot(totcount_stateandyear, aes(x = State, y = Count, color = Year)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nBased on the colors of the scatter plot, California has began reporting the largest total case counts of botulism in more recent years, which suggests a change in case definition or reporting bias.\nBecause of this, I will go back to processing the data. First I will identify if there are duplicate rows in the data\n\ndupcdcdata4 &lt;- cdcdata4[duplicated(cdcdata4),] #Check for duplicated data in the original dataframe and create a new dataframe with duplicates\nprint(dupcdcdata4) #Print the duplicate rows\n\n# A tibble: 0 × 5\n# ℹ 5 variables: State &lt;fct&gt;, Year &lt;dbl&gt;, BotType &lt;fct&gt;, ToxinType &lt;fct&gt;,\n#   Count &lt;dbl&gt;\n\n\nBecause they are zero duplicate rows, I believe that there is not duplicate data present for the California data. In this case, I will remove all of the rows with the value California.\n\ncdcdata5 &lt;- cdcdata4[cdcdata4$State != \"California\", ] #remove California values from the state variable\nprint(levels(cdcdata5$State)) #Check the remaining values\n\n [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"      \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"      \n [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"         \n[13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"        \n[17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"      \n[21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"   \n[25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"        \n[29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"      \n[37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\"\n[41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"          \n[45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\" \n[49] \"Wisconsin\"      \"Wyoming\"       \n\n\nCalifornia is missing from the levels of the State factor, therefore the removal of the state value, “California” was successful.\nI will now remake the graph comparing the total count values for each state, to reassess outlier state values.\n\ntotcount_state &lt;- aggregate(Count ~ State, data = cdcdata5, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State (except CA) in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nThere are a few higher count values, such as for Oregon, but there seems to be no outstanding outliers. Because of this, we will move on.\n\n\n\nNext, I will examine the total number of cases for each Botulism Type. I will start by aggregating the total count for each type of outbreak. Then I will make a bar plot showing each category.\n\ntotcount_type &lt;- aggregate(Count ~ BotType, data = cdcdata5, FUN = sum) #Aggregate the count sum by the type of botulism\nggplot(totcount_type, aes(x = BotType, y = Count)) +\n  geom_bar(stat = \"identity\") + \n  labs(title = \"Distribution of Botulism Type\", x = \"Type of Botulism Outbreak\", y = \"Total Count\") #Make a bar plot with each differing identity of bot type listed on the x axis\n\n\n\n\n\n\n\n\nInfant botulism seems slightly more frequent than foodborne botulism. Wound botulism is much less common, but has a frequency close to “other” types of botulism.\n\n\n\nLastly, I will examine the total number of cases for each Toxin Type. This analysis will be done in a similar way as botulism type. The total count will be aggregated for each toxin type and then\n\ntotcount_toxin &lt;- aggregate(Count ~ ToxinType, data = cdcdata5, FUN = sum) #Aggregate the count sum by the type of toxin\nggplot(totcount_toxin, aes(x = ToxinType, y = Count)) +\n  geom_bar(stat = \"identity\") + #Make a bar plot with each differing identity of bot type listed on the x axis\n  labs(title = \"Distribution of Toxin Type\", x = \"Type of Toxin\", y = \"Total Count\")\n\n\n\n\n\n\n\n\nIt seems that the toxin type B is responsible for the highest case count, followed by A, unknown, and lastly, E. The toxin type is unknown for a significant chunk of cases in comparison to known types. The known types AB, ABE, BF, and F contribute to a very small portion of botulism cases in the U.S. compared to A, B, and E.\nThe toxin type corresponds to the strain of bacteria that produced the outbreak. This may mean that toxin type is correlated to the botulism outbreak type. To test BotType and ToxinType correlation, I will use a logistic regression model with these two variables. I use a logistic model with the outcome being botulism outbreak type and the predictor being toxin type.\n\nbotvtoxin &lt;- glm(BotType ~ ToxinType, data = cdcdata5, family = binomial) #use glm() to produce a logistic regression with the bottype versus the toxintype variables; regression is binomial\nsummary(botvtoxin) #ptint the results table\n\n\nCall:\nglm(formula = BotType ~ ToxinType, family = binomial, data = cdcdata5)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.0544  -0.4265   0.5987   0.9397   2.5042  \n\nCoefficients:\n                  Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)        0.58857    0.07426   7.926 2.27e-15 ***\nToxinTypeAB       13.97749  394.77485   0.035  0.97176    \nToxinTypeABE      13.97749  882.74338   0.016  0.98737    \nToxinTypeB         1.03981    0.12616   8.242  &lt; 2e-16 ***\nToxinTypeBF       13.97749  394.77485   0.035  0.97176    \nToxinTypeE        -3.67962    0.59498  -6.184 6.23e-10 ***\nToxinTypeF         1.39243    0.53851   2.586  0.00972 ** \nToxinTypeUnknown  -2.93995    0.21826 -13.470  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 2543.3  on 1902  degrees of freedom\nResidual deviance: 1881.1  on 1895  degrees of freedom\nAIC: 1897.1\n\nNumber of Fisher Scoring iterations: 13\n\n\nIt seems that toxin types A, B, E, and unknown are associated with the type of outbreak. Assuming that foodborne is the reference, as it is listed at the first factor level, this might mean there is an association between toxins A, B, E, and unknown with foodborne botulism outbreaks.\nThis was not confirmed by myself, but current literature suggests that foodborne botulism illness is associated with botulin toxin types A, B, and E. Refrence 3: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2094941/#:~:text=Botulism%20is%20a%20neuroparalytic%20illness,A%2C%20B%20or%20E).\n\n\n\nThe summary statistics of the final data set is shown here.The values for California have not been removed, due to significant they might hold. However, note that California has the highest case counts of any U.S. state.\n\nsummary(cdcdata5)\n\n        State           Year           BotType       ToxinType  \n Washington: 143   Min.   :1910   Foodborne: 740   A      :790  \n Texas     : 107   1st Qu.:1977   Infant   :1028   B      :701  \n Colorado  :  98   Median :1993   Other    :  55   Unknown:299  \n Oregon    :  95   Mean   :1987   Wound    :  80   E      : 69  \n Alaska    :  88   3rd Qu.:2006                    F      : 33  \n New York  :  81   Max.   :2017                    AB     :  5  \n (Other)   :1291                                   (Other):  6  \n     Count       \n Min.   : 1.000  \n 1st Qu.: 1.000  \n Median : 1.000  \n Mean   : 2.438  \n 3rd Qu.: 3.000  \n Max.   :59.000  \n                 \n\nskim(cdcdata5)\n\n\nData summary\n\n\nName\ncdcdata5\n\n\nNumber of rows\n1903\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nState\n0\n1\nFALSE\n49\nWas: 143, Tex: 107, Col: 98, Ore: 95\n\n\nBotType\n0\n1\nFALSE\n4\nInf: 1028, Foo: 740, Wou: 80, Oth: 55\n\n\nToxinType\n0\n1\nFALSE\n8\nA: 790, B: 701, Unk: 299, E: 69\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1986.67\n25.54\n1910\n1977\n1993\n2006\n2017\n▁▂▂▆▇\n\n\nCount\n0\n1\n2.44\n3.21\n1\n1\n1\n3\n59\n▇▁▁▁▁"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#data-on-botulism-in-the-u.s.",
    "href": "cdcdata-exercise/cdcdata-exercise.html#data-on-botulism-in-the-u.s.",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "This data contains suspected botulism cases in the United States dating back to the year 1899. This data is provided by the CDC Botulism Consultation Service, the Alaska Division of Public Health, and California Department of Public Health.These organizations are the only sources of non-infant botulism anti-toxin in the U.S. and they collect epidemiological and medical information from suspected botulism cases all over the U.S. This data set contains 5 columns and 2280 rows. The variables in this data set include state, year, botulism transmission type (BotType), botulism toxin type (ToxinType), and frequency count (Count).\nLink to the data set: https://data.cdc.gov/Foodborne-Waterborne-and-Related-Diseases/Botulism/66i6-hisz/about_data"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#openning-the-data",
    "href": "cdcdata-exercise/cdcdata-exercise.html#openning-the-data",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "I will start by openning the libraries of the packages that I will need for data processing/cleaning and exploratory analysis. install.packages(readxl)\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(tidyr)\nlibrary(skimr)\nlibrary(naniar)\n\n\nAttaching package: 'naniar'\n\n\nThe following object is masked from 'package:skimr':\n\n    n_complete\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.4     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(broom)\nlibrary(readxl)\n\nNext, I will write code to read the csv file.\n\nlist.files() #confirm that the file is in the working directory\n\n[1] \"Botulism.csv\"               \"cdcdata-exercise.qmd\"      \n[3] \"cdcdata-exercise.rmarkdown\"\n\ncdcdata &lt;- read_csv(\"Botulism.csv\") #read the csv file\n\nRows: 2280 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): State, BotType, ToxinType\ndbl (2): Year, Count\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNext I will look at the data structure and summary.\n\nsummary(cdcdata)\n\n    State                Year        BotType           ToxinType        \n Length:2280        Min.   :1899   Length:2280        Length:2280       \n Class :character   1st Qu.:1976   Class :character   Class :character  \n Mode  :character   Median :1993   Mode  :character   Mode  :character  \n                    Mean   :1986                                        \n                    3rd Qu.:2006                                        \n                    Max.   :2017                                        \n     Count       \n Min.   : 1.000  \n 1st Qu.: 1.000  \n Median : 1.000  \n Mean   : 3.199  \n 3rd Qu.: 3.000  \n Max.   :59.000  \n\nstr(cdcdata)\n\nspc_tbl_ [2,280 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ State    : chr [1:2280] \"Alaska\" \"Alaska\" \"Alaska\" \"Alaska\" ...\n $ Year     : num [1:2280] 1947 1948 1950 1952 1956 ...\n $ BotType  : chr [1:2280] \"Foodborne\" \"Foodborne\" \"Foodborne\" \"Foodborne\" ...\n $ ToxinType: chr [1:2280] \"Unknown\" \"Unknown\" \"E\" \"E\" ...\n $ Count    : num [1:2280] 3 4 5 1 5 10 2 1 1 1 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   State = col_character(),\n  ..   Year = col_double(),\n  ..   BotType = col_character(),\n  ..   ToxinType = col_character(),\n  ..   Count = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nNow I will check which unique variables are present in the BotType, ToxinType, and State Categories by using the unique function.\n\nunique_bottype &lt;- unique(cdcdata$BotType)\nunique_toxintype &lt;- unique(cdcdata$ToxinType)\nunique_state &lt;- unique(cdcdata$State) #Makes a new column of unique values for an existing column\nprint(unique_bottype)\n\n[1] \"Foodborne\" \"Infant\"    \"Wound\"     \"Other\"    \n\nprint(unique_toxintype)\n\n [1] \"Unknown\" \"E\"       \"B\"       \"A\"       \"F\"       \"A&B\"     \"AB\"     \n [8] \"Ba\"      \"Bf\"      \"E,F\"     \"ABE\"     \"Ab\"      \"B/F\"     \"A/B/E\"  \n\nprint(unique_state) #Print the unique factors to read them\n\n [1] \"Alaska\"         \"Alabama\"        \"Arkansas\"       \"Arizona\"       \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    NA              \n [9] \"Delaware\"       \"Florida\"        \"Georgia\"        \"Hawaii\"        \n[13] \"Iowa\"           \"Idaho\"          \"Illinois\"       \"Indiana\"       \n[17] \"Kansas\"         \"Kentucky\"       \"Louisiana\"      \"Massachusetts\" \n[21] \"Maryland\"       \"Maine\"          \"Michigan\"       \"Minnesota\"     \n[25] \"Missouri\"       \"Mississippi\"    \"Montana\"        \"North Carolina\"\n[29] \"North Dakota\"   \"Nebraska\"       \"New Hampshire\"  \"New Jersey\"    \n[33] \"New Mexico\"     \"Nevada\"         \"New York\"       \"Ohio\"          \n[37] \"Oklahoma\"       \"Oregon\"         \"Pennsylvania\"   \"Texas\"         \n[41] \"Rhode Island\"   \"South Carolina\" \"South Dakota\"   \"Tennessee\"     \n[45] \"Utah\"           \"Virginia\"       \"Vermont\"        \"Washington\"    \n[49] \"Wisconsin\"      \"West Virginia\"  \"Wyoming\"       \n\n\nIt seems that there are multiple values of the factor bottype that have the same meaning. These values that should be grouped together are “AB”, “Ba”, “A&B”, and “Ab”; “B/F” and “Bf”; “A/B/E” and “ABE”."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#cleaning-the-data",
    "href": "cdcdata-exercise/cdcdata-exercise.html#cleaning-the-data",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "First, I will rename the values of ToxinType that can be combined to a single value using mutate().\n\ncdcdata2 &lt;- cdcdata %&gt;%\n  mutate(ToxinType = case_when(\n    ToxinType %in% c(\"AB\", \"Ba\", \"Ab\", \"A&B\") ~ \"AB\",\n    ToxinType %in% c(\"B/F\", \"Bf\") ~ \"BF\",\n    ToxinType %in% c(\"ABE\", \"A/B/E\") ~ \"ABE\",\n    TRUE ~ ToxinType\n  )) #I found how to mutate multiple values of one variable by using the base function of mutate and then asking ChatGPT how to combine multiple values using mutate and not just one.\nunique_toxintype2 &lt;- unique(cdcdata2$ToxinType)\nprint(unique_toxintype2) #Use unique to check that the unique values have merged into a single value, in this case it was sucessful\n\n[1] \"Unknown\" \"E\"       \"B\"       \"A\"       \"F\"       \"AB\"      \"BF\"     \n[8] \"E,F\"     \"ABE\"    \n\n\nI will now change the character variables: State, BotType, and ToxinType into factor variables so they are simpler to analyze as levels.\n\ncdcdata2$State &lt;- as.factor(cdcdata2$State)\ncdcdata2$ToxinType &lt;- as.factor(cdcdata2$ToxinType)\ncdcdata2$BotType &lt;- as.factor(cdcdata2$BotType) #Use the as.factor function to convert each of these character variables to factors that will be simpler to work with\nstr(cdcdata2) #check the variable types of the data frame\n\ntibble [2,280 × 5] (S3: tbl_df/tbl/data.frame)\n $ State    : Factor w/ 50 levels \"Alabama\",\"Alaska\",..: 2 2 2 2 2 2 2 2 2 2 ...\n $ Year     : num [1:2280] 1947 1948 1950 1952 1956 ...\n $ BotType  : Factor w/ 4 levels \"Foodborne\",\"Infant\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ ToxinType: Factor w/ 9 levels \"A\",\"AB\",\"ABE\",..: 9 9 6 6 6 6 6 6 9 6 ...\n $ Count    : num [1:2280] 3 4 5 1 5 10 2 1 1 1 ...\n\n\nNow I will rename the E,F column to EF for consistency.\n\ncdcdata3 &lt;- cdcdata2 %&gt;%\n  mutate(ToxinType = as.character(ToxinType), #first you must change the factor toxin type to a character variable\n         ToxinType = ifelse(ToxinType == \"E,F\", \"EF\", ToxinType), #Then, you convert the value \"E,F\" into \"EF\"\n         ToxinType = as.factor(ToxinType)) #convert toxin type back into a factor\nprint(levels(cdcdata3$ToxinType)) #check the levels of the toxintype factor by using the print(levels()) function\n\n[1] \"A\"       \"AB\"      \"ABE\"     \"B\"       \"BF\"      \"E\"       \"EF\"     \n[8] \"F\"       \"Unknown\"\n\n\nNow I will check for missing values in all of the variables. The “Unknown” values for ToxinTupe, BotType, or State are NOT missing values because they can be analyzed as a factor level and correspond to important data of case counts. I will determine which variables have the most missing data using a nanair package function called gg_miss_var.\n\ngg_miss_var(cdcdata3)\n\n\n\n\n\n\n\n\nThere are over 30 missing values for state, but this is a relatively small percentage compared to the total of 2850 values, so I will delete these missing values.\n\ncdcdata4 &lt;- cdcdata3 %&gt;% #Create a new data frame called cdcdata4\n  drop_na(State) #Drop values of state that are NA\nskimr::skim(cdcdata4) #Check the number of rows\n\n\nData summary\n\n\nName\ncdcdata4\n\n\nNumber of rows\n2246\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nState\n0\n1\nFALSE\n50\nCal: 343, Was: 143, Tex: 107, Col: 98\n\n\nBotType\n0\n1\nFALSE\n4\nInf: 1124, Foo: 899, Wou: 151, Oth: 72\n\n\nToxinType\n0\n1\nFALSE\n9\nA: 958, B: 778, Unk: 369, E: 72\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1985.50\n26.60\n1899\n1976\n1992\n2006\n2017\n▁▂▂▅▇\n\n\nCount\n0\n1\n3.22\n4.66\n1\n1\n1\n3\n59\n▇▁▁▁▁\n\n\n\n\n\n34 values were deleted as the number fo rows changed from 2280 to 2246. Now since all of the missing values are taken care of, we will explore to data to find outliers."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#exploratory-analysis",
    "href": "cdcdata-exercise/cdcdata-exercise.html#exploratory-analysis",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "I will use exploratory analysis and create figures to summarize the data distribution and to identify any outliers.\nBecause the outcome of interest is botulism case count (Count), I will check the normalcy and distribution of the variable count. I used ChatGPT to ask what kind of plot I can use to show me the distribution of Count. If output a code for a histogram that shows a density distribution. This shows that the data is highly right-skewed.\n\nggplot(cdcdata4, aes(x = Count)) +\n  geom_histogram(binwidth = 10, aes(y = ..density..)) +\n  geom_density(alpha = 0.2) +\n  labs(title = \"Distribution of Counts\", x = \"Counts\", y = \"Density\")\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n\n\n\n\n\n\n\nI will now make a simple boxplot using ggplot to confirm the results in the density distribution given above.\n\nggplot(cdcdata4, aes(y = Count)) + #Create a boxplot of count \n  geom_boxplot(fill = \"skyblue\", color = \"black\") + #Fill colors are used as box is far too compressed to notice otherwise\n  labs(title = \"Box Plot of Counts\", y = \"Counts\")\n\n\n\n\n\n\n\n\nEven though the plot is highly skewed, there is a single outlier that stands out, close to a count of 60. I will try and find which year and state values are associated with this maximum count and very that there was an unusual outbreak, using online literature.\n\nsummary(cdcdata4$Count) \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   1.000   3.223   3.000  59.000 \n\n\nI found the max count value to be 59, so I will identify the row of this value.\n\nmax_row &lt;- cdcdata4$Count == 59 #create a data frame just including the max value of count\nmax_states &lt;- cdcdata4$State[max_row]\nmax_years &lt;- cdcdata4$Year[max_row] #Produce data frames with the year and state corresponding to the max count\nprint(max_states)\n\n[1] Michigan\n50 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\nprint(max_years) #print the data frames with the corresponding years and states\n\n[1] 1977\n\n\nNow seeing that this outlier is from 1977 Michigan, I will search for this outbreak. Reference: https://pubmed.ncbi.nlm.nih.gov/707476/ In 1977, there was the largest botulism outbreak in American history due to a foodborne outbreak at a Mexican restaurant, from improperly canned Jalapenos. This data point is important and will therefore be kept.\nI will now check the frequency of the factor variables\n\n\nI will check the frequency of year using a histogram plot, similar to the distribution plot used for count.\n\nggplot(cdcdata4, aes(x = Year)) +\n  geom_histogram(binwidth = 10, aes(y = ..density..)) +\n  geom_density(alpha = 0.2) +\n  labs(title = \"Distribution of Years\", x = \"Year\", y = \"Density\")\n\n\n\n\n\n\n\n\nMost data has been collected in more recent years, so the data is left-skewed.\nI will not plot count versus year. First I will make a total count variable that takes the sum of all state counts for a year\n\ntotcount_year &lt;- aggregate(Count ~ Year, data = cdcdata4, FUN = sum) #Use aggregate() to find the sum count for each year value\nggplot(totcount_year, aes(x = Year, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  geom_point() + \n  labs(title = \"Botulism Count for each Year in the U.S.\", x = \"Year\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nIt looks like total botulism cases have greatly increased in recent years, botulism surveillance has greatly improved, or the suspected botulism case had changed around 1970 to become more broad. Whichever is the case, the total botulism case count per state has greatly increased starting around 1970.\n\n\n\nFirst I will see the total cases per state. For this I will first aggregate the count values to get a total for each state. Next, I will make a histogram of the total case count versus state.\n\ntotcount_state &lt;- aggregate(Count ~ State, data = cdcdata4, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nOne state has an extremely high total case count. I will identify max value by using the same method I used when identifying the max count value.\n\nsummary(totcount_state) #summary stats for the total count by state data frame\n\n        State        Count        \n Alabama   : 1   Min.   :   3.00  \n Alaska    : 1   1st Qu.:  29.25  \n Arizona   : 1   Median :  44.00  \n Arkansas  : 1   Mean   : 144.76  \n California: 1   3rd Qu.: 149.50  \n Colorado  : 1   Max.   :2598.00  \n (Other)   :44                    \n\n\nI will find the row that this max takes place in.\n\nmax_row &lt;- totcount_state$Count == 2598 #create a data frame just including the max value of count\nmax_state2 &lt;- totcount_state$State[max_row] #find the row in whcih the state with the max total count occurs\nprint(max_state2) #print the data frames with the corresponding state\n\n[1] California\n50 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\n\nThis extreme value takes place in California. I will now fact check this with online literature. Reference 2: https://www.cdph.ca.gov/Programs/CID/DCDC/CDPH%20Document%20Library/IDBGuidanceforCALHJs-Botulism.pdf According to the California DPH, CA reports the highest proportion of wound botulism cases in the U.S.(approx. 26/yr from 2016 to 2019) These are likely related to drug injection. They have also have had 24 foodborne illness cases during this time period. However, this only accounts for 180 of the 2598 reported, suspected cases. I am unsure about including CA in the final analysis for this reason, as the cases may be due to unequal distribution of botulism outbreaks rather than a reporting bias, but it is unknown which one. To decide whether to exclude CA I will explore the distribution of count values based on the year and state.\nI will now investigate the aggregate values of state and year counts.\n\ntotcount_stateandyear &lt;- aggregate(Count ~ Year + State, data = cdcdata4, FUN = sum) # Use aggregate to calculate the sum of counts for each state and year\nggplot(totcount_stateandyear, aes(x = State, y = Count, color = Year)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nBased on the colors of the scatter plot, California has began reporting the largest total case counts of botulism in more recent years, which suggests a change in case definition or reporting bias.\nBecause of this, I will go back to processing the data. First I will identify if there are duplicate rows in the data\n\ndupcdcdata4 &lt;- cdcdata4[duplicated(cdcdata4),] #Check for duplicated data in the original dataframe and create a new dataframe with duplicates\nprint(dupcdcdata4) #Print the duplicate rows\n\n# A tibble: 0 × 5\n# ℹ 5 variables: State &lt;fct&gt;, Year &lt;dbl&gt;, BotType &lt;fct&gt;, ToxinType &lt;fct&gt;,\n#   Count &lt;dbl&gt;\n\n\nBecause they are zero duplicate rows, I believe that there is not duplicate data present for the California data. In this case, I will remove all of the rows with the value California.\n\ncdcdata5 &lt;- cdcdata4[cdcdata4$State != \"California\", ] #remove California values from the state variable\nprint(levels(cdcdata5$State)) #Check the remaining values\n\n [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"      \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"      \n [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"         \n[13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"        \n[17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"      \n[21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"   \n[25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"        \n[29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"      \n[37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\"\n[41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"          \n[45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\" \n[49] \"Wisconsin\"      \"Wyoming\"       \n\n\nCalifornia is missing from the levels of the State factor, therefore the removal of the state value, “California” was successful.\nI will now remake the graph comparing the total count values for each state, to reassess outlier state values.\n\ntotcount_state &lt;- aggregate(Count ~ State, data = cdcdata5, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State (except CA) in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nThere are a few higher count values, such as for Oregon, but there seems to be no outstanding outliers. Because of this, we will move on.\n\n\n\nNext, I will examine the total number of cases for each Botulism Type. I will start by aggregating the total count for each type of outbreak. Then I will make a bar plot showing each category.\n\ntotcount_type &lt;- aggregate(Count ~ BotType, data = cdcdata5, FUN = sum) #Aggregate the count sum by the type of botulism\nggplot(totcount_type, aes(x = BotType, y = Count)) +\n  geom_bar(stat = \"identity\") + \n  labs(title = \"Distribution of Botulism Type\", x = \"Type of Botulism Outbreak\", y = \"Total Count\") #Make a bar plot with each differing identity of bot type listed on the x axis\n\n\n\n\n\n\n\n\nInfant botulism seems slightly more frequent than foodborne botulism. Wound botulism is much less common, but has a frequency close to “other” types of botulism.\n\n\n\nLastly, I will examine the total number of cases for each Toxin Type. This analysis will be done in a similar way as botulism type. The total count will be aggregated for each toxin type and then\n\ntotcount_toxin &lt;- aggregate(Count ~ ToxinType, data = cdcdata5, FUN = sum) #Aggregate the count sum by the type of toxin\nggplot(totcount_toxin, aes(x = ToxinType, y = Count)) +\n  geom_bar(stat = \"identity\") + #Make a bar plot with each differing identity of bot type listed on the x axis\n  labs(title = \"Distribution of Toxin Type\", x = \"Type of Toxin\", y = \"Total Count\")\n\n\n\n\n\n\n\n\nIt seems that the toxin type B is responsible for the highest case count, followed by A, unknown, and lastly, E. The toxin type is unknown for a significant chunk of cases in comparison to known types. The known types AB, ABE, BF, and F contribute to a very small portion of botulism cases in the U.S. compared to A, B, and E.\nThe toxin type corresponds to the strain of bacteria that produced the outbreak. This may mean that toxin type is correlated to the botulism outbreak type. To test BotType and ToxinType correlation, I will use a logistic regression model with these two variables. I use a logistic model with the outcome being botulism outbreak type and the predictor being toxin type.\n\nbotvtoxin &lt;- glm(BotType ~ ToxinType, data = cdcdata5, family = binomial) #use glm() to produce a logistic regression with the bottype versus the toxintype variables; regression is binomial\nsummary(botvtoxin) #ptint the results table\n\n\nCall:\nglm(formula = BotType ~ ToxinType, family = binomial, data = cdcdata5)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.0544  -0.4265   0.5987   0.9397   2.5042  \n\nCoefficients:\n                  Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)        0.58857    0.07426   7.926 2.27e-15 ***\nToxinTypeAB       13.97749  394.77485   0.035  0.97176    \nToxinTypeABE      13.97749  882.74338   0.016  0.98737    \nToxinTypeB         1.03981    0.12616   8.242  &lt; 2e-16 ***\nToxinTypeBF       13.97749  394.77485   0.035  0.97176    \nToxinTypeE        -3.67962    0.59498  -6.184 6.23e-10 ***\nToxinTypeF         1.39243    0.53851   2.586  0.00972 ** \nToxinTypeUnknown  -2.93995    0.21826 -13.470  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 2543.3  on 1902  degrees of freedom\nResidual deviance: 1881.1  on 1895  degrees of freedom\nAIC: 1897.1\n\nNumber of Fisher Scoring iterations: 13\n\n\nIt seems that toxin types A, B, E, and unknown are associated with the type of outbreak. Assuming that foodborne is the reference, as it is listed at the first factor level, this might mean there is an association between toxins A, B, E, and unknown with foodborne botulism outbreaks.\nThis was not confirmed by myself, but current literature suggests that foodborne botulism illness is associated with botulin toxin types A, B, and E. Refrence 3: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2094941/#:~:text=Botulism%20is%20a%20neuroparalytic%20illness,A%2C%20B%20or%20E).\n\n\n\nThe summary statistics of the final data set is shown here.The values for California have not been removed, due to significant they might hold. However, note that California has the highest case counts of any U.S. state.\n\nsummary(cdcdata5)\n\n        State           Year           BotType       ToxinType  \n Washington: 143   Min.   :1910   Foodborne: 740   A      :790  \n Texas     : 107   1st Qu.:1977   Infant   :1028   B      :701  \n Colorado  :  98   Median :1993   Other    :  55   Unknown:299  \n Oregon    :  95   Mean   :1987   Wound    :  80   E      : 69  \n Alaska    :  88   3rd Qu.:2006                    F      : 33  \n New York  :  81   Max.   :2017                    AB     :  5  \n (Other)   :1291                                   (Other):  6  \n     Count       \n Min.   : 1.000  \n 1st Qu.: 1.000  \n Median : 1.000  \n Mean   : 2.438  \n 3rd Qu.: 3.000  \n Max.   :59.000  \n                 \n\nskim(cdcdata5)\n\n\nData summary\n\n\nName\ncdcdata5\n\n\nNumber of rows\n1903\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nState\n0\n1\nFALSE\n49\nWas: 143, Tex: 107, Col: 98, Ore: 95\n\n\nBotType\n0\n1\nFALSE\n4\nInf: 1028, Foo: 740, Wou: 80, Oth: 55\n\n\nToxinType\n0\n1\nFALSE\n8\nA: 790, B: 701, Unk: 299, E: 69\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1986.67\n25.54\n1910\n1977\n1993\n2006\n2017\n▁▂▂▆▇\n\n\nCount\n0\n1\n2.44\n3.21\n1\n1\n1\n3\n59\n▇▁▁▁▁"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#synthesis-of-rachels-description-of-the-dataset",
    "href": "cdcdata-exercise/cdcdata-exercise.html#synthesis-of-rachels-description-of-the-dataset",
    "title": "CDC Data Exercise",
    "section": "Synthesis of Rachel’s description of the dataset",
    "text": "Synthesis of Rachel’s description of the dataset\n1903 cbservations across 5 variables:\n\nState factor with 50 levels (States)\nYear number with range 1910 - 2017\nBotType factor with 4 levels (“Foodborne”, “Infant”, “Wound”, “Other”)\nToxType factor with 9 levels (“A”, “AB”, “ABE”, “B”, “BF”, “E”, “EF”, F”, “Unknown”) “Because the outcome of interest is botulism case count (Count), I will check the normalcy and distribution of the variable count. I used ChatGPT to ask what kind of plot I can use to show me the distribution of Count. If output a code for a histogram that shows a density distribution. This shows that the data is highly right-skewed.”\n\n“I found the max count value to be 59, so I will identify the row of this value. Now seeing that this outlier is from 1977 Michigan, I will search for this outbreak. This data point is important and will therefore be kept.”\n“I will check the frequency of year using a histogram plot, similar to the distribution plot used for count. Most data has been collected in more recent years, so the data is left-skewed.”\n“It looks like total botulism cases have greatly increased in recent years, botulism surveillance has greatly improved, or the suspected botulism case had changed around 1970 to become more broad. Whichever is the case, the total botulism case count per state has greatly increased starting around 1970.”\n“First I will see the total cases per state. For this I will first aggregate the count values to get a total for each state. Next, I will make a histogram of the total case count versus state. One state has an extremely high total case count. I will identify max value by using the same method I used when identifying the max count value. This extreme value takes place in California. I will now fact check this with online literature… I will remove all of the rows with the value California.”\n“There are a few higher count values, such as for Oregon, but there seems to be no outstanding outliers. Because of this, we will move\n“Infant botulism seems slightly more frequent than foodborne botulism. Wound botulism is much less common, but has a frequency close to”other” types of botulism.”\n“It seems that the toxin type B is responsible for the highest case count, followed by A, unknown, and lastly, E. The toxin type is unknown for a significant chunk of cases in comparison to known types. The known types AB, ABE, BF, and F contribute to a very small portion of botulism cases in the U.S. compared to A, B, and E.”\n“It seems that toxin types A, B, E, and unknown are associated with the type of outbreak. Assuming that foodborne is the reference, as it is listed at the first factor level, this might mean there is an association between toxins A, B, E, and unknown with foodborne botulism outbreaks.”"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#generating-synthetic-dataset",
    "href": "cdcdata-exercise/cdcdata-exercise.html#generating-synthetic-dataset",
    "title": "CDC Data Exercise",
    "section": "Generating synthetic dataset",
    "text": "Generating synthetic dataset\nFirst, I want to ensure that the distribution of the Counts variable is right-skewed, reflecting that there are many more yearly reports with few cases than reports with many.\n\nset.seed(123)\n#case_counts, right skewed \nCount = floor(rbeta(1900,1,160)*1000) #drawing random samples from a beta distribution rescaling, and using floor to ensure they are integers\nggplot() + geom_histogram(aes(x =Count))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nggplot() + #Create a boxplot of count \n  geom_boxplot(aes(y = Count), fill = \"skyblue\", color = \"black\") + #Fill colors are used as box is far too compressed to notice otherwise\n  labs(title = \"Box Plot of Counts\", y = \"Counts\")\n\n\n\n\n\n\n\n\nNow, I’d like to ensure that the distribution of the “Year” variable is left-skewed, reflecting that the practice of reporting has increased with time; however, there appear to be two little “humps” - a flatter distribution between 1910 and 1960, and another thinner distribution between 1960 - 2017.\n\nset.seed(123)\n#approximately normal distribution before 1960\nbefore_1960 = cdcdata5 %&gt;%\n  filter(Year &lt;=1960) %&gt;%\n  summarise(mean = floor(mean(Year)), \n          sd = sd(Year), \n          obs = length(Year))\n\n#approximately normal distribution after 1960 \nafter_1960 = cdcdata5 %&gt;%\n  filter(Year &gt; 1960) %&gt;%\n  summarise(mean = floor(mean(Year)), \n          sd = sd(Year), \n          obs = length(Year))\n\n#distribution of years \nYear = ceiling(c(rnorm(n = before_1960$obs, mean = before_1960$mean, sd = before_1960$sd), rnorm(n = after_1960$obs, mean = after_1960$mean, sd = after_1960$sd)))\n\n\n# we will need to delete observations outside of the range we are looking for\nYear = Year[(Year &gt;= 1911) & (Year &lt;= 2017)]\n\n# but we need to 1) ensure that we have 1900 observations, and 2) add a few more observation to the range between our distributions, say, 1945-1970\nn_obs = length(Year)\nYear = c(Year, runif(n = (1900-n_obs), min = 1945, max = 1965))\n\n\n# How's it looking, boys? \nggplot() + geom_histogram(aes(x = Year, y = ..density..)) + geom_density(aes(x = Year), alpha = 0.2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nNow, we want to try to mimic the correlation between the total “Count” of the number of cases and “Year” of the reported counts - this correlation follows the shape of the distribution of “Year”, which makes sense. However, we may also want to associate lower count numbers with earlier years, as well.\n\n## How close are we by nature of the year distribution alone?\ndf = data.frame(Year = Year,\n                Count = Count)\ntotcount_year &lt;- aggregate(Count ~ Year, data = df, FUN = sum) #Use aggregate() to find the sum count for each year value\nggplot() + geom_point(data = totcount_year, aes(x = Year, y = Count)) + labs(x = \"Year\", y = \"total Count\")\n\n\n\n\n\n\n\n\nThere’s a good amount of sums between 1925 and 1950 with low case counts, and a good number of low case counts in more recent years than Rachel observed. How do fix this? Lets take some of the case numbers from the middle (10-20) and randomly replace them with a random number between 0 and 5.\n\nggplot() + geom_point(data = df, aes(x = Year, y = Count)) + labs(title = \"synthetic data\")\n\n\n\n\n\n\n\nggplot() + geom_point(data = cdcdata5, aes(x = Year, y = Count)) + labs(title = \"processed CDC data\")\n\n\n\n\n\n\n\n#lets take some of the case numbers from the middle (10-20) and randomly replace them with a random number between 0 and 5. \n\nrange_toobig = range(which(sort(df$Count) &gt;= 10 &  sort(df$Count) &lt;= 40))\ndf$Count = sort(df$Count)\ndf$Count[sample(range_toobig[1]:range_toobig[2], size = diff(range_toobig)/1.5, replace = F)] = runif(diff(range_toobig)/1.5, 0,5)\n\ndf$Count = sample(df$Count)\n\nggplot() + geom_point(data = df, aes(x = Year, y = Count)) + labs(title = \"synthetic data adjusted\")\n\n\n\n\n\n\n\ntotcount_year &lt;- aggregate(Count ~ Year, data = df, FUN = sum) #Use aggregate() to find the sum count for each year value\nggplot() + geom_point(data = totcount_year, aes(x = Year, y = Count)) + labs(y = \"total Count\", x = \"year\")\n\n\n\n\n\n\n\n\nNow, I’d like to try to add in some state data. Without data from California, it looks like the total counts for states are somewhat uniform between 0 and 200 total counts. However, a few states have higher numbers of total cases - these are Alaska, Oregon, Washington, New Jersey, and Colorado.\n\nset.seed(123)\n#randomly generated a vector of state names whose frequencies are uniformly distributed\nstate_names = c(levels(factor(cdcdata5$State)))\nState = sample(state_names, size = 1900, replace = T)\n\ndf$State = State\n\n#reproduce plot\ntotcount_state &lt;- aggregate(Count ~ State, data = df, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State (except CA) in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n#so this clearly didn't work too well!\n\nWhat i’d like to know is the frequencies of the observations of each state in the dataset, and to utilize these frequencies to determine whether the original observations were an artifact of reporting bias!\n\nset.seed(123)\n#frequencies of each state in a named vector\nstate_counts = cdcdata5 %&gt;%\n  group_by(State) %&gt;%\n  count()\nstate_freqs = state_counts$n/nrow(cdcdata5)\nnames(state_freqs) = state_counts$State\n\n#use frequencies to generate a vector of states with the same frequencies\nState = sample(names(state_freqs), size = nrow(df), prob = state_freqs, replace = T)\n\n#add to df \ndf$State = State\n\n#let's plot frequency \ntotcount_state &lt;- aggregate(Count ~ State, data = df, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State (except CA) in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nWe’ve captured that states that report more have a higher OBSERVED total case count, and that doesn’t mean, necessarily, that botulism is more common there! So no further manipulation needed other than sampling states according to frequency of observations.\nLastly, I would like to add the BotTyp and ToxinType data to our synthetic data.\nFirst, I will generate a vector of BotType using the frequencies of botulism types from the cdcdata5 processed dataset.\n\nset.seed(123)\n#determine counts of BotTypes\nbotType_counts = cdcdata5 %&gt;%\n  group_by(BotType) %&gt;%\n  count()\n\n#determine frequencies of BotTypes\nbotType_freqs = botType_counts$n/nrow(cdcdata5)\nnames(botType_freqs) = botType_counts$BotType\n\n#use frequencies to generate a vector of states with the same frequencies\nBotType = sample(names(botType_freqs), size = nrow(df), prob = botType_freqs, replace = T) # for anyone reading this, notice how each of the arguments is dependent upon some other variable I've named, and I'm not direclty entering its value! It makes is a lot easier in the future to change something somewhere higher up in the pipeline, and be able to keep this code the same :)\n\n#add to df \ndf$BotType = BotType\n\n#plot to be sure we've captured the nature of the true data!\ntotcount_type &lt;- aggregate(Count ~ BotType, data = df, FUN = sum) #Aggregate the count sum by the type of botulism\nggplot(totcount_type, aes(x = BotType, y = Count)) +\n  geom_bar(stat = \"identity\") + \n  labs(title = \"Distribution of Botulism Type\", x = \"Type of Botulism Outbreak\", y = \"Total Count\") #Make a bar plot with each differing identity of bot type listed on the x axis\n\n\n\n\n\n\n\n\nInfant type botulism is slightly greater in number than foodborne, but to a slightly greater degree than in the original dataset. However, our goal is grasp the NATURE of the dataset, not to recreate it in its entirety. Hense, this is a probable distribution of Botulism by type!\nSimilar to the frequency approach used to generate the entires for each State and BotType observation, I will use the frequencies of each toxin type in the cdcdata5 dataset to generate a synthetic, possible distribution of cases by toxin type.\n\nset.seed(123)\n\n#fount the number of each toxintype\ntoxType_counts = cdcdata5 %&gt;%\n  group_by(ToxinType) %&gt;%\n  count()\n\n#determine frequencies of BotTypes\ntoxType_freqs = toxType_counts$n/nrow(cdcdata5)\nnames(toxType_freqs) = toxType_counts$ToxinType\n\n#use frequencies to generate a vector of toxtypes with the same frequencies\nToxinType = sample(names(toxType_freqs), size = nrow(df), prob = toxType_freqs, replace = T)\n\n#add to df \ndf$ToxinType = ToxinType\n\n#plot to be sure we've captured the nature of the true data!\ntotcount_type &lt;- aggregate(Count ~ ToxinType, data = df, FUN = sum) #Aggregate the count sum by the type of toxin\nggplot(totcount_type, aes(x = ToxinType, y = Count)) +\n  geom_bar(stat = \"identity\") + \n  labs(title = \"Distribution of Toxin Type\", x = \"Type of Toxin Outbreak\", y = \"Total Count\") #Make a bar plot with each differing identity of bot type listed on the x axis\n\n\n\n\n\n\n\n\nHere’s the potentially challenging bit - we’d like to be sure to capture the correlations between Botulism type and Toxin type (ToxinType). Rachel used a logistic regression to capture that toxin types A, B, E, and unknown are associated with the type of outbreak, and discovered in the literature that types A, B, and E are associated with foodborne outbreaks.\nTo try to capture this association, I will sort the BotType vector alphabetically. Then, I will randomly sample types “A”, “B”, and “E” according to their frequencies relative to the total number of these types, only, to generate a vector as long as the number of Foodboorne observations there are.\nThen we will want to generate the rest of the Toxin_type data. They can be randomly selected according to their frequencies, but independent of the BotType with which they'll be associated.\nHowever, now we need to adjust the probability of selecting “A”, “B”, or “E” according to however many were just selected, or their frequencies will be even higher!\n\nset.seed(123)\n#arrange BotType alphabetically - starting with Foodborne - in the dataframe, df\ndf = df %&gt;%\n  arrange(BotType)\n\n#determine the range of observations with bottype \"foodborne\"\nbotType_range = range(which(df$BotType == \"Foodborne\"))\n\n#now, we want to sample from A, B, and E with their frequencies relative to the total number of A, B, and E\nABE_freqs = toxType_counts %&gt;%\n  filter(ToxinType == \"A\" | ToxinType == \"B\" | ToxinType == \"E\") # | means \"or\"\n\nfoodborne_ToxTypes = sample(ABE_freqs$ToxinType, size = diff(botType_range), prob = ABE_freqs$n/sum(ABE_freqs$n), replace = T)\n\n#Now, we want to generate the rest of the Toxin_type data. They can be randomly selected according to their frequencies, but independent of the bottype with which they'll be associated.\n\n\n# first, we will determine their current frequencies with regard to the total number of observations:\nfoodborne_ToxTypes_counts = as.data.frame(table(foodborne_ToxTypes))\nfoodborne_ToxTypes_counts = foodborne_ToxTypes_counts %&gt;%\n  filter( foodborne_ToxTypes != \"EF\") #these toxtypes are not present in the processed cdc dataset and are an artifact of factoring \nfoodborne_ToxTypes_counts = foodborne_ToxTypes_counts$Freq\n\n#now we will determine how many As, Bs, and Es are included in the df$ToxinType variable \nToxType_counts = df %&gt;%\n  group_by(ToxinType) %&gt;%\n  count()\nToxinType_counts = ToxType_counts$n\nnames(ToxinType_counts) = ToxType_counts$ToxinType\n\n#now, we will recalutalte the expected frequencies of the toxin types for the remainder of the toxintype variable vector\nremaining_freqs_to_prob = (ToxinType_counts - foodborne_ToxTypes_counts)/(nrow(df)-diff(botType_range)) #we are dividing the remaining number of each toxintype that need to be included in the dataset by the total number of \"spaces\" (non Foodborne observations) left to fill in the dataset\n\n# finally! We get to replace the ToxinType variable with a vector of the foodborne probs (which will be listed first, next to the sorted foodborne recordings) and a sample for the other observations using these probabilities!\ndf$ToxinType = c(as.character(foodborne_ToxTypes), sample(names(ToxinType_counts), size = nrow(df)-diff(botType_range), prob = remaining_freqs_to_prob, replace = T))\n\n#lets see if we've maintained the frequency distribution of the data: \ntotcount_type &lt;- aggregate(Count ~ ToxinType, data = df, FUN = sum) #Aggregate the count sum by the type of toxin\nggplot(totcount_type, aes(x = ToxinType, y = Count)) +\n  geom_bar(stat = \"identity\") + \n  labs(title = \"Distribution of Toxin Type\", x = \"Type of Toxin Outbreak\", y = \"Total Count\") #Make a bar plot with each differing identity of bot type listed on the x axis\n\n\n\n\n\n\n\n\nThe distribution is nearly unchanged, but now most A, B, and E values occur in the same observations as foodborne BotTypes."
  },
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "Data Exercise",
    "section": "",
    "text": "For this data exercise, I will produce a synthetic data set and then use plots and tables to explore the synthetic data. Lastly, I will use a linear model to test the associations built within the data and use a logistic model to test if it is able to capture the same patterns within the synthetic data.\n\n\n\nI will start by opening the packages that I need to create multiple types of data.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(broom)\nlibrary(parsnip)\n\nI will then set a seed, which makes a random string reproducible when ran on another system. I will also give R a number of values to produce.\n\nset.seed(3) #Set seed to 3\nn_patients &lt;- 150 #Make 150 the number of patients\n\nTo create variables, I will begin with an empty data frame. In this example I will use the example of a vaccine trial. This data is not based on a real vaccine trial, but it will have variables that one would find in a clinical trial.\n\nvac_data &lt;- data.frame(\n  patient_id = numeric(n_patients),\n  age = numeric(n_patients),\n  gender = character(n_patients),\n  vac_group = character(n_patients),\n  vac_date = lubridate::as_date(character(n_patients)),\n  disease = integer(n_patients),\n  antibody = numeric(n_patients),\n  adverse_event = integer(n_patients)\n) #Set a blank data frame called vac_data with the variables, patient_id, age, gender, vac_group, vac_date, disease, antibody, and adverse_event\n\nNext, I will begin to generate the data for each of the aforementionned variables in the blank data frame.\n\nvac_data$patient_id &lt;- 1:n_patients #Set random values for patient ID\nvac_data$age &lt;- round(rnorm(n_patients, mean = 25, sd = 5), 1) #Set age to be normally distributed with a mean of 25 and sd of 5\nvac_data$gender &lt;- purrr::map_chr(sample(c(\"male\", \"female\", \"other\"), n_patients, replace= TRUE), as.character) #Set gender to be male, female, or other\nvac_data$vac_group &lt;- purrr::map_chr(sample(c(\"a\", \"b\", \"none\"), n_patients, replace= TRUE), as.character) #Set the vaccine group to a theoretical dose a (a), dose value b (b), or to no vaccine (none)\nvac_data$vac_date &lt;- lubridate::as_date(sample(seq(from = lubridate::as_date(\"2023-01-01\"), to = lubridate::as_date(\"2023-12-31\"), by = \"days\"), n_patients, replace = TRUE)) #Set the date values to be randomly assigned by day between the first day and last day of the year 2023\nvac_data$disease[vac_data$vac_group == \"a\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"a\"), replace = TRUE, prob = c(0.9, 0.1)), as.integer) #Set disease as 1 and no disease as 0, with a 90% vaccine efficacy for vaccine a\nvac_data$disease[vac_data$vac_group == \"b\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"b\"), replace = TRUE, prob = c(0.85, 0.15)), as.integer) #Set vaccine b efficacy to be 85%\nvac_data$disease[vac_data$vac_group == \"none\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"none\"), replace = TRUE, prob = c(0.5, 0.5)), as.integer) #Set the disease outcome to be 50% chances that one will get the disease (1) or not (0) without recieving a vaccine (none)\n\nI initially coded it with the number of items being n_patients, but I received an error because there were less “a”, “b”, and “none” values than the number of patients. To fix this, I asked ChatGPT to show me how not to create extra values in this scenario and it output the sum() function. Each variable would have a total number of values that equals the sum number of vaccine types given. This will not allow it to exceed the maximum and values can be replaced. Additionally, because the disease outcome (0=no, 1=yes) should correspond to the vaccine (a,b, or none), I assigned each vaccine group was assigned an efficacy probability.\nWhen adding an antibody titer variable (antibody) we will assume that the antibody titer is normally distributed in the patients and that vaccine efficacy is positively correlated with antibody titer. This means that vaccine a will have a higher mean than vaccine b. None have very low levels with a high sd to reflect that some individuals may ahev had past exposures to the disease.\n\nvac_data$antibody [vac_data$vac_group == \"a\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"a\"), mean = 40, sd = 5), 1) #The first vaccine has the highest probability of preventing disease so it has the highest mean antibody titer of 1:40 and a small standard deviation\nvac_data$antibody [vac_data$vac_group == \"b\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"b\"), mean = 32, sd = 5), 1) #The second vaccine has the second highest probability of preventing disease so it has the second highest mean antibody titer of 1:32\nvac_data$antibody [vac_data$vac_group == \"none\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"none\"), mean = 10, sd = 10), 1) #No vaccine has a mean of 10 with a high standard deviation, of 10, to account for past exposures at different time points\n\nLastly, adverse events will only occur if the individual has recieved the vaccine. Other conditions seen in the “none” group will not be resorded as adverse events because it would jsut be the placebo effect. Because of this the none group will always have 0 for adverse events.\n\nvac_data$adverse_event [vac_data$vac_group == \"a\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"a\"), replace = TRUE, prob = c(0.6, 0.4)), as.integer) #Setting adverse event probability for vaccine a to 40%\nvac_data$adverse_event [vac_data$vac_group == \"b\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"b\"), replace = TRUE, prob = c(0.8, 0.2)), as.integer) #Setting adverse event probability for vaccine b to 20%\nvac_data$adverse_event [vac_data$vac_group == \"none\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"none\"), replace = TRUE, prob = c(1.0, 0.0)), as.integer)  #Setting adverse event probability for no vaccine to 0%\n\nI will now save the synthetic dataset as a cvs file\n\nwrite.csv(vac_data, here(\"data-exercise\",\"vac_data.csv\"), row.names = FALSE)\n\n\n\n\nI will now check the synthetic data set with summary stats and then examine the structure.\n\nsummary(vac_data) #checking summary stats\n\n   patient_id          age           gender           vac_group        \n Min.   :  1.00   Min.   :13.00   Length:150         Length:150        \n 1st Qu.: 38.25   1st Qu.:21.32   Class :character   Class :character  \n Median : 75.50   Median :25.15   Mode  :character   Mode  :character  \n Mean   : 75.50   Mean   :24.82                                        \n 3rd Qu.:112.75   3rd Qu.:28.48                                        \n Max.   :150.00   Max.   :34.70                                        \n    vac_date             disease          antibody      adverse_event\n Min.   :2023-01-01   Min.   :0.0000   Min.   :-11.20   Min.   :0.0  \n 1st Qu.:2023-04-03   1st Qu.:0.0000   1st Qu.: 22.32   1st Qu.:0.0  \n Median :2023-06-22   Median :0.0000   Median : 32.00   Median :0.0  \n Mean   :2023-06-29   Mean   :0.2467   Mean   : 28.52   Mean   :0.2  \n 3rd Qu.:2023-09-30   3rd Qu.:0.0000   3rd Qu.: 37.77   3rd Qu.:0.0  \n Max.   :2023-12-26   Max.   :1.0000   Max.   : 48.00   Max.   :1.0  \n\nstr(vac_data) #checking data structure\n\n'data.frame':   150 obs. of  8 variables:\n $ patient_id   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ age          : num  20.2 23.5 26.3 19.2 26 25.2 25.4 30.6 18.9 31.3 ...\n $ gender       : chr  \"female\" \"male\" \"male\" \"other\" ...\n $ vac_group    : chr  \"a\" \"none\" \"b\" \"none\" ...\n $ vac_date     : Date, format: \"2023-05-05\" \"2023-05-15\" ...\n $ disease      : int  0 0 0 0 0 1 0 0 0 0 ...\n $ antibody     : num  44.2 20.4 36.7 10.9 35.6 33.2 31.9 39.6 38.1 44.4 ...\n $ adverse_event: int  1 0 0 0 1 1 1 0 0 1 ...\n\n\nI now use a table to check the number if individuals in each vaccine group that had the disease outcome.\n\ntable(vac_data$disease,vac_data$vac_group)#Create table with disease versus vaccine group\n\n   \n     a  b none\n  0 42 52   19\n  1  2 12   23\n\n\nI will now check the distributuion of antibody titer values depending on vaccine group by using a box plot.\n\nggplot(vac_data, aes(x = vac_group, y = antibody)) +\n  geom_boxplot() +\n  labs(x = \"Vaccine Administerred\", y = \"Antibody Titer (1:y)\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThe data should not include values of negative values, so this does not reflect a real-life scenerio. However, I was unable to add a minimum value to the normally distributed, generated data. So these values must be removed through data-cleaning steps before analysis. ## Cleaning synthetic data\n\nvac_data2 &lt;- vac_data %&gt;%\n  filter(antibody &gt;= 0) #Removing zero and negative data\nsummary(vac_data2) #Checking total number of values and that negative values of antibody were removed\n\n   patient_id          age           gender           vac_group        \n Min.   :  1.00   Min.   :13.00   Length:146         Length:146        \n 1st Qu.: 39.25   1st Qu.:21.32   Class :character   Class :character  \n Median : 76.00   Median :25.15   Mode  :character   Mode  :character  \n Mean   : 75.84   Mean   :24.80                                        \n 3rd Qu.:112.75   3rd Qu.:28.40                                        \n Max.   :150.00   Max.   :34.70                                        \n    vac_date             disease         antibody     adverse_event   \n Min.   :2023-01-01   Min.   :0.000   Min.   : 0.10   Min.   :0.0000  \n 1st Qu.:2023-04-02   1st Qu.:0.000   1st Qu.:24.02   1st Qu.:0.0000  \n Median :2023-06-19   Median :0.000   Median :32.70   Median :0.0000  \n Mean   :2023-06-27   Mean   :0.226   Mean   :29.44   Mean   :0.2055  \n 3rd Qu.:2023-09-29   3rd Qu.:0.000   3rd Qu.:38.02   3rd Qu.:0.0000  \n Max.   :2023-12-26   Max.   :1.000   Max.   :48.00   Max.   :1.0000  \n\n\nThree negative values were removed from the antibody column, which reduced the sample. The remaining sample will be used to check for the trends that I built into the data set.\n\n\n\nI will do some data processing before generating models to make the code more robust. First, I select the variables I want to analyze for the built-in trends. Next, I convert the vaccine group variable to a factor instead of a character. Lastly, I check that this was successful with summary stats.\n\nvac_data2 &lt;- vac_data2 %&gt;%  \n  select(vac_group, disease, antibody, adverse_event) #Select the variables to analyze from vac_data2\nvac_data2$vac_group &lt;- as.factor(vac_data2$vac_group) #change vac_group from a character to a factor\nsummary(vac_data2) #check for successful processing\n\n vac_group    disease         antibody     adverse_event   \n a   :44   Min.   :0.000   Min.   : 0.10   Min.   :0.0000  \n b   :64   1st Qu.:0.000   1st Qu.:24.02   1st Qu.:0.0000  \n none:38   Median :0.000   Median :32.70   Median :0.0000  \n           Mean   :0.226   Mean   :29.44   Mean   :0.2055  \n           3rd Qu.:0.000   3rd Qu.:38.02   3rd Qu.:0.0000  \n           Max.   :1.000   Max.   :48.00   Max.   :1.0000  \n\nstr(vac_data2$vac_group) #check that vac_group is a factor\n\n Factor w/ 3 levels \"a\",\"b\",\"none\": 1 3 2 3 1 2 2 1 1 1 ...\n\n\nFirst, I will check the vaccine efficacy trend that I built into the data set. I will use a linear regression model to find associations between disease outcome and vaccine group.\n\nvac_group_disease &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(disease ~ vac_group, data = vac_data2)\ntidy(vac_group_disease)\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic     p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 (Intercept)     0.0455    0.0580     0.784 0.434      \n2 vac_groupb      0.142     0.0753     1.89  0.0614     \n3 vac_groupnone   0.455     0.0852     5.34  0.000000364\n\n\nIt seems that neither vaccine group b or no vaccine correlate with disease outcome. In this case, the vaccine b would not be effective. instead, we want to look at another model to display the data trends. I will try using a linear model with interactions between antibody and vaccine group variables.\n\nvac_group_disease2 &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(disease ~ vac_group + antibody + antibody*vac_group, data = vac_data2)\ntidy(vac_group_disease2)\n\n# A tibble: 6 × 5\n  term                   estimate std.error statistic p.value\n  &lt;chr&gt;                     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)            -0.101      0.507     -0.200   0.842\n2 vac_groupb              0.607      0.615      0.988   0.325\n3 vac_groupnone           0.653      0.520      1.26    0.211\n4 antibody                0.00369    0.0127     0.291   0.771\n5 vac_groupb:antibody    -0.0137     0.0167    -0.822   0.413\n6 vac_groupnone:antibody -0.00756    0.0146    -0.516   0.606\n\n\nThis table shows an that when considering the interaction of the antibody levels and vaccine group, there is a negative association with disease. However, this association is not statistically significant. This tells me that I should be using a logistic regression model instead. I will produce a logistic regression with vaccine group versus disease outcome.To use logistic regression, I must first change disease to a factor.\n\nvac_data2$disease &lt;- factor(vac_data2$disease) #convert disease into a factor rather than an integer\nvac_group_disease3 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\", family = binomial) %&gt;%\n  parsnip::fit(disease ~ vac_group, data = vac_data2)\ntidy(vac_group_disease3) #I used ChatGPT to help me convert the previous code I used for a linear model to code that produces a logistic regression\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic   p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)      -3.04     0.724     -4.21 0.0000259\n2 vac_groupb        1.58     0.791      1.99 0.0461   \n3 vac_groupnone     3.04     0.793      3.84 0.000124 \n\n\nThe vac group b has a lower disease outcome estimate than the none group, despite them both being positive. The p-value for both groups is p&lt;0.05.\nNow, I will check the antibody titer trends that I built into the data set. I will use a linear regression model to find associations between the vaccine group and antibody levels.\n\nvac_group_antibody &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(antibody ~ vac_group, data = vac_data2)\ntidy(vac_group_antibody)\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic  p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)      39.7      0.890     44.6  8.22e-86\n2 vac_groupb       -7.91     1.16      -6.84 2.14e-10\n3 vac_groupnone   -26.2      1.31     -20.0  2.31e-43\n\n\nIt seems that both estimates are negative, with the vaccine group having a greater estimate than the none group, which is consistent with the trend of greater antibody levels in those that received the vaccine.\nLastly, I will check the adverse effect trends that I built into the data set. will use a logistic regression model to find associations between the vaccine group and adverse effects.\n\nvac_data2$adverse_event &lt;- factor(vac_data2$adverse_event) #convert adverse event into a factor rather than an integer\nvac_group_ae &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\", family = binomial) %&gt;%\n  parsnip::fit(adverse_event ~ vac_group, data = vac_data2)\ntidy(vac_group_ae) #logistic regression of adverse event (outcome) depending on vaccine group\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)     -0.274     0.304   -0.902  0.367  \n2 vac_groupb      -1.30      0.450   -2.89   0.00391\n3 vac_groupnone  -18.3    1058.      -0.0173 0.986  \n\n\nThere is a higher estimate for adverse events for the vaccine group b than the none group. However, this estimate is only statistically significant for the vaccine group b.\nOverall, I cannot conclude that the synthetic data produced had my intended built-in-trends. However, more complex models such as multivariate regressions, might be able to identify these trends."
  },
  {
    "objectID": "data-exercise/data-exercise.html#option-2",
    "href": "data-exercise/data-exercise.html#option-2",
    "title": "Data Exercise",
    "section": "",
    "text": "For this data exercise, I will produce a synthetic data set and then use plots and tables to explore the synthetic data. Lastly, I will use a linear model to test the associations built within the data and use a logistic model to test if it is able to capture the same patterns within the synthetic data."
  },
  {
    "objectID": "data-exercise/data-exercise.html#generating-synthetic-data",
    "href": "data-exercise/data-exercise.html#generating-synthetic-data",
    "title": "Data Exercise",
    "section": "",
    "text": "I will start by opening the packages that I need to create multiple types of data.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(broom)\nlibrary(parsnip)\n\nI will then set a seed, which makes a random string reproducible when ran on another system. I will also give R a number of values to produce.\n\nset.seed(3) #Set seed to 3\nn_patients &lt;- 150 #Make 150 the number of patients\n\nTo create variables, I will begin with an empty data frame. In this example I will use the example of a vaccine trial. This data is not based on a real vaccine trial, but it will have variables that one would find in a clinical trial.\n\nvac_data &lt;- data.frame(\n  patient_id = numeric(n_patients),\n  age = numeric(n_patients),\n  gender = character(n_patients),\n  vac_group = character(n_patients),\n  vac_date = lubridate::as_date(character(n_patients)),\n  disease = integer(n_patients),\n  antibody = numeric(n_patients),\n  adverse_event = integer(n_patients)\n) #Set a blank data frame called vac_data with the variables, patient_id, age, gender, vac_group, vac_date, disease, antibody, and adverse_event\n\nNext, I will begin to generate the data for each of the aforementionned variables in the blank data frame.\n\nvac_data$patient_id &lt;- 1:n_patients #Set random values for patient ID\nvac_data$age &lt;- round(rnorm(n_patients, mean = 25, sd = 5), 1) #Set age to be normally distributed with a mean of 25 and sd of 5\nvac_data$gender &lt;- purrr::map_chr(sample(c(\"male\", \"female\", \"other\"), n_patients, replace= TRUE), as.character) #Set gender to be male, female, or other\nvac_data$vac_group &lt;- purrr::map_chr(sample(c(\"a\", \"b\", \"none\"), n_patients, replace= TRUE), as.character) #Set the vaccine group to a theoretical dose a (a), dose value b (b), or to no vaccine (none)\nvac_data$vac_date &lt;- lubridate::as_date(sample(seq(from = lubridate::as_date(\"2023-01-01\"), to = lubridate::as_date(\"2023-12-31\"), by = \"days\"), n_patients, replace = TRUE)) #Set the date values to be randomly assigned by day between the first day and last day of the year 2023\nvac_data$disease[vac_data$vac_group == \"a\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"a\"), replace = TRUE, prob = c(0.9, 0.1)), as.integer) #Set disease as 1 and no disease as 0, with a 90% vaccine efficacy for vaccine a\nvac_data$disease[vac_data$vac_group == \"b\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"b\"), replace = TRUE, prob = c(0.85, 0.15)), as.integer) #Set vaccine b efficacy to be 85%\nvac_data$disease[vac_data$vac_group == \"none\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"none\"), replace = TRUE, prob = c(0.5, 0.5)), as.integer) #Set the disease outcome to be 50% chances that one will get the disease (1) or not (0) without recieving a vaccine (none)\n\nI initially coded it with the number of items being n_patients, but I received an error because there were less “a”, “b”, and “none” values than the number of patients. To fix this, I asked ChatGPT to show me how not to create extra values in this scenario and it output the sum() function. Each variable would have a total number of values that equals the sum number of vaccine types given. This will not allow it to exceed the maximum and values can be replaced. Additionally, because the disease outcome (0=no, 1=yes) should correspond to the vaccine (a,b, or none), I assigned each vaccine group was assigned an efficacy probability.\nWhen adding an antibody titer variable (antibody) we will assume that the antibody titer is normally distributed in the patients and that vaccine efficacy is positively correlated with antibody titer. This means that vaccine a will have a higher mean than vaccine b. None have very low levels with a high sd to reflect that some individuals may ahev had past exposures to the disease.\n\nvac_data$antibody [vac_data$vac_group == \"a\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"a\"), mean = 40, sd = 5), 1) #The first vaccine has the highest probability of preventing disease so it has the highest mean antibody titer of 1:40 and a small standard deviation\nvac_data$antibody [vac_data$vac_group == \"b\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"b\"), mean = 32, sd = 5), 1) #The second vaccine has the second highest probability of preventing disease so it has the second highest mean antibody titer of 1:32\nvac_data$antibody [vac_data$vac_group == \"none\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"none\"), mean = 10, sd = 10), 1) #No vaccine has a mean of 10 with a high standard deviation, of 10, to account for past exposures at different time points\n\nLastly, adverse events will only occur if the individual has recieved the vaccine. Other conditions seen in the “none” group will not be resorded as adverse events because it would jsut be the placebo effect. Because of this the none group will always have 0 for adverse events.\n\nvac_data$adverse_event [vac_data$vac_group == \"a\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"a\"), replace = TRUE, prob = c(0.6, 0.4)), as.integer) #Setting adverse event probability for vaccine a to 40%\nvac_data$adverse_event [vac_data$vac_group == \"b\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"b\"), replace = TRUE, prob = c(0.8, 0.2)), as.integer) #Setting adverse event probability for vaccine b to 20%\nvac_data$adverse_event [vac_data$vac_group == \"none\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"none\"), replace = TRUE, prob = c(1.0, 0.0)), as.integer)  #Setting adverse event probability for no vaccine to 0%\n\nI will now save the synthetic dataset as a cvs file\n\nwrite.csv(vac_data, here(\"data-exercise\",\"vac_data.csv\"), row.names = FALSE)"
  },
  {
    "objectID": "data-exercise/data-exercise.html#checking-the-synthetic-data-set",
    "href": "data-exercise/data-exercise.html#checking-the-synthetic-data-set",
    "title": "Data Exercise",
    "section": "",
    "text": "I will now check the synthetic data set with summary stats and then examine the structure.\n\nsummary(vac_data) #checking summary stats\n\n   patient_id          age           gender           vac_group        \n Min.   :  1.00   Min.   :13.00   Length:150         Length:150        \n 1st Qu.: 38.25   1st Qu.:21.32   Class :character   Class :character  \n Median : 75.50   Median :25.15   Mode  :character   Mode  :character  \n Mean   : 75.50   Mean   :24.82                                        \n 3rd Qu.:112.75   3rd Qu.:28.48                                        \n Max.   :150.00   Max.   :34.70                                        \n    vac_date             disease          antibody      adverse_event\n Min.   :2023-01-01   Min.   :0.0000   Min.   :-11.20   Min.   :0.0  \n 1st Qu.:2023-04-03   1st Qu.:0.0000   1st Qu.: 22.32   1st Qu.:0.0  \n Median :2023-06-22   Median :0.0000   Median : 32.00   Median :0.0  \n Mean   :2023-06-29   Mean   :0.2467   Mean   : 28.52   Mean   :0.2  \n 3rd Qu.:2023-09-30   3rd Qu.:0.0000   3rd Qu.: 37.77   3rd Qu.:0.0  \n Max.   :2023-12-26   Max.   :1.0000   Max.   : 48.00   Max.   :1.0  \n\nstr(vac_data) #checking data structure\n\n'data.frame':   150 obs. of  8 variables:\n $ patient_id   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ age          : num  20.2 23.5 26.3 19.2 26 25.2 25.4 30.6 18.9 31.3 ...\n $ gender       : chr  \"female\" \"male\" \"male\" \"other\" ...\n $ vac_group    : chr  \"a\" \"none\" \"b\" \"none\" ...\n $ vac_date     : Date, format: \"2023-05-05\" \"2023-05-15\" ...\n $ disease      : int  0 0 0 0 0 1 0 0 0 0 ...\n $ antibody     : num  44.2 20.4 36.7 10.9 35.6 33.2 31.9 39.6 38.1 44.4 ...\n $ adverse_event: int  1 0 0 0 1 1 1 0 0 1 ...\n\n\nI now use a table to check the number if individuals in each vaccine group that had the disease outcome.\n\ntable(vac_data$disease,vac_data$vac_group)#Create table with disease versus vaccine group\n\n   \n     a  b none\n  0 42 52   19\n  1  2 12   23\n\n\nI will now check the distributuion of antibody titer values depending on vaccine group by using a box plot.\n\nggplot(vac_data, aes(x = vac_group, y = antibody)) +\n  geom_boxplot() +\n  labs(x = \"Vaccine Administerred\", y = \"Antibody Titer (1:y)\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThe data should not include values of negative values, so this does not reflect a real-life scenerio. However, I was unable to add a minimum value to the normally distributed, generated data. So these values must be removed through data-cleaning steps before analysis. ## Cleaning synthetic data\n\nvac_data2 &lt;- vac_data %&gt;%\n  filter(antibody &gt;= 0) #Removing zero and negative data\nsummary(vac_data2) #Checking total number of values and that negative values of antibody were removed\n\n   patient_id          age           gender           vac_group        \n Min.   :  1.00   Min.   :13.00   Length:146         Length:146        \n 1st Qu.: 39.25   1st Qu.:21.32   Class :character   Class :character  \n Median : 76.00   Median :25.15   Mode  :character   Mode  :character  \n Mean   : 75.84   Mean   :24.80                                        \n 3rd Qu.:112.75   3rd Qu.:28.40                                        \n Max.   :150.00   Max.   :34.70                                        \n    vac_date             disease         antibody     adverse_event   \n Min.   :2023-01-01   Min.   :0.000   Min.   : 0.10   Min.   :0.0000  \n 1st Qu.:2023-04-02   1st Qu.:0.000   1st Qu.:24.02   1st Qu.:0.0000  \n Median :2023-06-19   Median :0.000   Median :32.70   Median :0.0000  \n Mean   :2023-06-27   Mean   :0.226   Mean   :29.44   Mean   :0.2055  \n 3rd Qu.:2023-09-29   3rd Qu.:0.000   3rd Qu.:38.02   3rd Qu.:0.0000  \n Max.   :2023-12-26   Max.   :1.000   Max.   :48.00   Max.   :1.0000  \n\n\nThree negative values were removed from the antibody column, which reduced the sample. The remaining sample will be used to check for the trends that I built into the data set."
  },
  {
    "objectID": "data-exercise/data-exercise.html#checking-the-trends",
    "href": "data-exercise/data-exercise.html#checking-the-trends",
    "title": "Data Exercise",
    "section": "",
    "text": "I will do some data processing before generating models to make the code more robust. First, I select the variables I want to analyze for the built-in trends. Next, I convert the vaccine group variable to a factor instead of a character. Lastly, I check that this was successful with summary stats.\n\nvac_data2 &lt;- vac_data2 %&gt;%  \n  select(vac_group, disease, antibody, adverse_event) #Select the variables to analyze from vac_data2\nvac_data2$vac_group &lt;- as.factor(vac_data2$vac_group) #change vac_group from a character to a factor\nsummary(vac_data2) #check for successful processing\n\n vac_group    disease         antibody     adverse_event   \n a   :44   Min.   :0.000   Min.   : 0.10   Min.   :0.0000  \n b   :64   1st Qu.:0.000   1st Qu.:24.02   1st Qu.:0.0000  \n none:38   Median :0.000   Median :32.70   Median :0.0000  \n           Mean   :0.226   Mean   :29.44   Mean   :0.2055  \n           3rd Qu.:0.000   3rd Qu.:38.02   3rd Qu.:0.0000  \n           Max.   :1.000   Max.   :48.00   Max.   :1.0000  \n\nstr(vac_data2$vac_group) #check that vac_group is a factor\n\n Factor w/ 3 levels \"a\",\"b\",\"none\": 1 3 2 3 1 2 2 1 1 1 ...\n\n\nFirst, I will check the vaccine efficacy trend that I built into the data set. I will use a linear regression model to find associations between disease outcome and vaccine group.\n\nvac_group_disease &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(disease ~ vac_group, data = vac_data2)\ntidy(vac_group_disease)\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic     p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 (Intercept)     0.0455    0.0580     0.784 0.434      \n2 vac_groupb      0.142     0.0753     1.89  0.0614     \n3 vac_groupnone   0.455     0.0852     5.34  0.000000364\n\n\nIt seems that neither vaccine group b or no vaccine correlate with disease outcome. In this case, the vaccine b would not be effective. instead, we want to look at another model to display the data trends. I will try using a linear model with interactions between antibody and vaccine group variables.\n\nvac_group_disease2 &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(disease ~ vac_group + antibody + antibody*vac_group, data = vac_data2)\ntidy(vac_group_disease2)\n\n# A tibble: 6 × 5\n  term                   estimate std.error statistic p.value\n  &lt;chr&gt;                     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)            -0.101      0.507     -0.200   0.842\n2 vac_groupb              0.607      0.615      0.988   0.325\n3 vac_groupnone           0.653      0.520      1.26    0.211\n4 antibody                0.00369    0.0127     0.291   0.771\n5 vac_groupb:antibody    -0.0137     0.0167    -0.822   0.413\n6 vac_groupnone:antibody -0.00756    0.0146    -0.516   0.606\n\n\nThis table shows an that when considering the interaction of the antibody levels and vaccine group, there is a negative association with disease. However, this association is not statistically significant. This tells me that I should be using a logistic regression model instead. I will produce a logistic regression with vaccine group versus disease outcome.To use logistic regression, I must first change disease to a factor.\n\nvac_data2$disease &lt;- factor(vac_data2$disease) #convert disease into a factor rather than an integer\nvac_group_disease3 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\", family = binomial) %&gt;%\n  parsnip::fit(disease ~ vac_group, data = vac_data2)\ntidy(vac_group_disease3) #I used ChatGPT to help me convert the previous code I used for a linear model to code that produces a logistic regression\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic   p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)      -3.04     0.724     -4.21 0.0000259\n2 vac_groupb        1.58     0.791      1.99 0.0461   \n3 vac_groupnone     3.04     0.793      3.84 0.000124 \n\n\nThe vac group b has a lower disease outcome estimate than the none group, despite them both being positive. The p-value for both groups is p&lt;0.05.\nNow, I will check the antibody titer trends that I built into the data set. I will use a linear regression model to find associations between the vaccine group and antibody levels.\n\nvac_group_antibody &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(antibody ~ vac_group, data = vac_data2)\ntidy(vac_group_antibody)\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic  p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)      39.7      0.890     44.6  8.22e-86\n2 vac_groupb       -7.91     1.16      -6.84 2.14e-10\n3 vac_groupnone   -26.2      1.31     -20.0  2.31e-43\n\n\nIt seems that both estimates are negative, with the vaccine group having a greater estimate than the none group, which is consistent with the trend of greater antibody levels in those that received the vaccine.\nLastly, I will check the adverse effect trends that I built into the data set. will use a logistic regression model to find associations between the vaccine group and adverse effects.\n\nvac_data2$adverse_event &lt;- factor(vac_data2$adverse_event) #convert adverse event into a factor rather than an integer\nvac_group_ae &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\", family = binomial) %&gt;%\n  parsnip::fit(adverse_event ~ vac_group, data = vac_data2)\ntidy(vac_group_ae) #logistic regression of adverse event (outcome) depending on vaccine group\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)     -0.274     0.304   -0.902  0.367  \n2 vac_groupb      -1.30      0.450   -2.89   0.00391\n3 vac_groupnone  -18.3    1058.      -0.0173 0.986  \n\n\nThere is a higher estimate for adverse events for the vaccine group b than the none group. However, this estimate is only statistically significant for the vaccine group b.\nOverall, I cannot conclude that the synthetic data produced had my intended built-in-trends. However, more complex models such as multivariate regressions, might be able to identify these trends."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rachel’s Website and Data Analysis Portfolio",
    "section": "",
    "text": "Use the ‘Menu Bar’ above to learn more ‘About me’ and my ‘Projects’"
  },
  {
    "objectID": "index.html#hello-everyone",
    "href": "index.html#hello-everyone",
    "title": "Rachel’s Website and Data Analysis Portfolio",
    "section": "",
    "text": "Use the ‘Menu Bar’ above to learn more ‘About me’ and my ‘Projects’"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html#for-your-own-explorations-tables-and-figures-can-be-quick-and-dirty.-as-long-as-you-can-see-whats-going-on-there-is-no-need-to-polish-them.-thats-in-contrast-to-figures-youll-produce-for-your-final-products-paper-report-presentation-website-etc..-those-should-look-as-nice-polished-and-easy-to-understand-as-possible.",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html#for-your-own-explorations-tables-and-figures-can-be-quick-and-dirty.-as-long-as-you-can-see-whats-going-on-there-is-no-need-to-polish-them.-thats-in-contrast-to-figures-youll-produce-for-your-final-products-paper-report-presentation-website-etc..-those-should-look-as-nice-polished-and-easy-to-understand-as-possible.",
    "title": "An example exploratory analysis script",
    "section": "For your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible.",
    "text": "For your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  }
]