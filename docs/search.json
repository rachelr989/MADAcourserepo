[
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "The following is a template for the final analysis project. The “Starter Analysis” figures and table are featured below.\n\n\n\n\nCora produced a box plot displaying hair color versus height. Because there were one ginger and two blondes, of the same height, the box plot is not evenly distributed.\n\n\n\n\n\nHeight (y-axis) plotted against hair color (x axis).\n\n\n\n\n\n\n\nCora produced a scatter plot of weight versus haircount. The scatter plot displays no trend between the two variables.\n\n\n\n\n\nWeight (y axis) versus haircount (x axis).\n\n\n\n\n\n\n\nI produced a linear model fitting haircolor and haircount to the outcome of height. I had to change the variable names to exclude spaces so that the linear model function would recognize the variables.\n\n\n\nLinear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n196.0050251\n68.7506205\n2.8509565\n0.0463510\n\n\nHaircolorblonde\n17.0251256\n21.3696883\n0.7966951\n0.4702399\n\n\nHaircolorbrown\n11.1340034\n16.3855004\n0.6795034\n0.5341073\n\n\nHaircolorginger\n28.0653266\n24.4315134\n1.1487347\n0.3146867\n\n\nHaircount\n-0.0003839\n0.0006569\n-0.5844580\n0.5902885\n\n\n\n\n\n\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#cora-hirst-contributed-to-the-starter-analysis-portion-of-this-project",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#cora-hirst-contributed-to-the-starter-analysis-portion-of-this-project",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "The following is a template for the final analysis project. The “Starter Analysis” figures and table are featured below.\n\n\n\n\nCora produced a box plot displaying hair color versus height. Because there were one ginger and two blondes, of the same height, the box plot is not evenly distributed.\n\n\n\n\n\nHeight (y-axis) plotted against hair color (x axis).\n\n\n\n\n\n\n\nCora produced a scatter plot of weight versus haircount. The scatter plot displays no trend between the two variables.\n\n\n\n\n\nWeight (y axis) versus haircount (x axis).\n\n\n\n\n\n\n\nI produced a linear model fitting haircolor and haircount to the outcome of height. I had to change the variable names to exclude spaces so that the linear model function would recognize the variables.\n\n\n\nLinear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n196.0050251\n68.7506205\n2.8509565\n0.0463510\n\n\nHaircolorblonde\n17.0251256\n21.3696883\n0.7966951\n0.4702399\n\n\nHaircolorbrown\n11.1340034\n16.3855004\n0.6795034\n0.5341073\n\n\nHaircolorginger\n28.0653266\n24.4315134\n1.1487347\n0.3146867\n\n\nHaircount\n-0.0003839\n0.0006569\n-0.5844580\n0.5902885\n\n\n\n\n\n\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nHaircolor\n0\n1\nFALSE\n4\nbla: 3, bro: 3, blo: 2, gin: 1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nHaircount\n0\n1\nNA\nNA\nNA\n106666.66667\n15612.49500\n90000\n95000\n100000\n120000\n135000\n▇▅▂▅▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender.\n\n\n\n\n\n~Figure 1. Weight (y axis) versus height (x axis) stratified by gender~"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871\n\n\n\n\n\n\n\n\n~Table 1. Linear Model of Gender and weight~"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl)#for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`        \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                   \n1 Height          height in centimeters                 numeric value &gt;0 or NA  \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA  \n3 Gender          identified gender (male/female/other) M/F/O/NA                \n4 Haircount       number of hairs on head               numeric value from 9000…\n5 Haircolor       color of hair on head                 black/brown/blonde/ging…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height    &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155…\n$ Weight    &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender    &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\",…\n$ Haircount &lt;dbl&gt; 100000, 95000, 130000, 120000, 150000, 100000, 90000, 110000…\n$ Haircolor &lt;chr&gt; \"black\", \"brown\", \"blonde\", \"ginger\", \"brown\", \"brown\", \"bla…\n\nsummary(rawdata)\n\n    Height              Weight          Gender            Haircount     \n Length:14          Min.   :  45.0   Length:14          Min.   : 90000  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.:100000  \n Mode  :character   Median :  70.0   Mode  :character   Median :120000  \n                    Mean   : 602.7                      Mean   :118214  \n                    3rd Qu.:  90.0                      3rd Qu.:133750  \n                    Max.   :7000.0                      Max.   :150000  \n                    NA's   :1                                           \n  Haircolor        \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Haircount Haircolor\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;    \n1 180        80 M         100000 black    \n2 175        70 O          95000 brown    \n3 sixty      60 F         130000 blonde   \n4 178        76 F         120000 ginger   \n5 192        90 NA        150000 brown    \n6 6          55 F         100000 brown    \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\nHaircount\n0\n1.00\n118214.29\n21177.56\n90000\n100000\n120000\n133750\n150000\n▇▂▅▃▅\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nHaircount\n0\n1.00\n117307.69\n21757.70\n90000\n100000.00\n120000\n135000\n150000\n▇▂▅▂▅\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nHaircount\n0\n1.00\n117307.69\n21757.70\n90000\n100000.00\n120000\n135000\n150000\n▇▂▅▂▅\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nHaircount\n0\n1\n112272.73\n19540.17\n90000\n97500.0\n110000\n122500\n150000\n▇▂▅▂▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nHaircount\n0\n1\n112272.73\n19540.17\n90000\n97500.0\n110000\n122500\n150000\n▇▂▅▂▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHaircolor\n0\n1\n5\n6\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nHaircount\n0\n1\n106666.67\n15612.49\n90000\n95000\n100000\n120000\n135000\n▇▅▂▅▂\n\n\n\n\n\nTo take a look at the new variables, I used the skim function to make sure the new numerical variable of haircount is clean. There are no missing variables, and all the observations fall within the range specified in the codebook. After checking the hair color variable type using the glimpse() function, I realized it needs to be changed to a factor variable. I took another glimpse at the data to confirm my change worked correctly.\n\nskim(d4$Haircount)\n\n\nData summary\n\n\nName\nd4$Haircount\n\n\nNumber of rows\n9\n\n\nNumber of columns\n1\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndata\n0\n1\n106666.7\n15612.49\n90000\n95000\n1e+05\n120000\n135000\n▇▅▂▅▂\n\n\n\n\nglimpse(d4)\n\nRows: 9\nColumns: 5\n$ Height    &lt;dbl&gt; 180, 175, 178, 183, 156, 166, 133, 166, 154\n$ Weight    &lt;dbl&gt; 80, 70, 76, 55, 90, 110, 45, 55, 50\n$ Gender    &lt;fct&gt; M, O, F, F, O, M, F, M, M\n$ Haircount &lt;dbl&gt; 100000, 95000, 120000, 100000, 90000, 110000, 120000, 135000…\n$ Haircolor &lt;chr&gt; \"black\", \"brown\", \"ginger\", \"brown\", \"black\", \"blonde\", \"bla…\n\nd4$Haircolor &lt;- as.factor(d4$Haircolor)\nglimpse(d4)\n\nRows: 9\nColumns: 5\n$ Height    &lt;dbl&gt; 180, 175, 178, 183, 156, 166, 133, 166, 154\n$ Weight    &lt;dbl&gt; 80, 70, 76, 55, 90, 110, 45, 55, 50\n$ Gender    &lt;fct&gt; M, O, F, F, O, M, F, M, M\n$ Haircount &lt;dbl&gt; 100000, 95000, 120000, 100000, 90000, 110000, 120000, 135000…\n$ Haircolor &lt;fct&gt; black, brown, ginger, brown, black, blonde, black, blonde, b…\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Placeholder file for the future data/results presentation exercise."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rachel’s Website and Data Analysis Portfolio",
    "section": "",
    "text": "Use the ‘Menu Bar’ above to learn more ‘About me’ and my ‘Projects’"
  },
  {
    "objectID": "index.html#hello-everyone",
    "href": "index.html#hello-everyone",
    "title": "Rachel’s Website and Data Analysis Portfolio",
    "section": "",
    "text": "Use the ‘Menu Bar’ above to learn more ‘About me’ and my ‘Projects’"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Today I will practice coding by working with the gapminder data from the dslabs package. First I will load the packages that I need by using the library() function.\n\n\n\nlibrary(dslabs)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(dplyr)"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#setting-up-the-packages",
    "href": "coding-exercise/coding-exercise.html#setting-up-the-packages",
    "title": "R Coding Exercise",
    "section": "",
    "text": "library(dslabs)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(dplyr)"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#exploring-gapminder-dataframe",
    "href": "coding-exercise/coding-exercise.html#exploring-gapminder-dataframe",
    "title": "R Coding Exercise",
    "section": "Exploring gapminder dataframe",
    "text": "Exploring gapminder dataframe\n\nhelp(gapminder) ## Viewing help file from gapminder \n\nstarting httpd help server ... done\n\nstr(gapminder) ## Viewing the structure of gapminder\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\nsummary(gapminder) ## Viewing the data summary statistics of gapminder data\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\nclass(gapminder) ## Determining the type of object gapminder is\n\n[1] \"data.frame\""
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#assign-african-countries-to-a-variable-called-africa-data",
    "href": "coding-exercise/coding-exercise.html#assign-african-countries-to-a-variable-called-africa-data",
    "title": "R Coding Exercise",
    "section": "Assign african countries to a variable called africa data",
    "text": "Assign african countries to a variable called africa data\n\nafricadata &lt;- gapminder %&gt;%\n  filter(continent == \"Africa\") \n##I filter the data to only include data from Africa in the new object entitled africadata\n\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n\nThe number of values is correct in the Summary data, so I will continue to creating new objects"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#creating-object-containing-infant_mortality-and-life_expectancy-under-d2",
    "href": "coding-exercise/coding-exercise.html#creating-object-containing-infant_mortality-and-life_expectancy-under-d2",
    "title": "R Coding Exercise",
    "section": "Creating object containing infant_mortality and life_expectancy under d2",
    "text": "Creating object containing infant_mortality and life_expectancy under d2\n\nd2 &lt;- africadata %&gt;%\n  select(life_expectancy, infant_mortality) ##I create an object from africadata that only includes the life expectancy and infant mortality from that object.\n  \nsummary(d2) ##I check to make sure that the object includes the two variables life expectancy and infant mortality only\n\n life_expectancy infant_mortality\n Min.   :13.20   Min.   : 11.40  \n 1st Qu.:48.23   1st Qu.: 62.20  \n Median :53.98   Median : 93.40  \n Mean   :54.38   Mean   : 95.12  \n 3rd Qu.:60.10   3rd Qu.:124.70  \n Max.   :77.60   Max.   :237.40  \n                 NA's   :226"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#creating-object-containing-population-and-life_expectancy-under-d3",
    "href": "coding-exercise/coding-exercise.html#creating-object-containing-population-and-life_expectancy-under-d3",
    "title": "R Coding Exercise",
    "section": "Creating object containing population and life_expectancy under d3",
    "text": "Creating object containing population and life_expectancy under d3\n\nd3 &lt;- africadata %&gt;%\n  select(life_expectancy, population) ##I make a new object from africadata that only includes the life expectancy and population variables\n  \nsummary(d3) ##I check to confirm that the columns are correct\n\n life_expectancy   population       \n Min.   :13.20   Min.   :    41538  \n 1st Qu.:48.23   1st Qu.:  1605232  \n Median :53.98   Median :  5570982  \n Mean   :54.38   Mean   : 12235961  \n 3rd Qu.:60.10   3rd Qu.: 13888152  \n Max.   :77.60   Max.   :182201962  \n                 NA's   :51"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plot-life-expectancy-as-a-funciton-of-infant-mortality",
    "href": "coding-exercise/coding-exercise.html#plot-life-expectancy-as-a-funciton-of-infant-mortality",
    "title": "R Coding Exercise",
    "section": "Plot life expectancy as a funciton of infant mortality",
    "text": "Plot life expectancy as a funciton of infant mortality\n\nlifevim_plot &lt;- ggplot(d2, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. Infant Mortality\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\") ## I use ggplot and the d2 object to plot infant mortality versus life expectancy\n    \n  print(lifevim_plot) ## I print the plot below\n\nWarning: Removed 226 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plot-life-expectancy-as-a-function-of-populaiton-size-using-ggplot2",
    "href": "coding-exercise/coding-exercise.html#plot-life-expectancy-as-a-function-of-populaiton-size-using-ggplot2",
    "title": "R Coding Exercise",
    "section": "Plot life expectancy as a function of populaiton size using ggplot2",
    "text": "Plot life expectancy as a function of populaiton size using ggplot2\n\nlifevpop_plot &lt;- ggplot(d3, aes(x = log(population), y = life_expectancy)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. log(Population)\",\n       x = \"Log(Population)\",\n       y = \"Life Expectancy\") ## I use ggplot to plot the log of population as log(pop) versus life expectancy\n      \n  print(lifevpop_plot) ## I print this plot\n\nWarning: Removed 51 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#looking-at-differences-in-life_expectancy-versus-infant_mortality-by-other-variables",
    "href": "coding-exercise/coding-exercise.html#looking-at-differences-in-life_expectancy-versus-infant_mortality-by-other-variables",
    "title": "R Coding Exercise",
    "section": "Looking at differences in life_expectancy versus infant_mortality by other variables",
    "text": "Looking at differences in life_expectancy versus infant_mortality by other variables\nI begin by looking at differences in infant_morality and life_expectancy by country using the same plot, but with color.\n\nlifevim_plot2 &lt;- ggplot(africadata, aes(x = infant_mortality, y = life_expectancy, color = country)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. Infant Mortality\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\") ##I make a plot using africadata because this includes country as well as infant mortality and life expectancy\n    \n  print(lifevim_plot2) ## I print the plot to check it\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nI observe differences in the rate depending on the country. Next, I will check to made sure the differences are not due to regional trends.\n\nlifevim_plot3 &lt;- ggplot(africadata, aes(x = infant_mortality, y = life_expectancy, color = region)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. Infant Mortality\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\")\n    \n  print(lifevim_plot3)\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nThere are multiple streaks of the same color, but on different linear planes. It seems that country is the determinant of infant mortality and life expectancy, so I do a faceted plot to show eahc individual country and confirm this.\n\nlifevim_plot4 &lt;- ggplot(africadata, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point() +\n  facet_wrap(~country) +\n  labs(title = \"Life Expectancy vs. Infant Mortality by Country\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\") ## ChatGPT offered the facet_wrap function which separately plots the country variable by value\nprint(lifevim_plot4)\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nWith this plot, you can see that each country has a streat that decreases over time. The explaination for the streaks in the life expectancy versus infant mortality trends is that infant mortality differs by country, which leads life expectancy to also differ by African country. The rates change over the timeframe displayed."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#now-i-will-confirm-that-the-life_expectancy-and-population-streaks-are-also-due-to-differeces-in-the-country",
    "href": "coding-exercise/coding-exercise.html#now-i-will-confirm-that-the-life_expectancy-and-population-streaks-are-also-due-to-differeces-in-the-country",
    "title": "R Coding Exercise",
    "section": "Now, I will confirm that the life_expectancy and population streaks are also due to differeces in the country",
    "text": "Now, I will confirm that the life_expectancy and population streaks are also due to differeces in the country\n\nlifevpop_plot2 &lt;- ggplot(africadata, aes(x = log(population), y = life_expectancy, color = country)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. log(Population) by Country\",\n       x = \"Log(Population)\",\n       y = \"Life Expectancy\")\n      \n  print(lifevpop_plot2)\n\nWarning: Removed 51 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nEach country contains a different colored streak, confirming that life expectancy is positively related to population depending on each country. This is because the life expectancy differs for each country, resulting in different population sums, despite having a similar overall trend.\nI will now examine differences in the plot by year to see if this differs by country. I first do this with the life expectancy versus infant mortality plot\n\nlifevim_plot5 &lt;- ggplot(africadata, aes(x = infant_mortality, y = life_expectancy, color = country)) +\n  geom_point() +\n   facet_grid(year ~ ., scales = \"free_y\") +\n  labs(title = \"Life Expectancy vs. Infant Mortality stratified by year and colored by country\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\") ## Adding the year variable to the facet grid allow year to be seperated. ChatGPT suggested using scaled= free_y as to not make a seperate plot for eahc year, but display the differences on the same plot\n    \n  print(lifevim_plot5)\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nWith each line representing a year, it seems that the life expectancy moves upwards each year. I will now confirm that this is also the case for the life expectancy versus population.\n\nlifevpop_plot3 &lt;- ggplot(africadata, aes(x = log(population), y = life_expectancy, color = country)) +\n  geom_point() +\n   facet_grid(year ~ ., scales = \"free_y\") +\n  labs(title = \"Life Expectancy vs. log(Population) by Country\",\n       x = \"Log(Population)\",\n       y = \"Life Expectancy\")\n      \n  print(lifevpop_plot3)\n\nWarning: Removed 51 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nThis upwards trend is displayed by country in this plot as well, confirming that the country and year impact the life expectancy-based trends."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#now-i-will-use-a-code-to-find-which-years-have-missing-values-for-infant-mortality",
    "href": "coding-exercise/coding-exercise.html#now-i-will-use-a-code-to-find-which-years-have-missing-values-for-infant-mortality",
    "title": "R Coding Exercise",
    "section": "Now I will use a code to find which years have missing values for infant mortality",
    "text": "Now I will use a code to find which years have missing values for infant mortality\n\nmissingvalues &lt;- unique(africadata[!complete.cases(africadata$infant_mortality), \"year\"]) ## This shows which years in the variable are not complete cases (or are 0)\n\nprint(missingvalues)\n\n [1] 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974\n[16] 1975 1976 1977 1978 1979 1980 1981 2016\n\n\nIt seems that many years are missing between 1960-1981 and also in 2016."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#creating-a-new-object-for-just-the-values-with-the-year-2000",
    "href": "coding-exercise/coding-exercise.html#creating-a-new-object-for-just-the-values-with-the-year-2000",
    "title": "R Coding Exercise",
    "section": "Creating a new object for just the values with the year 2000",
    "text": "Creating a new object for just the values with the year 2000\n\nd4 &lt;- africadata %&gt;%\n filter(year == 2000) ## this will give me an object from africadata only including the data from 2000\n\n# Checking that the new object is correct\n str(d4)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n summary(d4)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plot-with-life-expectancy-versus-infant-mortality",
    "href": "coding-exercise/coding-exercise.html#plot-with-life-expectancy-versus-infant-mortality",
    "title": "R Coding Exercise",
    "section": "Plot with life expectancy versus infant mortality",
    "text": "Plot with life expectancy versus infant mortality\n\nlifevim_plot6 &lt;- ggplot(d4, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. Infant Mortality in 2000\",\n       x = \"Infant Mortality\",\n       y = \"Life Expectancy\")\n    \n  print(lifevim_plot6)\n\n\n\n\n\n\n\n\nA negative trend is still observed between infant mortality and life expectancy int heyear 2000."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plot-with-life-expectancy-versus-logpopulation",
    "href": "coding-exercise/coding-exercise.html#plot-with-life-expectancy-versus-logpopulation",
    "title": "R Coding Exercise",
    "section": "Plot with life expectancy versus log(population)",
    "text": "Plot with life expectancy versus log(population)\n\nlifevpop_plot4 &lt;- ggplot(d4, aes(x = log(population), y = life_expectancy)) +\n  geom_point() +\n  labs(title = \"Life Expectancy vs. log(Population) by Country\",\n       x = \"Log(Population)\",\n       y = \"Life Expectancy\")\n      \n  print(lifevpop_plot4)\n\n\n\n\n\n\n\n\nThere is no trend observed between log(population) and life expectancy in this case, so we will test this using a linear model."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#model-for-life-expectancy-versus-infant-mortality-in-2000",
    "href": "coding-exercise/coding-exercise.html#model-for-life-expectancy-versus-infant-mortality-in-2000",
    "title": "R Coding Exercise",
    "section": "Model for life expectancy versus infant mortality in 2000",
    "text": "Model for life expectancy versus infant mortality in 2000\nI will use the lm() function to create a linear model of life expectancy as the outcome and infant mortality as the factor.\n\nlmfit_lifevim &lt;- lm(life_expectancy ~ infant_mortality, d4) ## Linear model from life expectancy and infant mortality in the year 2000  \nlmtable_lifevim &lt;- broom::tidy(lmfit_lifevim) ## tidyverse includes the broom function to produce a table from the linear model above\nprint(lmtable_lifevim)\n\n# A tibble: 2 × 5\n  term             estimate std.error statistic  p.value\n  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)        71.3      2.43       29.4  8.91e-33\n2 infant_mortality   -0.189    0.0287     -6.59 2.83e- 8\n\n\nThe linear model table reflects the negative trend between infant mortality and life expectancy in the year 2000."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#model-for-life-expectancy-versus-logpopulation-in-2000",
    "href": "coding-exercise/coding-exercise.html#model-for-life-expectancy-versus-logpopulation-in-2000",
    "title": "R Coding Exercise",
    "section": "Model for life expectancy versus log(population) in 2000",
    "text": "Model for life expectancy versus log(population) in 2000\nNext, we will use the same process to create a linear model of life expectancy and log(population) in the year 2000.\n\nlmfit_lifevpop &lt;- lm(life_expectancy ~ log(population), d4)  \nlmtable_lifevpop &lt;- broom::tidy(lmfit_lifevpop)\nprint(lmtable_lifevpop)\n\n# A tibble: 2 × 5\n  term            estimate std.error statistic    p.value\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 (Intercept)       65.3      12.5       5.22  0.00000365\n2 log(population)   -0.571     0.794    -0.719 0.476     \n\n\nThere is a slight negative trend in life expectancy and log(population), however this is not statistically significant, with a p-value of 0.5. Therefore no trend is observed for the year 2000."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "My name is Rachel Robertson and I am a second-year MPH Epidemiology student at UGA. I recently received my undergraduate degree in Biology here and decided to continue my academic journey. I became interested in public health following the SARS-CoV-2 pandemic and decided to explore CPH courses through ‘Double Dawgs’ at UGA. This led to me where I am today!\n\n\n\nThis is me\n\n\n\n\n\nI have had the wonderful opportunity to do infectious disease research with the Brindley Lab at UGA. Although not public health-related, this virology research gave me a solid basis for the academic world. From this, I also got two poster presentations under my belt: the UGA Center for Undergraduate Research Opportunities and the American Society of Virology conferences. Over the summer, I was able to complete mosquito surveillance in Georgia with a program called, SECVBD, in collaboration with supervisors from the DPH. It was rough, but fun fieldwork that involved traveling to Georgia parks and trapping live mosquitoes. Currently, I am looking forward to beginning research with the SRH lab on Crisis Pregnancy Centers and women’s health!\n\n\n\nThe College of Public Health has sent me through several courses that gave me experience in SAS and STATA, but little to none in R. I have used a few data visualization platforms, such as Tableau and Bio-render, and worked with a team to create presentations. Two examples of such are a tick-borne disease map in the U.S. and a poster exploring the microbial composition in water fountains at UGA. I’d like to take these experiences and build upon them with the knowledge of R to create more complex and relevant projects.\n\n\n\nIn my free time, you can probably find me gaming with my friends. We sometimes play multi-player computer games, but mainly we get together to play Dungeons and Dragons. I also enjoy painting as a hobby and learning other visual art media, like watercolors, graphic design, and crocheting.\n\n\n\nIn this video, Tanisha Batra, a data science graduate, presents her capstone on creating a model to predict the popularity of a song on Spotify. I thought this was interesting because I love music, but I did not expect her findings."
  },
  {
    "objectID": "aboutme.html#read-about-me-here",
    "href": "aboutme.html#read-about-me-here",
    "title": "About me",
    "section": "",
    "text": "My name is Rachel Robertson and I am a second-year MPH Epidemiology student at UGA. I recently received my undergraduate degree in Biology here and decided to continue my academic journey. I became interested in public health following the SARS-CoV-2 pandemic and decided to explore CPH courses through ‘Double Dawgs’ at UGA. This led to me where I am today!\n\n\n\nThis is me\n\n\n\n\n\nI have had the wonderful opportunity to do infectious disease research with the Brindley Lab at UGA. Although not public health-related, this virology research gave me a solid basis for the academic world. From this, I also got two poster presentations under my belt: the UGA Center for Undergraduate Research Opportunities and the American Society of Virology conferences. Over the summer, I was able to complete mosquito surveillance in Georgia with a program called, SECVBD, in collaboration with supervisors from the DPH. It was rough, but fun fieldwork that involved traveling to Georgia parks and trapping live mosquitoes. Currently, I am looking forward to beginning research with the SRH lab on Crisis Pregnancy Centers and women’s health!\n\n\n\nThe College of Public Health has sent me through several courses that gave me experience in SAS and STATA, but little to none in R. I have used a few data visualization platforms, such as Tableau and Bio-render, and worked with a team to create presentations. Two examples of such are a tick-borne disease map in the U.S. and a poster exploring the microbial composition in water fountains at UGA. I’d like to take these experiences and build upon them with the knowledge of R to create more complex and relevant projects.\n\n\n\nIn my free time, you can probably find me gaming with my friends. We sometimes play multi-player computer games, but mainly we get together to play Dungeons and Dragons. I also enjoy painting as a hobby and learning other visual art media, like watercolors, graphic design, and crocheting.\n\n\n\nIn this video, Tanisha Batra, a data science graduate, presents her capstone on creating a model to predict the popularity of a song on Spotify. I thought this was interesting because I love music, but I did not expect her findings."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "This data contains suspected botulism cases in the United States dating back to the year 1899. This data is provided by the CDC Botulism Consultation Service, the Alaska Division of Public Health, and California Department of Public Health.These organizations are the only sources of non-infant botulism anti-toxin in the U.S. and they collect epidemiological and medical information from suspected botulism cases all over the U.S. This data set contains 5 columns and 2280 rows. The variables in this data set include state, year, botulism transmission type (BotType), botulism toxin type (ToxinType), and frequency count (Count).\nLink to the data set: https://data.cdc.gov/Foodborne-Waterborne-and-Related-Diseases/Botulism/66i6-hisz/about_data\n\n\n\nI will start by openning the libraries of the packages that I will need for data processing/cleaning and exploratory analysis. install.packages(readxl)\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(tidyr)\nlibrary(skimr)\nlibrary(naniar)\n\n\nAttaching package: 'naniar'\n\n\nThe following object is masked from 'package:skimr':\n\n    n_complete\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.4     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(broom)\nlibrary(readxl)\n\nNext, I will write code to read the csv file.\n\nlist.files() #confirm that the file is in the working directory\n\n[1] \"Botulism.csv\"               \"cdcdata-exercise.qmd\"      \n[3] \"cdcdata-exercise.rmarkdown\"\n\ncdcdata &lt;- read_csv(\"Botulism.csv\") #read the csv file\n\nRows: 2280 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): State, BotType, ToxinType\ndbl (2): Year, Count\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNext I will look at the data structure and summary.\n\nsummary(cdcdata)\n\n    State                Year        BotType           ToxinType        \n Length:2280        Min.   :1899   Length:2280        Length:2280       \n Class :character   1st Qu.:1976   Class :character   Class :character  \n Mode  :character   Median :1993   Mode  :character   Mode  :character  \n                    Mean   :1986                                        \n                    3rd Qu.:2006                                        \n                    Max.   :2017                                        \n     Count       \n Min.   : 1.000  \n 1st Qu.: 1.000  \n Median : 1.000  \n Mean   : 3.199  \n 3rd Qu.: 3.000  \n Max.   :59.000  \n\nstr(cdcdata)\n\nspc_tbl_ [2,280 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ State    : chr [1:2280] \"Alaska\" \"Alaska\" \"Alaska\" \"Alaska\" ...\n $ Year     : num [1:2280] 1947 1948 1950 1952 1956 ...\n $ BotType  : chr [1:2280] \"Foodborne\" \"Foodborne\" \"Foodborne\" \"Foodborne\" ...\n $ ToxinType: chr [1:2280] \"Unknown\" \"Unknown\" \"E\" \"E\" ...\n $ Count    : num [1:2280] 3 4 5 1 5 10 2 1 1 1 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   State = col_character(),\n  ..   Year = col_double(),\n  ..   BotType = col_character(),\n  ..   ToxinType = col_character(),\n  ..   Count = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nNow I will check which unique variables are present in the BotType, ToxinType, and State Categories by using the unique function.\n\nunique_bottype &lt;- unique(cdcdata$BotType)\nunique_toxintype &lt;- unique(cdcdata$ToxinType)\nunique_state &lt;- unique(cdcdata$State) #Makes a new column of unique values for an existing column\nprint(unique_bottype)\n\n[1] \"Foodborne\" \"Infant\"    \"Wound\"     \"Other\"    \n\nprint(unique_toxintype)\n\n [1] \"Unknown\" \"E\"       \"B\"       \"A\"       \"F\"       \"A&B\"     \"AB\"     \n [8] \"Ba\"      \"Bf\"      \"E,F\"     \"ABE\"     \"Ab\"      \"B/F\"     \"A/B/E\"  \n\nprint(unique_state) #Print the unique factors to read them\n\n [1] \"Alaska\"         \"Alabama\"        \"Arkansas\"       \"Arizona\"       \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    NA              \n [9] \"Delaware\"       \"Florida\"        \"Georgia\"        \"Hawaii\"        \n[13] \"Iowa\"           \"Idaho\"          \"Illinois\"       \"Indiana\"       \n[17] \"Kansas\"         \"Kentucky\"       \"Louisiana\"      \"Massachusetts\" \n[21] \"Maryland\"       \"Maine\"          \"Michigan\"       \"Minnesota\"     \n[25] \"Missouri\"       \"Mississippi\"    \"Montana\"        \"North Carolina\"\n[29] \"North Dakota\"   \"Nebraska\"       \"New Hampshire\"  \"New Jersey\"    \n[33] \"New Mexico\"     \"Nevada\"         \"New York\"       \"Ohio\"          \n[37] \"Oklahoma\"       \"Oregon\"         \"Pennsylvania\"   \"Texas\"         \n[41] \"Rhode Island\"   \"South Carolina\" \"South Dakota\"   \"Tennessee\"     \n[45] \"Utah\"           \"Virginia\"       \"Vermont\"        \"Washington\"    \n[49] \"Wisconsin\"      \"West Virginia\"  \"Wyoming\"       \n\n\nIt seems that there are multiple values of the factor bottype that have the same meaning. These values that should be grouped together are “AB”, “Ba”, “A&B”, and “Ab”; “B/F” and “Bf”; “A/B/E” and “ABE”.\n\n\n\nFirst, I will rename the values of ToxinType that can be combined to a single value using mutate().\n\ncdcdata2 &lt;- cdcdata %&gt;%\n  mutate(ToxinType = case_when(\n    ToxinType %in% c(\"AB\", \"Ba\", \"Ab\", \"A&B\") ~ \"AB\",\n    ToxinType %in% c(\"B/F\", \"Bf\") ~ \"BF\",\n    ToxinType %in% c(\"ABE\", \"A/B/E\") ~ \"ABE\",\n    TRUE ~ ToxinType\n  )) #I found how to mutate multiple values of one variable by using the base function of mutate and then asking ChatGPT how to combine multiple values using mutate and not just one.\nunique_toxintype2 &lt;- unique(cdcdata2$ToxinType)\nprint(unique_toxintype2) #Use unique to check that the unique values have merged into a single value, in this case it was sucessful\n\n[1] \"Unknown\" \"E\"       \"B\"       \"A\"       \"F\"       \"AB\"      \"BF\"     \n[8] \"E,F\"     \"ABE\"    \n\n\nI will now change the character variables: State, BotType, and ToxinType into factor variables so they are simpler to analyze as levels.\n\ncdcdata2$State &lt;- as.factor(cdcdata2$State)\ncdcdata2$ToxinType &lt;- as.factor(cdcdata2$ToxinType)\ncdcdata2$BotType &lt;- as.factor(cdcdata2$BotType) #Use the as.factor function to convert each of these character variables to factors that will be simpler to work with\nstr(cdcdata2) #check the variable types of the data frame\n\ntibble [2,280 × 5] (S3: tbl_df/tbl/data.frame)\n $ State    : Factor w/ 50 levels \"Alabama\",\"Alaska\",..: 2 2 2 2 2 2 2 2 2 2 ...\n $ Year     : num [1:2280] 1947 1948 1950 1952 1956 ...\n $ BotType  : Factor w/ 4 levels \"Foodborne\",\"Infant\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ ToxinType: Factor w/ 9 levels \"A\",\"AB\",\"ABE\",..: 9 9 6 6 6 6 6 6 9 6 ...\n $ Count    : num [1:2280] 3 4 5 1 5 10 2 1 1 1 ...\n\n\nNow I will rename the E,F column to EF for consistency.\n\ncdcdata3 &lt;- cdcdata2 %&gt;%\n  mutate(ToxinType = as.character(ToxinType), #first you must change the factor toxin type to a character variable\n         ToxinType = ifelse(ToxinType == \"E,F\", \"EF\", ToxinType), #Then, you convert the value \"E,F\" into \"EF\"\n         ToxinType = as.factor(ToxinType)) #convert toxin type back into a factor\nprint(levels(cdcdata3$ToxinType)) #check the levels of the toxintype factor by using the print(levels()) function\n\n[1] \"A\"       \"AB\"      \"ABE\"     \"B\"       \"BF\"      \"E\"       \"EF\"     \n[8] \"F\"       \"Unknown\"\n\n\nNow I will check for missing values in all of the variables. The “Unknown” values for ToxinTupe, BotType, or State are NOT missing values because they can be analyzed as a factor level and correspond to important data of case counts. I will determine which variables have the most missing data using a nanair package function called gg_miss_var.\n\ngg_miss_var(cdcdata3)\n\n\n\n\n\n\n\n\nThere are over 30 missing values for state, but this is a relatively small percentage compared to the total of 2850 values, so I will delete these missing values.\n\ncdcdata4 &lt;- cdcdata3 %&gt;% #Create a new data frame called cdcdata4\n  drop_na(State) #Drop values of state that are NA\nskimr::skim(cdcdata4) #Check the number of rows\n\n\nData summary\n\n\nName\ncdcdata4\n\n\nNumber of rows\n2246\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nState\n0\n1\nFALSE\n50\nCal: 343, Was: 143, Tex: 107, Col: 98\n\n\nBotType\n0\n1\nFALSE\n4\nInf: 1124, Foo: 899, Wou: 151, Oth: 72\n\n\nToxinType\n0\n1\nFALSE\n9\nA: 958, B: 778, Unk: 369, E: 72\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1985.50\n26.60\n1899\n1976\n1992\n2006\n2017\n▁▂▂▅▇\n\n\nCount\n0\n1\n3.22\n4.66\n1\n1\n1\n3\n59\n▇▁▁▁▁\n\n\n\n\n\n34 values were deleted as the number fo rows changed from 2280 to 2246. Now since all of the missing values are taken care of, we will explore to data to find outliers.\n\n\n\nI will use exploratory analysis and create figures to summarize the data distribution and to identify any outliers.\nBecause the outcome of interest is botulism case count (Count), I will check the normalcy and distribution of the variable count. I used ChatGPT to ask what kind of plot I can use to show me the distribution of Count. If output a code for a histogram that shows a density distribution. This shows that the data is highly right-skewed.\n\nggplot(cdcdata4, aes(x = Count)) +\n  geom_histogram(binwidth = 10, aes(y = ..density..)) +\n  geom_density(alpha = 0.2) +\n  labs(title = \"Distribution of Counts\", x = \"Counts\", y = \"Density\")\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n\n\n\n\n\n\n\nI will now make a simple boxplot using ggplot to confirm the results in the density distribution given above.\n\nggplot(cdcdata4, aes(y = Count)) + #Create a boxplot of count \n  geom_boxplot(fill = \"skyblue\", color = \"black\") + #Fill colors are used as box is far too compressed to notice otherwise\n  labs(title = \"Box Plot of Counts\", y = \"Counts\")\n\n\n\n\n\n\n\n\nEven though the plot is highly skewed, there is a single outlier that stands out, close to a count of 60. I will try and find which year and state values are associated with this maximum count and very that there was an unusual outbreak, using online literature.\n\nsummary(cdcdata4$Count) \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   1.000   3.223   3.000  59.000 \n\n\nI found the max count value to be 59, so I will identify the row of this value.\n\nmax_row &lt;- cdcdata4$Count == 59 #create a data frame just including the max value of count\nmax_states &lt;- cdcdata4$State[max_row]\nmax_years &lt;- cdcdata4$Year[max_row] #Produce data frames with the year and state corresponding to the max count\nprint(max_states)\n\n[1] Michigan\n50 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\nprint(max_years) #print the data frames with the corresponding years and states\n\n[1] 1977\n\n\nNow seeing that this outlier is from 1977 Michigan, I will search for this outbreak. Reference: https://pubmed.ncbi.nlm.nih.gov/707476/ In 1977, there was the largest botulism outbreak in American history due to a foodborne outbreak at a Mexican restaurant, from improperly canned Jalapenos. This data point is important and will therefore be kept.\nI will now check the frequency of the factor variables\n\n\nI will check the frequency of year using a histogram plot, similar to the distribution plot used for count.\n\nggplot(cdcdata4, aes(x = Year)) +\n  geom_histogram(binwidth = 10, aes(y = ..density..)) +\n  geom_density(alpha = 0.2) +\n  labs(title = \"Distribution of Years\", x = \"Year\", y = \"Density\")\n\n\n\n\n\n\n\n\nMost data has been collected in more recent years, so the data is left-skewed.\nI will not plot count versus year. First I will make a total count variable that takes the sum of all state counts for a year\n\ntotcount_year &lt;- aggregate(Count ~ Year, data = cdcdata4, FUN = sum) #Use aggregate() to find the sum count for each year value\nggplot(totcount_year, aes(x = Year, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  geom_point() + \n  labs(title = \"Botulism Count for each Year in the U.S.\", x = \"Year\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nIt looks like total botulism cases have greatly increased in recent years, botulism surveillance has greatly improved, or the suspected botulism case had changed around 1970 to become more broad. Whichever is the case, the total botulism case count per state has greatly increased starting around 1970.\n\n\n\nFirst I will see the total cases per state. For this I will first aggregate the count values to get a total for each state. Next, I will make a histogram of the total case count versus state.\n\ntotcount_state &lt;- aggregate(Count ~ State, data = cdcdata4, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nOne state has an extremely high total case count. I will identify max value by using the same method I used when identifying the max count value.\n\nsummary(totcount_state) #summary stats for the total count by state data frame\n\n        State        Count        \n Alabama   : 1   Min.   :   3.00  \n Alaska    : 1   1st Qu.:  29.25  \n Arizona   : 1   Median :  44.00  \n Arkansas  : 1   Mean   : 144.76  \n California: 1   3rd Qu.: 149.50  \n Colorado  : 1   Max.   :2598.00  \n (Other)   :44                    \n\n\nI will find the row that this max takes place in.\n\nmax_row &lt;- totcount_state$Count == 2598 #create a data frame just including the max value of count\nmax_state2 &lt;- totcount_state$State[max_row] #find the row in whcih the state with the max total count occurs\nprint(max_state2) #print the data frames with the corresponding state\n\n[1] California\n50 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\n\nThis extreme value takes place in California. I will now fact check this with online literature. Reference 2: https://www.cdph.ca.gov/Programs/CID/DCDC/CDPH%20Document%20Library/IDBGuidanceforCALHJs-Botulism.pdf According to the California DPH, CA reports the highest proportion of wound botulism cases in the U.S.(approx. 26/yr from 2016 to 2019) These are likely related to drug injection. They have also have had 24 foodborne illness cases during this time period. However, this only accounts for 180 of the 2598 reported, suspected cases. I am unsure about including CA in the final analysis for this reason, as the cases may be due to unequal distribution of botulism outbreaks rather than a reporting bias, but it is unknown which one. To decide whether to exclude CA I will explore the distribution of count values based on the year and state.\nI will now investigate the aggregate values of state and year counts.\n\ntotcount_stateandyear &lt;- aggregate(Count ~ Year + State, data = cdcdata4, FUN = sum) # Use aggregate to calculate the sum of counts for each state and year\nggplot(totcount_stateandyear, aes(x = State, y = Count, color = Year)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nBased on the colors of the scatter plot, California has began reporting the largest total case counts of botulism in more recent years, which suggests a change in case definition or reporting bias.\nBecause of this, I will go back to processing the data. First I will identify if there are duplicate rows in the data\n\ndupcdcdata4 &lt;- cdcdata4[duplicated(cdcdata4),] #Check for duplicated data in the original dataframe and create a new dataframe with duplicates\nprint(dupcdcdata4) #Print the duplicate rows\n\n# A tibble: 0 × 5\n# ℹ 5 variables: State &lt;fct&gt;, Year &lt;dbl&gt;, BotType &lt;fct&gt;, ToxinType &lt;fct&gt;,\n#   Count &lt;dbl&gt;\n\n\nBecause they are zero duplicate rows, I believe that there is not duplicate data present for the California data. In this case, I will remove all of the rows with the value California.\n\ncdcdata5 &lt;- cdcdata4[cdcdata4$State != \"California\", ] #remove California values from the state variable\nprint(levels(cdcdata5$State)) #Check the remaining values\n\n [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"      \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"      \n [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"         \n[13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"        \n[17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"      \n[21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"   \n[25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"        \n[29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"      \n[37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\"\n[41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"          \n[45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\" \n[49] \"Wisconsin\"      \"Wyoming\"       \n\n\nCalifornia is missing from the levels of the State factor, therefore the removal of the state value, “California” was successful.\nI will now remake the graph comparing the total count values for each state, to reassess outlier state values.\n\ntotcount_state &lt;- aggregate(Count ~ State, data = cdcdata5, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State (except CA) in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nThere are a few higher count values, such as for Oregon, but there seems to be no outstanding outliers. Because of this, we will move on.\n\n\n\nNext, I will examine the total number of cases for each Botulism Type. I will start by aggregating the total count for each type of outbreak. Then I will make a bar plot showing each category.\n\ntotcount_type &lt;- aggregate(Count ~ BotType, data = cdcdata5, FUN = sum) #Aggregate the count sum by the type of botulism\nggplot(totcount_type, aes(x = BotType, y = Count)) +\n  geom_bar(stat = \"identity\") + \n  labs(title = \"Distribution of Botulism Type\", x = \"Type of Botulism Outbreak\", y = \"Total Count\") #Make a bar plot with each differing identity of bot type listed on the x axis\n\n\n\n\n\n\n\n\nInfant botulism seems slightly more frequent than foodborne botulism. Wound botulism is much less common, but has a frequency close to “other” types of botulism.\n\n\n\nLastly, I will examine the total number of cases for each Toxin Type. This analysis will be done in a similar way as botulism type. The total count will be aggregated for each toxin type and then\n\ntotcount_toxin &lt;- aggregate(Count ~ ToxinType, data = cdcdata5, FUN = sum) #Aggregate the count sum by the type of toxin\nggplot(totcount_toxin, aes(x = ToxinType, y = Count)) +\n  geom_bar(stat = \"identity\") + #Make a bar plot with each differing identity of bot type listed on the x axis\n  labs(title = \"Distribution of Toxin Type\", x = \"Type of Toxin\", y = \"Total Count\")\n\n\n\n\n\n\n\n\nIt seems that the toxin type B is responsible for the highest case count, followed by A, unknown, and lastly, E. The toxin type is unknown for a significant chunk of cases in comparison to known types. The known types AB, ABE, BF, and F contribute to a very small portion of botulism cases in the U.S. compared to A, B, and E.\nThe toxin type corresponds to the strain of bacteria that produced the outbreak. This may mean that toxin type is correlated to the botulism outbreak type. To test BotType and ToxinType correlation, I will use a logistic regression model with these two variables. I use a logistic model with the outcome being botulism outbreak type and the predictor being toxin type.\n\nbotvtoxin &lt;- glm(BotType ~ ToxinType, data = cdcdata5, family = binomial) #use glm() to produce a logistic regression with the bottype versus the toxintype variables; regression is binomial\nsummary(botvtoxin) #ptint the results table\n\n\nCall:\nglm(formula = BotType ~ ToxinType, family = binomial, data = cdcdata5)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.0544  -0.4265   0.5987   0.9397   2.5042  \n\nCoefficients:\n                  Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)        0.58857    0.07426   7.926 2.27e-15 ***\nToxinTypeAB       13.97749  394.77485   0.035  0.97176    \nToxinTypeABE      13.97749  882.74338   0.016  0.98737    \nToxinTypeB         1.03981    0.12616   8.242  &lt; 2e-16 ***\nToxinTypeBF       13.97749  394.77485   0.035  0.97176    \nToxinTypeE        -3.67962    0.59498  -6.184 6.23e-10 ***\nToxinTypeF         1.39243    0.53851   2.586  0.00972 ** \nToxinTypeUnknown  -2.93995    0.21826 -13.470  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 2543.3  on 1902  degrees of freedom\nResidual deviance: 1881.1  on 1895  degrees of freedom\nAIC: 1897.1\n\nNumber of Fisher Scoring iterations: 13\n\n\nIt seems that toxin types A, B, E, and unknown are associated with the type of outbreak. Assuming that foodborne is the reference, as it is listed at the first factor level, this might mean there is an association between toxins A, B, E, and unknown with foodborne botulism outbreaks.\nThis was not confirmed by myself, but current literature suggests that foodborne botulism illness is associated with botulin toxin types A, B, and E. Refrence 3: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2094941/#:~:text=Botulism%20is%20a%20neuroparalytic%20illness,A%2C%20B%20or%20E).\n\n\n\nThe summary statistics of the final data set is shown here.The values for California have not been removed, due to significant they might hold. However, note that California has the highest case counts of any U.S. state.\n\nsummary(cdcdata5)\n\n        State           Year           BotType       ToxinType  \n Washington: 143   Min.   :1910   Foodborne: 740   A      :790  \n Texas     : 107   1st Qu.:1977   Infant   :1028   B      :701  \n Colorado  :  98   Median :1993   Other    :  55   Unknown:299  \n Oregon    :  95   Mean   :1987   Wound    :  80   E      : 69  \n Alaska    :  88   3rd Qu.:2006                    F      : 33  \n New York  :  81   Max.   :2017                    AB     :  5  \n (Other)   :1291                                   (Other):  6  \n     Count       \n Min.   : 1.000  \n 1st Qu.: 1.000  \n Median : 1.000  \n Mean   : 2.438  \n 3rd Qu.: 3.000  \n Max.   :59.000  \n                 \n\nskim(cdcdata5)\n\n\nData summary\n\n\nName\ncdcdata5\n\n\nNumber of rows\n1903\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nState\n0\n1\nFALSE\n49\nWas: 143, Tex: 107, Col: 98, Ore: 95\n\n\nBotType\n0\n1\nFALSE\n4\nInf: 1028, Foo: 740, Wou: 80, Oth: 55\n\n\nToxinType\n0\n1\nFALSE\n8\nA: 790, B: 701, Unk: 299, E: 69\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1986.67\n25.54\n1910\n1977\n1993\n2006\n2017\n▁▂▂▆▇\n\n\nCount\n0\n1\n2.44\n3.21\n1\n1\n1\n3\n59\n▇▁▁▁▁"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#data-on-botulism-in-the-u.s.",
    "href": "cdcdata-exercise/cdcdata-exercise.html#data-on-botulism-in-the-u.s.",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "This data contains suspected botulism cases in the United States dating back to the year 1899. This data is provided by the CDC Botulism Consultation Service, the Alaska Division of Public Health, and California Department of Public Health.These organizations are the only sources of non-infant botulism anti-toxin in the U.S. and they collect epidemiological and medical information from suspected botulism cases all over the U.S. This data set contains 5 columns and 2280 rows. The variables in this data set include state, year, botulism transmission type (BotType), botulism toxin type (ToxinType), and frequency count (Count).\nLink to the data set: https://data.cdc.gov/Foodborne-Waterborne-and-Related-Diseases/Botulism/66i6-hisz/about_data"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#openning-the-data",
    "href": "cdcdata-exercise/cdcdata-exercise.html#openning-the-data",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "I will start by openning the libraries of the packages that I will need for data processing/cleaning and exploratory analysis. install.packages(readxl)\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(tidyr)\nlibrary(skimr)\nlibrary(naniar)\n\n\nAttaching package: 'naniar'\n\n\nThe following object is masked from 'package:skimr':\n\n    n_complete\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.4     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(broom)\nlibrary(readxl)\n\nNext, I will write code to read the csv file.\n\nlist.files() #confirm that the file is in the working directory\n\n[1] \"Botulism.csv\"               \"cdcdata-exercise.qmd\"      \n[3] \"cdcdata-exercise.rmarkdown\"\n\ncdcdata &lt;- read_csv(\"Botulism.csv\") #read the csv file\n\nRows: 2280 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): State, BotType, ToxinType\ndbl (2): Year, Count\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNext I will look at the data structure and summary.\n\nsummary(cdcdata)\n\n    State                Year        BotType           ToxinType        \n Length:2280        Min.   :1899   Length:2280        Length:2280       \n Class :character   1st Qu.:1976   Class :character   Class :character  \n Mode  :character   Median :1993   Mode  :character   Mode  :character  \n                    Mean   :1986                                        \n                    3rd Qu.:2006                                        \n                    Max.   :2017                                        \n     Count       \n Min.   : 1.000  \n 1st Qu.: 1.000  \n Median : 1.000  \n Mean   : 3.199  \n 3rd Qu.: 3.000  \n Max.   :59.000  \n\nstr(cdcdata)\n\nspc_tbl_ [2,280 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ State    : chr [1:2280] \"Alaska\" \"Alaska\" \"Alaska\" \"Alaska\" ...\n $ Year     : num [1:2280] 1947 1948 1950 1952 1956 ...\n $ BotType  : chr [1:2280] \"Foodborne\" \"Foodborne\" \"Foodborne\" \"Foodborne\" ...\n $ ToxinType: chr [1:2280] \"Unknown\" \"Unknown\" \"E\" \"E\" ...\n $ Count    : num [1:2280] 3 4 5 1 5 10 2 1 1 1 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   State = col_character(),\n  ..   Year = col_double(),\n  ..   BotType = col_character(),\n  ..   ToxinType = col_character(),\n  ..   Count = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nNow I will check which unique variables are present in the BotType, ToxinType, and State Categories by using the unique function.\n\nunique_bottype &lt;- unique(cdcdata$BotType)\nunique_toxintype &lt;- unique(cdcdata$ToxinType)\nunique_state &lt;- unique(cdcdata$State) #Makes a new column of unique values for an existing column\nprint(unique_bottype)\n\n[1] \"Foodborne\" \"Infant\"    \"Wound\"     \"Other\"    \n\nprint(unique_toxintype)\n\n [1] \"Unknown\" \"E\"       \"B\"       \"A\"       \"F\"       \"A&B\"     \"AB\"     \n [8] \"Ba\"      \"Bf\"      \"E,F\"     \"ABE\"     \"Ab\"      \"B/F\"     \"A/B/E\"  \n\nprint(unique_state) #Print the unique factors to read them\n\n [1] \"Alaska\"         \"Alabama\"        \"Arkansas\"       \"Arizona\"       \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    NA              \n [9] \"Delaware\"       \"Florida\"        \"Georgia\"        \"Hawaii\"        \n[13] \"Iowa\"           \"Idaho\"          \"Illinois\"       \"Indiana\"       \n[17] \"Kansas\"         \"Kentucky\"       \"Louisiana\"      \"Massachusetts\" \n[21] \"Maryland\"       \"Maine\"          \"Michigan\"       \"Minnesota\"     \n[25] \"Missouri\"       \"Mississippi\"    \"Montana\"        \"North Carolina\"\n[29] \"North Dakota\"   \"Nebraska\"       \"New Hampshire\"  \"New Jersey\"    \n[33] \"New Mexico\"     \"Nevada\"         \"New York\"       \"Ohio\"          \n[37] \"Oklahoma\"       \"Oregon\"         \"Pennsylvania\"   \"Texas\"         \n[41] \"Rhode Island\"   \"South Carolina\" \"South Dakota\"   \"Tennessee\"     \n[45] \"Utah\"           \"Virginia\"       \"Vermont\"        \"Washington\"    \n[49] \"Wisconsin\"      \"West Virginia\"  \"Wyoming\"       \n\n\nIt seems that there are multiple values of the factor bottype that have the same meaning. These values that should be grouped together are “AB”, “Ba”, “A&B”, and “Ab”; “B/F” and “Bf”; “A/B/E” and “ABE”."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#cleaning-the-data",
    "href": "cdcdata-exercise/cdcdata-exercise.html#cleaning-the-data",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "First, I will rename the values of ToxinType that can be combined to a single value using mutate().\n\ncdcdata2 &lt;- cdcdata %&gt;%\n  mutate(ToxinType = case_when(\n    ToxinType %in% c(\"AB\", \"Ba\", \"Ab\", \"A&B\") ~ \"AB\",\n    ToxinType %in% c(\"B/F\", \"Bf\") ~ \"BF\",\n    ToxinType %in% c(\"ABE\", \"A/B/E\") ~ \"ABE\",\n    TRUE ~ ToxinType\n  )) #I found how to mutate multiple values of one variable by using the base function of mutate and then asking ChatGPT how to combine multiple values using mutate and not just one.\nunique_toxintype2 &lt;- unique(cdcdata2$ToxinType)\nprint(unique_toxintype2) #Use unique to check that the unique values have merged into a single value, in this case it was sucessful\n\n[1] \"Unknown\" \"E\"       \"B\"       \"A\"       \"F\"       \"AB\"      \"BF\"     \n[8] \"E,F\"     \"ABE\"    \n\n\nI will now change the character variables: State, BotType, and ToxinType into factor variables so they are simpler to analyze as levels.\n\ncdcdata2$State &lt;- as.factor(cdcdata2$State)\ncdcdata2$ToxinType &lt;- as.factor(cdcdata2$ToxinType)\ncdcdata2$BotType &lt;- as.factor(cdcdata2$BotType) #Use the as.factor function to convert each of these character variables to factors that will be simpler to work with\nstr(cdcdata2) #check the variable types of the data frame\n\ntibble [2,280 × 5] (S3: tbl_df/tbl/data.frame)\n $ State    : Factor w/ 50 levels \"Alabama\",\"Alaska\",..: 2 2 2 2 2 2 2 2 2 2 ...\n $ Year     : num [1:2280] 1947 1948 1950 1952 1956 ...\n $ BotType  : Factor w/ 4 levels \"Foodborne\",\"Infant\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ ToxinType: Factor w/ 9 levels \"A\",\"AB\",\"ABE\",..: 9 9 6 6 6 6 6 6 9 6 ...\n $ Count    : num [1:2280] 3 4 5 1 5 10 2 1 1 1 ...\n\n\nNow I will rename the E,F column to EF for consistency.\n\ncdcdata3 &lt;- cdcdata2 %&gt;%\n  mutate(ToxinType = as.character(ToxinType), #first you must change the factor toxin type to a character variable\n         ToxinType = ifelse(ToxinType == \"E,F\", \"EF\", ToxinType), #Then, you convert the value \"E,F\" into \"EF\"\n         ToxinType = as.factor(ToxinType)) #convert toxin type back into a factor\nprint(levels(cdcdata3$ToxinType)) #check the levels of the toxintype factor by using the print(levels()) function\n\n[1] \"A\"       \"AB\"      \"ABE\"     \"B\"       \"BF\"      \"E\"       \"EF\"     \n[8] \"F\"       \"Unknown\"\n\n\nNow I will check for missing values in all of the variables. The “Unknown” values for ToxinTupe, BotType, or State are NOT missing values because they can be analyzed as a factor level and correspond to important data of case counts. I will determine which variables have the most missing data using a nanair package function called gg_miss_var.\n\ngg_miss_var(cdcdata3)\n\n\n\n\n\n\n\n\nThere are over 30 missing values for state, but this is a relatively small percentage compared to the total of 2850 values, so I will delete these missing values.\n\ncdcdata4 &lt;- cdcdata3 %&gt;% #Create a new data frame called cdcdata4\n  drop_na(State) #Drop values of state that are NA\nskimr::skim(cdcdata4) #Check the number of rows\n\n\nData summary\n\n\nName\ncdcdata4\n\n\nNumber of rows\n2246\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nState\n0\n1\nFALSE\n50\nCal: 343, Was: 143, Tex: 107, Col: 98\n\n\nBotType\n0\n1\nFALSE\n4\nInf: 1124, Foo: 899, Wou: 151, Oth: 72\n\n\nToxinType\n0\n1\nFALSE\n9\nA: 958, B: 778, Unk: 369, E: 72\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1985.50\n26.60\n1899\n1976\n1992\n2006\n2017\n▁▂▂▅▇\n\n\nCount\n0\n1\n3.22\n4.66\n1\n1\n1\n3\n59\n▇▁▁▁▁\n\n\n\n\n\n34 values were deleted as the number fo rows changed from 2280 to 2246. Now since all of the missing values are taken care of, we will explore to data to find outliers."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#exploratory-analysis",
    "href": "cdcdata-exercise/cdcdata-exercise.html#exploratory-analysis",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "I will use exploratory analysis and create figures to summarize the data distribution and to identify any outliers.\nBecause the outcome of interest is botulism case count (Count), I will check the normalcy and distribution of the variable count. I used ChatGPT to ask what kind of plot I can use to show me the distribution of Count. If output a code for a histogram that shows a density distribution. This shows that the data is highly right-skewed.\n\nggplot(cdcdata4, aes(x = Count)) +\n  geom_histogram(binwidth = 10, aes(y = ..density..)) +\n  geom_density(alpha = 0.2) +\n  labs(title = \"Distribution of Counts\", x = \"Counts\", y = \"Density\")\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n\n\n\n\n\n\n\nI will now make a simple boxplot using ggplot to confirm the results in the density distribution given above.\n\nggplot(cdcdata4, aes(y = Count)) + #Create a boxplot of count \n  geom_boxplot(fill = \"skyblue\", color = \"black\") + #Fill colors are used as box is far too compressed to notice otherwise\n  labs(title = \"Box Plot of Counts\", y = \"Counts\")\n\n\n\n\n\n\n\n\nEven though the plot is highly skewed, there is a single outlier that stands out, close to a count of 60. I will try and find which year and state values are associated with this maximum count and very that there was an unusual outbreak, using online literature.\n\nsummary(cdcdata4$Count) \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   1.000   3.223   3.000  59.000 \n\n\nI found the max count value to be 59, so I will identify the row of this value.\n\nmax_row &lt;- cdcdata4$Count == 59 #create a data frame just including the max value of count\nmax_states &lt;- cdcdata4$State[max_row]\nmax_years &lt;- cdcdata4$Year[max_row] #Produce data frames with the year and state corresponding to the max count\nprint(max_states)\n\n[1] Michigan\n50 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\nprint(max_years) #print the data frames with the corresponding years and states\n\n[1] 1977\n\n\nNow seeing that this outlier is from 1977 Michigan, I will search for this outbreak. Reference: https://pubmed.ncbi.nlm.nih.gov/707476/ In 1977, there was the largest botulism outbreak in American history due to a foodborne outbreak at a Mexican restaurant, from improperly canned Jalapenos. This data point is important and will therefore be kept.\nI will now check the frequency of the factor variables\n\n\nI will check the frequency of year using a histogram plot, similar to the distribution plot used for count.\n\nggplot(cdcdata4, aes(x = Year)) +\n  geom_histogram(binwidth = 10, aes(y = ..density..)) +\n  geom_density(alpha = 0.2) +\n  labs(title = \"Distribution of Years\", x = \"Year\", y = \"Density\")\n\n\n\n\n\n\n\n\nMost data has been collected in more recent years, so the data is left-skewed.\nI will not plot count versus year. First I will make a total count variable that takes the sum of all state counts for a year\n\ntotcount_year &lt;- aggregate(Count ~ Year, data = cdcdata4, FUN = sum) #Use aggregate() to find the sum count for each year value\nggplot(totcount_year, aes(x = Year, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  geom_point() + \n  labs(title = \"Botulism Count for each Year in the U.S.\", x = \"Year\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nIt looks like total botulism cases have greatly increased in recent years, botulism surveillance has greatly improved, or the suspected botulism case had changed around 1970 to become more broad. Whichever is the case, the total botulism case count per state has greatly increased starting around 1970.\n\n\n\nFirst I will see the total cases per state. For this I will first aggregate the count values to get a total for each state. Next, I will make a histogram of the total case count versus state.\n\ntotcount_state &lt;- aggregate(Count ~ State, data = cdcdata4, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nOne state has an extremely high total case count. I will identify max value by using the same method I used when identifying the max count value.\n\nsummary(totcount_state) #summary stats for the total count by state data frame\n\n        State        Count        \n Alabama   : 1   Min.   :   3.00  \n Alaska    : 1   1st Qu.:  29.25  \n Arizona   : 1   Median :  44.00  \n Arkansas  : 1   Mean   : 144.76  \n California: 1   3rd Qu.: 149.50  \n Colorado  : 1   Max.   :2598.00  \n (Other)   :44                    \n\n\nI will find the row that this max takes place in.\n\nmax_row &lt;- totcount_state$Count == 2598 #create a data frame just including the max value of count\nmax_state2 &lt;- totcount_state$State[max_row] #find the row in whcih the state with the max total count occurs\nprint(max_state2) #print the data frames with the corresponding state\n\n[1] California\n50 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\n\nThis extreme value takes place in California. I will now fact check this with online literature. Reference 2: https://www.cdph.ca.gov/Programs/CID/DCDC/CDPH%20Document%20Library/IDBGuidanceforCALHJs-Botulism.pdf According to the California DPH, CA reports the highest proportion of wound botulism cases in the U.S.(approx. 26/yr from 2016 to 2019) These are likely related to drug injection. They have also have had 24 foodborne illness cases during this time period. However, this only accounts for 180 of the 2598 reported, suspected cases. I am unsure about including CA in the final analysis for this reason, as the cases may be due to unequal distribution of botulism outbreaks rather than a reporting bias, but it is unknown which one. To decide whether to exclude CA I will explore the distribution of count values based on the year and state.\nI will now investigate the aggregate values of state and year counts.\n\ntotcount_stateandyear &lt;- aggregate(Count ~ Year + State, data = cdcdata4, FUN = sum) # Use aggregate to calculate the sum of counts for each state and year\nggplot(totcount_stateandyear, aes(x = State, y = Count, color = Year)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nBased on the colors of the scatter plot, California has began reporting the largest total case counts of botulism in more recent years, which suggests a change in case definition or reporting bias.\nBecause of this, I will go back to processing the data. First I will identify if there are duplicate rows in the data\n\ndupcdcdata4 &lt;- cdcdata4[duplicated(cdcdata4),] #Check for duplicated data in the original dataframe and create a new dataframe with duplicates\nprint(dupcdcdata4) #Print the duplicate rows\n\n# A tibble: 0 × 5\n# ℹ 5 variables: State &lt;fct&gt;, Year &lt;dbl&gt;, BotType &lt;fct&gt;, ToxinType &lt;fct&gt;,\n#   Count &lt;dbl&gt;\n\n\nBecause they are zero duplicate rows, I believe that there is not duplicate data present for the California data. In this case, I will remove all of the rows with the value California.\n\ncdcdata5 &lt;- cdcdata4[cdcdata4$State != \"California\", ] #remove California values from the state variable\nprint(levels(cdcdata5$State)) #Check the remaining values\n\n [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"      \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"      \n [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"         \n[13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"        \n[17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"      \n[21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"   \n[25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"        \n[29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"      \n[37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\"\n[41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"          \n[45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\" \n[49] \"Wisconsin\"      \"Wyoming\"       \n\n\nCalifornia is missing from the levels of the State factor, therefore the removal of the state value, “California” was successful.\nI will now remake the graph comparing the total count values for each state, to reassess outlier state values.\n\ntotcount_state &lt;- aggregate(Count ~ State, data = cdcdata5, FUN = sum) #aggregate and sum the count by the state value\nggplot(totcount_state, aes(x = State, y = Count)) + #use geom_point() to create a scatterplot for the total year count data frame that was created\n  theme(axis.text.x = element_text(angle = 90)) + #Rotate x axis labels\n  geom_point() + \n  labs(title = \"Botulism Count for each State (except CA) in the U.S.\", x = \"State\", y = \"Total Case Count\")\n\n\n\n\n\n\n\n\nThere are a few higher count values, such as for Oregon, but there seems to be no outstanding outliers. Because of this, we will move on.\n\n\n\nNext, I will examine the total number of cases for each Botulism Type. I will start by aggregating the total count for each type of outbreak. Then I will make a bar plot showing each category.\n\ntotcount_type &lt;- aggregate(Count ~ BotType, data = cdcdata5, FUN = sum) #Aggregate the count sum by the type of botulism\nggplot(totcount_type, aes(x = BotType, y = Count)) +\n  geom_bar(stat = \"identity\") + \n  labs(title = \"Distribution of Botulism Type\", x = \"Type of Botulism Outbreak\", y = \"Total Count\") #Make a bar plot with each differing identity of bot type listed on the x axis\n\n\n\n\n\n\n\n\nInfant botulism seems slightly more frequent than foodborne botulism. Wound botulism is much less common, but has a frequency close to “other” types of botulism.\n\n\n\nLastly, I will examine the total number of cases for each Toxin Type. This analysis will be done in a similar way as botulism type. The total count will be aggregated for each toxin type and then\n\ntotcount_toxin &lt;- aggregate(Count ~ ToxinType, data = cdcdata5, FUN = sum) #Aggregate the count sum by the type of toxin\nggplot(totcount_toxin, aes(x = ToxinType, y = Count)) +\n  geom_bar(stat = \"identity\") + #Make a bar plot with each differing identity of bot type listed on the x axis\n  labs(title = \"Distribution of Toxin Type\", x = \"Type of Toxin\", y = \"Total Count\")\n\n\n\n\n\n\n\n\nIt seems that the toxin type B is responsible for the highest case count, followed by A, unknown, and lastly, E. The toxin type is unknown for a significant chunk of cases in comparison to known types. The known types AB, ABE, BF, and F contribute to a very small portion of botulism cases in the U.S. compared to A, B, and E.\nThe toxin type corresponds to the strain of bacteria that produced the outbreak. This may mean that toxin type is correlated to the botulism outbreak type. To test BotType and ToxinType correlation, I will use a logistic regression model with these two variables. I use a logistic model with the outcome being botulism outbreak type and the predictor being toxin type.\n\nbotvtoxin &lt;- glm(BotType ~ ToxinType, data = cdcdata5, family = binomial) #use glm() to produce a logistic regression with the bottype versus the toxintype variables; regression is binomial\nsummary(botvtoxin) #ptint the results table\n\n\nCall:\nglm(formula = BotType ~ ToxinType, family = binomial, data = cdcdata5)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.0544  -0.4265   0.5987   0.9397   2.5042  \n\nCoefficients:\n                  Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)        0.58857    0.07426   7.926 2.27e-15 ***\nToxinTypeAB       13.97749  394.77485   0.035  0.97176    \nToxinTypeABE      13.97749  882.74338   0.016  0.98737    \nToxinTypeB         1.03981    0.12616   8.242  &lt; 2e-16 ***\nToxinTypeBF       13.97749  394.77485   0.035  0.97176    \nToxinTypeE        -3.67962    0.59498  -6.184 6.23e-10 ***\nToxinTypeF         1.39243    0.53851   2.586  0.00972 ** \nToxinTypeUnknown  -2.93995    0.21826 -13.470  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 2543.3  on 1902  degrees of freedom\nResidual deviance: 1881.1  on 1895  degrees of freedom\nAIC: 1897.1\n\nNumber of Fisher Scoring iterations: 13\n\n\nIt seems that toxin types A, B, E, and unknown are associated with the type of outbreak. Assuming that foodborne is the reference, as it is listed at the first factor level, this might mean there is an association between toxins A, B, E, and unknown with foodborne botulism outbreaks.\nThis was not confirmed by myself, but current literature suggests that foodborne botulism illness is associated with botulin toxin types A, B, and E. Refrence 3: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2094941/#:~:text=Botulism%20is%20a%20neuroparalytic%20illness,A%2C%20B%20or%20E).\n\n\n\nThe summary statistics of the final data set is shown here.The values for California have not been removed, due to significant they might hold. However, note that California has the highest case counts of any U.S. state.\n\nsummary(cdcdata5)\n\n        State           Year           BotType       ToxinType  \n Washington: 143   Min.   :1910   Foodborne: 740   A      :790  \n Texas     : 107   1st Qu.:1977   Infant   :1028   B      :701  \n Colorado  :  98   Median :1993   Other    :  55   Unknown:299  \n Oregon    :  95   Mean   :1987   Wound    :  80   E      : 69  \n Alaska    :  88   3rd Qu.:2006                    F      : 33  \n New York  :  81   Max.   :2017                    AB     :  5  \n (Other)   :1291                                   (Other):  6  \n     Count       \n Min.   : 1.000  \n 1st Qu.: 1.000  \n Median : 1.000  \n Mean   : 2.438  \n 3rd Qu.: 3.000  \n Max.   :59.000  \n                 \n\nskim(cdcdata5)\n\n\nData summary\n\n\nName\ncdcdata5\n\n\nNumber of rows\n1903\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nState\n0\n1\nFALSE\n49\nWas: 143, Tex: 107, Col: 98, Ore: 95\n\n\nBotType\n0\n1\nFALSE\n4\nInf: 1028, Foo: 740, Wou: 80, Oth: 55\n\n\nToxinType\n0\n1\nFALSE\n8\nA: 790, B: 701, Unk: 299, E: 69\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1986.67\n25.54\n1910\n1977\n1993\n2006\n2017\n▁▂▂▆▇\n\n\nCount\n0\n1\n2.44\n3.21\n1\n1\n1\n3\n59\n▇▁▁▁▁"
  },
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "Data Exercise",
    "section": "",
    "text": "For this data exercise, I will produce a synthetic data set and then use plots and tables to explore the synthetic data. Lastly, I will use a linear model to test the associations built within the data and use a logistic model to test if it is able to capture the same patterns within the synthetic data.\n\n\n\nI will start by opening the packages that I need to create multiple types of data.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(broom)\nlibrary(parsnip)\n\nI will then set a seed, which makes a random string reproducible when ran on another system. I will also give R a number of values to produce.\n\nset.seed(3) #Set seed to 3\nn_patients &lt;- 150 #Make 150 the number of patients\n\nTo create variables, I will begin with an empty data frame. In this example I will use the example of a vaccine trial. This data is not based on a real vaccine trial, but it will have variables that one would find in a clinical trial.\n\nvac_data &lt;- data.frame(\n  patient_id = numeric(n_patients),\n  age = numeric(n_patients),\n  gender = character(n_patients),\n  vac_group = character(n_patients),\n  vac_date = lubridate::as_date(character(n_patients)),\n  disease = integer(n_patients),\n  antibody = numeric(n_patients),\n  adverse_event = integer(n_patients)\n) #Set a blank data frame called vac_data with the variables, patient_id, age, gender, vac_group, vac_date, disease, antibody, and adverse_event\n\nNext, I will begin to generate the data for each of the aforementionned variables in the blank data frame.\n\nvac_data$patient_id &lt;- 1:n_patients #Set random values for patient ID\nvac_data$age &lt;- round(rnorm(n_patients, mean = 25, sd = 5), 1) #Set age to be normally distributed with a mean of 25 and sd of 5\nvac_data$gender &lt;- purrr::map_chr(sample(c(\"male\", \"female\", \"other\"), n_patients, replace= TRUE), as.character) #Set gender to be male, female, or other\nvac_data$vac_group &lt;- purrr::map_chr(sample(c(\"a\", \"b\", \"none\"), n_patients, replace= TRUE), as.character) #Set the vaccine group to a theoretical dose a (a), dose value b (b), or to no vaccine (none)\nvac_data$vac_date &lt;- lubridate::as_date(sample(seq(from = lubridate::as_date(\"2023-01-01\"), to = lubridate::as_date(\"2023-12-31\"), by = \"days\"), n_patients, replace = TRUE)) #Set the date values to be randomly assigned by day between the first day and last day of the year 2023\nvac_data$disease[vac_data$vac_group == \"a\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"a\"), replace = TRUE, prob = c(0.9, 0.1)), as.integer) #Set disease as 1 and no disease as 0, with a 90% vaccine efficacy for vaccine a\nvac_data$disease[vac_data$vac_group == \"b\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"b\"), replace = TRUE, prob = c(0.85, 0.15)), as.integer) #Set vaccine b efficacy to be 85%\nvac_data$disease[vac_data$vac_group == \"none\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"none\"), replace = TRUE, prob = c(0.5, 0.5)), as.integer) #Set the disease outcome to be 50% chances that one will get the disease (1) or not (0) without recieving a vaccine (none)\n\nI initially coded it with the number of items being n_patients, but I received an error because there were less “a”, “b”, and “none” values than the number of patients. To fix this, I asked ChatGPT to show me how not to create extra values in this scenario and it output the sum() function. Each variable would have a total number of values that equals the sum number of vaccine types given. This will not allow it to exceed the maximum and values can be replaced. Additionally, because the disease outcome (0=no, 1=yes) should correspond to the vaccine (a,b, or none), I assigned each vaccine group was assigned an efficacy probability.\nWhen adding an antibody titer variable (antibody) we will assume that the antibody titer is normally distributed in the patients and that vaccine efficacy is positively correlated with antibody titer. This means that vaccine a will have a higher mean than vaccine b. None have very low levels with a high sd to reflect that some individuals may ahev had past exposures to the disease.\n\nvac_data$antibody [vac_data$vac_group == \"a\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"a\"), mean = 40, sd = 5), 1) #The first vaccine has the highest probability of preventing disease so it has the highest mean antibody titer of 1:40 and a small standard deviation\nvac_data$antibody [vac_data$vac_group == \"b\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"b\"), mean = 32, sd = 5), 1) #The second vaccine has the second highest probability of preventing disease so it has the second highest mean antibody titer of 1:32\nvac_data$antibody [vac_data$vac_group == \"none\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"none\"), mean = 10, sd = 10), 1) #No vaccine has a mean of 10 with a high standard deviation, of 10, to account for past exposures at different time points\n\nLastly, adverse events will only occur if the individual has recieved the vaccine. Other conditions seen in the “none” group will not be resorded as adverse events because it would jsut be the placebo effect. Because of this the none group will always have 0 for adverse events.\n\nvac_data$adverse_event [vac_data$vac_group == \"a\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"a\"), replace = TRUE, prob = c(0.6, 0.4)), as.integer) #Setting adverse event probability for vaccine a to 40%\nvac_data$adverse_event [vac_data$vac_group == \"b\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"b\"), replace = TRUE, prob = c(0.8, 0.2)), as.integer) #Setting adverse event probability for vaccine b to 20%\nvac_data$adverse_event [vac_data$vac_group == \"none\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"none\"), replace = TRUE, prob = c(1.0, 0.0)), as.integer)  #Setting adverse event probability for no vaccine to 0%\n\nI will now save the synthetic dataset as a cvs file\n\nwrite.csv(vac_data, here(\"data-exercise\",\"vac_data.csv\"), row.names = FALSE)\n\n\n\n\nI will now check the synthetic data set with summary stats and then examine the structure.\n\nsummary(vac_data) #checking summary stats\n\n   patient_id          age           gender           vac_group        \n Min.   :  1.00   Min.   :13.00   Length:150         Length:150        \n 1st Qu.: 38.25   1st Qu.:21.32   Class :character   Class :character  \n Median : 75.50   Median :25.15   Mode  :character   Mode  :character  \n Mean   : 75.50   Mean   :24.82                                        \n 3rd Qu.:112.75   3rd Qu.:28.48                                        \n Max.   :150.00   Max.   :34.70                                        \n    vac_date             disease          antibody      adverse_event\n Min.   :2023-01-01   Min.   :0.0000   Min.   :-11.20   Min.   :0.0  \n 1st Qu.:2023-04-03   1st Qu.:0.0000   1st Qu.: 22.32   1st Qu.:0.0  \n Median :2023-06-22   Median :0.0000   Median : 32.00   Median :0.0  \n Mean   :2023-06-29   Mean   :0.2467   Mean   : 28.52   Mean   :0.2  \n 3rd Qu.:2023-09-30   3rd Qu.:0.0000   3rd Qu.: 37.77   3rd Qu.:0.0  \n Max.   :2023-12-26   Max.   :1.0000   Max.   : 48.00   Max.   :1.0  \n\nstr(vac_data) #checking data structure\n\n'data.frame':   150 obs. of  8 variables:\n $ patient_id   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ age          : num  20.2 23.5 26.3 19.2 26 25.2 25.4 30.6 18.9 31.3 ...\n $ gender       : chr  \"female\" \"male\" \"male\" \"other\" ...\n $ vac_group    : chr  \"a\" \"none\" \"b\" \"none\" ...\n $ vac_date     : Date, format: \"2023-05-05\" \"2023-05-15\" ...\n $ disease      : int  0 0 0 0 0 1 0 0 0 0 ...\n $ antibody     : num  44.2 20.4 36.7 10.9 35.6 33.2 31.9 39.6 38.1 44.4 ...\n $ adverse_event: int  1 0 0 0 1 1 1 0 0 1 ...\n\n\nI now use a table to check the number if individuals in each vaccine group that had the disease outcome.\n\ntable(vac_data$disease,vac_data$vac_group)#Create table with disease versus vaccine group\n\n   \n     a  b none\n  0 42 52   19\n  1  2 12   23\n\n\nI will now check the distributuion of antibody titer values depending on vaccine group by using a box plot.\n\nggplot(vac_data, aes(x = vac_group, y = antibody)) +\n  geom_boxplot() +\n  labs(x = \"Vaccine Administerred\", y = \"Antibody Titer (1:y)\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThe data should not include values of negative values, so this does not reflect a real-life scenerio. However, I was unable to add a minimum value to the normally distributed, generated data. So these values must be removed through data-cleaning steps before analysis. ## Cleaning synthetic data\n\nvac_data2 &lt;- vac_data %&gt;%\n  filter(antibody &gt;= 0) #Removing zero and negative data\nsummary(vac_data2) #Checking total number of values and that negative values of antibody were removed\n\n   patient_id          age           gender           vac_group        \n Min.   :  1.00   Min.   :13.00   Length:146         Length:146        \n 1st Qu.: 39.25   1st Qu.:21.32   Class :character   Class :character  \n Median : 76.00   Median :25.15   Mode  :character   Mode  :character  \n Mean   : 75.84   Mean   :24.80                                        \n 3rd Qu.:112.75   3rd Qu.:28.40                                        \n Max.   :150.00   Max.   :34.70                                        \n    vac_date             disease         antibody     adverse_event   \n Min.   :2023-01-01   Min.   :0.000   Min.   : 0.10   Min.   :0.0000  \n 1st Qu.:2023-04-02   1st Qu.:0.000   1st Qu.:24.02   1st Qu.:0.0000  \n Median :2023-06-19   Median :0.000   Median :32.70   Median :0.0000  \n Mean   :2023-06-27   Mean   :0.226   Mean   :29.44   Mean   :0.2055  \n 3rd Qu.:2023-09-29   3rd Qu.:0.000   3rd Qu.:38.02   3rd Qu.:0.0000  \n Max.   :2023-12-26   Max.   :1.000   Max.   :48.00   Max.   :1.0000  \n\n\nThree negative values were removed from the antibody column, which reduced the sample. The remaining sample will be used to check for the trends that I built into the data set.\n\n\n\nI will do some data processing before generating models to make the code more robust. First, I select the variables I want to analyze for the built-in trends. Next, I convert the vaccine group variable to a factor instead of a character. Lastly, I check that this was successful with summary stats.\n\nvac_data2 &lt;- vac_data2 %&gt;%  \n  select(vac_group, disease, antibody, adverse_event) #Select the variables to analyze from vac_data2\nvac_data2$vac_group &lt;- as.factor(vac_data2$vac_group) #change vac_group from a character to a factor\nsummary(vac_data2) #check for successful processing\n\n vac_group    disease         antibody     adverse_event   \n a   :44   Min.   :0.000   Min.   : 0.10   Min.   :0.0000  \n b   :64   1st Qu.:0.000   1st Qu.:24.02   1st Qu.:0.0000  \n none:38   Median :0.000   Median :32.70   Median :0.0000  \n           Mean   :0.226   Mean   :29.44   Mean   :0.2055  \n           3rd Qu.:0.000   3rd Qu.:38.02   3rd Qu.:0.0000  \n           Max.   :1.000   Max.   :48.00   Max.   :1.0000  \n\nstr(vac_data2$vac_group) #check that vac_group is a factor\n\n Factor w/ 3 levels \"a\",\"b\",\"none\": 1 3 2 3 1 2 2 1 1 1 ...\n\n\nFirst, I will check the vaccine efficacy trend that I built into the data set. I will use a linear regression model to find associations between disease outcome and vaccine group.\n\nvac_group_disease &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(disease ~ vac_group, data = vac_data2)\ntidy(vac_group_disease)\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic     p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 (Intercept)     0.0455    0.0580     0.784 0.434      \n2 vac_groupb      0.142     0.0753     1.89  0.0614     \n3 vac_groupnone   0.455     0.0852     5.34  0.000000364\n\n\nIt seems that neither vaccine group b or no vaccine correlate with disease outcome. In this case, the vaccine b would not be effective. instead, we want to look at another model to display the data trends. I will try using a linear model with interactions between antibody and vaccine group variables.\n\nvac_group_disease2 &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(disease ~ vac_group + antibody + antibody*vac_group, data = vac_data2)\ntidy(vac_group_disease2)\n\n# A tibble: 6 × 5\n  term                   estimate std.error statistic p.value\n  &lt;chr&gt;                     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)            -0.101      0.507     -0.200   0.842\n2 vac_groupb              0.607      0.615      0.988   0.325\n3 vac_groupnone           0.653      0.520      1.26    0.211\n4 antibody                0.00369    0.0127     0.291   0.771\n5 vac_groupb:antibody    -0.0137     0.0167    -0.822   0.413\n6 vac_groupnone:antibody -0.00756    0.0146    -0.516   0.606\n\n\nThis table shows an that when considering the interaction of the antibody levels and vaccine group, there is a negative association with disease. However, this association is not statistically significant. This tells me that I should be using a logistic regression model instead. I will produce a logistic regression with vaccine group versus disease outcome.To use logistic regression, I must first change disease to a factor.\n\nvac_data2$disease &lt;- factor(vac_data2$disease) #convert disease into a factor rather than an integer\nvac_group_disease3 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\", family = binomial) %&gt;%\n  parsnip::fit(disease ~ vac_group, data = vac_data2)\ntidy(vac_group_disease3) #I used ChatGPT to help me convert the previous code I used for a linear model to code that produces a logistic regression\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic   p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)      -3.04     0.724     -4.21 0.0000259\n2 vac_groupb        1.58     0.791      1.99 0.0461   \n3 vac_groupnone     3.04     0.793      3.84 0.000124 \n\n\nThe vac group b has a lower disease outcome estimate than the none group, despite them both being positive. The p-value for both groups is p&lt;0.05.\nNow, I will check the antibody titer trends that I built into the data set. I will use a linear regression model to find associations between the vaccine group and antibody levels.\n\nvac_group_antibody &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(antibody ~ vac_group, data = vac_data2)\ntidy(vac_group_antibody)\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic  p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)      39.7      0.890     44.6  8.22e-86\n2 vac_groupb       -7.91     1.16      -6.84 2.14e-10\n3 vac_groupnone   -26.2      1.31     -20.0  2.31e-43\n\n\nIt seems that both estimates are negative, with the vaccine group having a greater estimate than the none group, which is consistent with the trend of greater antibody levels in those that received the vaccine.\nLastly, I will check the adverse effect trends that I built into the data set. will use a logistic regression model to find associations between the vaccine group and adverse effects.\n\nvac_data2$adverse_event &lt;- factor(vac_data2$adverse_event) #convert adverse event into a factor rather than an integer\nvac_group_ae &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\", family = binomial) %&gt;%\n  parsnip::fit(adverse_event ~ vac_group, data = vac_data2)\ntidy(vac_group_ae) #logistic regression of adverse event (outcome) depending on vaccine group\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)     -0.274     0.304   -0.902  0.367  \n2 vac_groupb      -1.30      0.450   -2.89   0.00391\n3 vac_groupnone  -18.3    1058.      -0.0173 0.986  \n\n\nThere is a higher estimate for adverse events for the vaccine group b than the none group. However, this estimate is only statistically significant for the vaccine group b.\nOverall, I cannot conclude that the synthetic data produced had my intended built-in-trends. However, more complex models such as multivariate regressions, might be able to identify these trends."
  },
  {
    "objectID": "data-exercise/data-exercise.html#option-2",
    "href": "data-exercise/data-exercise.html#option-2",
    "title": "Data Exercise",
    "section": "",
    "text": "For this data exercise, I will produce a synthetic data set and then use plots and tables to explore the synthetic data. Lastly, I will use a linear model to test the associations built within the data and use a logistic model to test if it is able to capture the same patterns within the synthetic data."
  },
  {
    "objectID": "data-exercise/data-exercise.html#generating-synthetic-data",
    "href": "data-exercise/data-exercise.html#generating-synthetic-data",
    "title": "Data Exercise",
    "section": "",
    "text": "I will start by opening the packages that I need to create multiple types of data.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(ggplot2)\nlibrary(here)\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\nlibrary(readr)\nlibrary(broom)\nlibrary(parsnip)\n\nI will then set a seed, which makes a random string reproducible when ran on another system. I will also give R a number of values to produce.\n\nset.seed(3) #Set seed to 3\nn_patients &lt;- 150 #Make 150 the number of patients\n\nTo create variables, I will begin with an empty data frame. In this example I will use the example of a vaccine trial. This data is not based on a real vaccine trial, but it will have variables that one would find in a clinical trial.\n\nvac_data &lt;- data.frame(\n  patient_id = numeric(n_patients),\n  age = numeric(n_patients),\n  gender = character(n_patients),\n  vac_group = character(n_patients),\n  vac_date = lubridate::as_date(character(n_patients)),\n  disease = integer(n_patients),\n  antibody = numeric(n_patients),\n  adverse_event = integer(n_patients)\n) #Set a blank data frame called vac_data with the variables, patient_id, age, gender, vac_group, vac_date, disease, antibody, and adverse_event\n\nNext, I will begin to generate the data for each of the aforementionned variables in the blank data frame.\n\nvac_data$patient_id &lt;- 1:n_patients #Set random values for patient ID\nvac_data$age &lt;- round(rnorm(n_patients, mean = 25, sd = 5), 1) #Set age to be normally distributed with a mean of 25 and sd of 5\nvac_data$gender &lt;- purrr::map_chr(sample(c(\"male\", \"female\", \"other\"), n_patients, replace= TRUE), as.character) #Set gender to be male, female, or other\nvac_data$vac_group &lt;- purrr::map_chr(sample(c(\"a\", \"b\", \"none\"), n_patients, replace= TRUE), as.character) #Set the vaccine group to a theoretical dose a (a), dose value b (b), or to no vaccine (none)\nvac_data$vac_date &lt;- lubridate::as_date(sample(seq(from = lubridate::as_date(\"2023-01-01\"), to = lubridate::as_date(\"2023-12-31\"), by = \"days\"), n_patients, replace = TRUE)) #Set the date values to be randomly assigned by day between the first day and last day of the year 2023\nvac_data$disease[vac_data$vac_group == \"a\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"a\"), replace = TRUE, prob = c(0.9, 0.1)), as.integer) #Set disease as 1 and no disease as 0, with a 90% vaccine efficacy for vaccine a\nvac_data$disease[vac_data$vac_group == \"b\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"b\"), replace = TRUE, prob = c(0.85, 0.15)), as.integer) #Set vaccine b efficacy to be 85%\nvac_data$disease[vac_data$vac_group == \"none\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"none\"), replace = TRUE, prob = c(0.5, 0.5)), as.integer) #Set the disease outcome to be 50% chances that one will get the disease (1) or not (0) without recieving a vaccine (none)\n\nI initially coded it with the number of items being n_patients, but I received an error because there were less “a”, “b”, and “none” values than the number of patients. To fix this, I asked ChatGPT to show me how not to create extra values in this scenario and it output the sum() function. Each variable would have a total number of values that equals the sum number of vaccine types given. This will not allow it to exceed the maximum and values can be replaced. Additionally, because the disease outcome (0=no, 1=yes) should correspond to the vaccine (a,b, or none), I assigned each vaccine group was assigned an efficacy probability.\nWhen adding an antibody titer variable (antibody) we will assume that the antibody titer is normally distributed in the patients and that vaccine efficacy is positively correlated with antibody titer. This means that vaccine a will have a higher mean than vaccine b. None have very low levels with a high sd to reflect that some individuals may ahev had past exposures to the disease.\n\nvac_data$antibody [vac_data$vac_group == \"a\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"a\"), mean = 40, sd = 5), 1) #The first vaccine has the highest probability of preventing disease so it has the highest mean antibody titer of 1:40 and a small standard deviation\nvac_data$antibody [vac_data$vac_group == \"b\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"b\"), mean = 32, sd = 5), 1) #The second vaccine has the second highest probability of preventing disease so it has the second highest mean antibody titer of 1:32\nvac_data$antibody [vac_data$vac_group == \"none\"] &lt;- round(rnorm(sum(vac_data$vac_group == \"none\"), mean = 10, sd = 10), 1) #No vaccine has a mean of 10 with a high standard deviation, of 10, to account for past exposures at different time points\n\nLastly, adverse events will only occur if the individual has recieved the vaccine. Other conditions seen in the “none” group will not be resorded as adverse events because it would jsut be the placebo effect. Because of this the none group will always have 0 for adverse events.\n\nvac_data$adverse_event [vac_data$vac_group == \"a\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"a\"), replace = TRUE, prob = c(0.6, 0.4)), as.integer) #Setting adverse event probability for vaccine a to 40%\nvac_data$adverse_event [vac_data$vac_group == \"b\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"b\"), replace = TRUE, prob = c(0.8, 0.2)), as.integer) #Setting adverse event probability for vaccine b to 20%\nvac_data$adverse_event [vac_data$vac_group == \"none\"] &lt;- purrr::map_int(sample(0:1, sum(vac_data$vac_group == \"none\"), replace = TRUE, prob = c(1.0, 0.0)), as.integer)  #Setting adverse event probability for no vaccine to 0%\n\nI will now save the synthetic dataset as a cvs file\n\nwrite.csv(vac_data, here(\"data-exercise\",\"vac_data.csv\"), row.names = FALSE)"
  },
  {
    "objectID": "data-exercise/data-exercise.html#checking-the-synthetic-data-set",
    "href": "data-exercise/data-exercise.html#checking-the-synthetic-data-set",
    "title": "Data Exercise",
    "section": "",
    "text": "I will now check the synthetic data set with summary stats and then examine the structure.\n\nsummary(vac_data) #checking summary stats\n\n   patient_id          age           gender           vac_group        \n Min.   :  1.00   Min.   :13.00   Length:150         Length:150        \n 1st Qu.: 38.25   1st Qu.:21.32   Class :character   Class :character  \n Median : 75.50   Median :25.15   Mode  :character   Mode  :character  \n Mean   : 75.50   Mean   :24.82                                        \n 3rd Qu.:112.75   3rd Qu.:28.48                                        \n Max.   :150.00   Max.   :34.70                                        \n    vac_date             disease          antibody      adverse_event\n Min.   :2023-01-01   Min.   :0.0000   Min.   :-11.20   Min.   :0.0  \n 1st Qu.:2023-04-03   1st Qu.:0.0000   1st Qu.: 22.32   1st Qu.:0.0  \n Median :2023-06-22   Median :0.0000   Median : 32.00   Median :0.0  \n Mean   :2023-06-29   Mean   :0.2467   Mean   : 28.52   Mean   :0.2  \n 3rd Qu.:2023-09-30   3rd Qu.:0.0000   3rd Qu.: 37.77   3rd Qu.:0.0  \n Max.   :2023-12-26   Max.   :1.0000   Max.   : 48.00   Max.   :1.0  \n\nstr(vac_data) #checking data structure\n\n'data.frame':   150 obs. of  8 variables:\n $ patient_id   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ age          : num  20.2 23.5 26.3 19.2 26 25.2 25.4 30.6 18.9 31.3 ...\n $ gender       : chr  \"female\" \"male\" \"male\" \"other\" ...\n $ vac_group    : chr  \"a\" \"none\" \"b\" \"none\" ...\n $ vac_date     : Date, format: \"2023-05-05\" \"2023-05-15\" ...\n $ disease      : int  0 0 0 0 0 1 0 0 0 0 ...\n $ antibody     : num  44.2 20.4 36.7 10.9 35.6 33.2 31.9 39.6 38.1 44.4 ...\n $ adverse_event: int  1 0 0 0 1 1 1 0 0 1 ...\n\n\nI now use a table to check the number if individuals in each vaccine group that had the disease outcome.\n\ntable(vac_data$disease,vac_data$vac_group)#Create table with disease versus vaccine group\n\n   \n     a  b none\n  0 42 52   19\n  1  2 12   23\n\n\nI will now check the distributuion of antibody titer values depending on vaccine group by using a box plot.\n\nggplot(vac_data, aes(x = vac_group, y = antibody)) +\n  geom_boxplot() +\n  labs(x = \"Vaccine Administerred\", y = \"Antibody Titer (1:y)\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThe data should not include values of negative values, so this does not reflect a real-life scenerio. However, I was unable to add a minimum value to the normally distributed, generated data. So these values must be removed through data-cleaning steps before analysis. ## Cleaning synthetic data\n\nvac_data2 &lt;- vac_data %&gt;%\n  filter(antibody &gt;= 0) #Removing zero and negative data\nsummary(vac_data2) #Checking total number of values and that negative values of antibody were removed\n\n   patient_id          age           gender           vac_group        \n Min.   :  1.00   Min.   :13.00   Length:146         Length:146        \n 1st Qu.: 39.25   1st Qu.:21.32   Class :character   Class :character  \n Median : 76.00   Median :25.15   Mode  :character   Mode  :character  \n Mean   : 75.84   Mean   :24.80                                        \n 3rd Qu.:112.75   3rd Qu.:28.40                                        \n Max.   :150.00   Max.   :34.70                                        \n    vac_date             disease         antibody     adverse_event   \n Min.   :2023-01-01   Min.   :0.000   Min.   : 0.10   Min.   :0.0000  \n 1st Qu.:2023-04-02   1st Qu.:0.000   1st Qu.:24.02   1st Qu.:0.0000  \n Median :2023-06-19   Median :0.000   Median :32.70   Median :0.0000  \n Mean   :2023-06-27   Mean   :0.226   Mean   :29.44   Mean   :0.2055  \n 3rd Qu.:2023-09-29   3rd Qu.:0.000   3rd Qu.:38.02   3rd Qu.:0.0000  \n Max.   :2023-12-26   Max.   :1.000   Max.   :48.00   Max.   :1.0000  \n\n\nThree negative values were removed from the antibody column, which reduced the sample. The remaining sample will be used to check for the trends that I built into the data set."
  },
  {
    "objectID": "data-exercise/data-exercise.html#checking-the-trends",
    "href": "data-exercise/data-exercise.html#checking-the-trends",
    "title": "Data Exercise",
    "section": "",
    "text": "I will do some data processing before generating models to make the code more robust. First, I select the variables I want to analyze for the built-in trends. Next, I convert the vaccine group variable to a factor instead of a character. Lastly, I check that this was successful with summary stats.\n\nvac_data2 &lt;- vac_data2 %&gt;%  \n  select(vac_group, disease, antibody, adverse_event) #Select the variables to analyze from vac_data2\nvac_data2$vac_group &lt;- as.factor(vac_data2$vac_group) #change vac_group from a character to a factor\nsummary(vac_data2) #check for successful processing\n\n vac_group    disease         antibody     adverse_event   \n a   :44   Min.   :0.000   Min.   : 0.10   Min.   :0.0000  \n b   :64   1st Qu.:0.000   1st Qu.:24.02   1st Qu.:0.0000  \n none:38   Median :0.000   Median :32.70   Median :0.0000  \n           Mean   :0.226   Mean   :29.44   Mean   :0.2055  \n           3rd Qu.:0.000   3rd Qu.:38.02   3rd Qu.:0.0000  \n           Max.   :1.000   Max.   :48.00   Max.   :1.0000  \n\nstr(vac_data2$vac_group) #check that vac_group is a factor\n\n Factor w/ 3 levels \"a\",\"b\",\"none\": 1 3 2 3 1 2 2 1 1 1 ...\n\n\nFirst, I will check the vaccine efficacy trend that I built into the data set. I will use a linear regression model to find associations between disease outcome and vaccine group.\n\nvac_group_disease &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(disease ~ vac_group, data = vac_data2)\ntidy(vac_group_disease)\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic     p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 (Intercept)     0.0455    0.0580     0.784 0.434      \n2 vac_groupb      0.142     0.0753     1.89  0.0614     \n3 vac_groupnone   0.455     0.0852     5.34  0.000000364\n\n\nIt seems that neither vaccine group b or no vaccine correlate with disease outcome. In this case, the vaccine b would not be effective. instead, we want to look at another model to display the data trends. I will try using a linear model with interactions between antibody and vaccine group variables.\n\nvac_group_disease2 &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(disease ~ vac_group + antibody + antibody*vac_group, data = vac_data2)\ntidy(vac_group_disease2)\n\n# A tibble: 6 × 5\n  term                   estimate std.error statistic p.value\n  &lt;chr&gt;                     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)            -0.101      0.507     -0.200   0.842\n2 vac_groupb              0.607      0.615      0.988   0.325\n3 vac_groupnone           0.653      0.520      1.26    0.211\n4 antibody                0.00369    0.0127     0.291   0.771\n5 vac_groupb:antibody    -0.0137     0.0167    -0.822   0.413\n6 vac_groupnone:antibody -0.00756    0.0146    -0.516   0.606\n\n\nThis table shows an that when considering the interaction of the antibody levels and vaccine group, there is a negative association with disease. However, this association is not statistically significant. This tells me that I should be using a logistic regression model instead. I will produce a logistic regression with vaccine group versus disease outcome.To use logistic regression, I must first change disease to a factor.\n\nvac_data2$disease &lt;- factor(vac_data2$disease) #convert disease into a factor rather than an integer\nvac_group_disease3 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\", family = binomial) %&gt;%\n  parsnip::fit(disease ~ vac_group, data = vac_data2)\ntidy(vac_group_disease3) #I used ChatGPT to help me convert the previous code I used for a linear model to code that produces a logistic regression\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic   p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)      -3.04     0.724     -4.21 0.0000259\n2 vac_groupb        1.58     0.791      1.99 0.0461   \n3 vac_groupnone     3.04     0.793      3.84 0.000124 \n\n\nThe vac group b has a lower disease outcome estimate than the none group, despite them both being positive. The p-value for both groups is p&lt;0.05.\nNow, I will check the antibody titer trends that I built into the data set. I will use a linear regression model to find associations between the vaccine group and antibody levels.\n\nvac_group_antibody &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(antibody ~ vac_group, data = vac_data2)\ntidy(vac_group_antibody)\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic  p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)      39.7      0.890     44.6  8.22e-86\n2 vac_groupb       -7.91     1.16      -6.84 2.14e-10\n3 vac_groupnone   -26.2      1.31     -20.0  2.31e-43\n\n\nIt seems that both estimates are negative, with the vaccine group having a greater estimate than the none group, which is consistent with the trend of greater antibody levels in those that received the vaccine.\nLastly, I will check the adverse effect trends that I built into the data set. will use a logistic regression model to find associations between the vaccine group and adverse effects.\n\nvac_data2$adverse_event &lt;- factor(vac_data2$adverse_event) #convert adverse event into a factor rather than an integer\nvac_group_ae &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\", family = binomial) %&gt;%\n  parsnip::fit(adverse_event ~ vac_group, data = vac_data2)\ntidy(vac_group_ae) #logistic regression of adverse event (outcome) depending on vaccine group\n\n# A tibble: 3 × 5\n  term          estimate std.error statistic p.value\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)     -0.274     0.304   -0.902  0.367  \n2 vac_groupb      -1.30      0.450   -2.89   0.00391\n3 vac_groupnone  -18.3    1058.      -0.0173 0.986  \n\n\nThere is a higher estimate for adverse events for the vaccine group b than the none group. However, this estimate is only statistically significant for the vaccine group b.\nOverall, I cannot conclude that the synthetic data produced had my intended built-in-trends. However, more complex models such as multivariate regressions, might be able to identify these trends."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html#for-your-own-explorations-tables-and-figures-can-be-quick-and-dirty.-as-long-as-you-can-see-whats-going-on-there-is-no-need-to-polish-them.-thats-in-contrast-to-figures-youll-produce-for-your-final-products-paper-report-presentation-website-etc..-those-should-look-as-nice-polished-and-easy-to-understand-as-possible.",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html#for-your-own-explorations-tables-and-figures-can-be-quick-and-dirty.-as-long-as-you-can-see-whats-going-on-there-is-no-need-to-polish-them.-thats-in-contrast-to-figures-youll-produce-for-your-final-products-paper-report-presentation-website-etc..-those-should-look-as-nice-polished-and-easy-to-understand-as-possible.",
    "title": "An example exploratory analysis script",
    "section": "For your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible.",
    "text": "For your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at C:/Users/rrsta/OneDrive/Desktop/MADAcourseexercises/MADAcourserepo\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Rachel Robertson Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  }
]